// --- template _header.gotpl ---
// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"os"
	"testing"

	// no-op import for go modules
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type PrismaTransaction = transaction.Transaction

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type Boolean = bool
type String = string
type Int = int
type Float = float64

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template client.gotpl ---
const datasources = `[{"name":"db","provider":"postgresql","activeProvider":"postgresql","url":{"fromEnvVar":"SESSION_URL","value":""},"config":null}]`

const schema = `datasource db {
    provider = "postgresql"
    url      = env("SESSION_URL")
}

generator client {
    provider = "go run github.com/steebchen/prisma-client-go"
}

model User {
    id              Int               @default(autoincrement())
    uuid            String            @id @unique @default(uuid())
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    email           String            @unique
    password        String
    posts           Post[]
    comments        Comment[]
    likes           Like[]
    userProfile     UserProfile?
    PublicationPost PublicationPost[]
    UserFollower    UserFollower[]    @relation("UserFollower")
    UserFollowee    UserFollower[]    @relation("UserFollowee")
}

model UserProfile {
    id             Int      @default(autoincrement())
    uuid           String   @id @unique @default(uuid())
    firstName      String
    lastName       String
    bio            String
    profilePicture String
    user           User     @relation(fields: [userUuid], references: [uuid])
    userUuid       String   @unique
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Post {
    id              Int              @default(autoincrement())
    uuid            String           @id @unique @default(uuid())
    title           String
    source          String
    srcType         SrcType
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    published       Boolean
    userUuid        String
    user            User             @relation(fields: [userUuid], references: [uuid])
    tags            PostTag          @relation(onDelete: Cascade, fields: [postTagId], references: [id])
    category        PostCategory     @relation(fields: [postCategoryId], references: [id])
    postCategoryId  Int
    postTagId       Int              @unique
    comments        Comment[]
    likes           Like[]
    PublicationPost PublicationPost? @relation()
    publishPostUuid String?          @unique
}

model PostTag {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post?    @relation()
    tags      String[]
}

model PostCategory {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post[]
}

enum SrcType {
    MARKDOWN_URL
    CONTENT
    MARKDOWN_FILE
}

model Comment {
    id        Int      @default(autoincrement())
    uuid      String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    userUuid  String
    postUuid  String
    user      User     @relation(fields: [userUuid], references: [uuid])
    post      Post     @relation(fields: [postUuid], references: [uuid])
}

model Like {
    id        Int      @default(autoincrement())
    uuid      String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    userUuid  String
    postUuid  String
    user      User     @relation(fields: [userUuid], references: [uuid])
    post      Post     @relation(fields: [postUuid], references: [uuid])

    @@unique([userUuid, postUuid])
}

model UserFollower {
    id           Int      @id @default(autoincrement())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    follower     User     @relation(name: "UserFollower", fields: [followerUuid], references: [uuid])
    followee     User     @relation(name: "UserFollowee", fields: [followeeUuid], references: [uuid])
    followerUuid String
    followeeUuid String

    @@unique([followerUuid, followeeUuid])
}

model PublicationPost {
    id        Int      @default(autoincrement())
    uuid      String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User     @relation(fields: [userUuid], references: [uuid])
    Post      Post     @relation(onDelete: Cascade, fields: [postUuid], references: [uuid])
    postUuid  String   @unique
    userUuid  String
}
`
const schemaDatasourceURL = ""
const schemaEnvVarName = "SESSION_URL"

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient(options ...func(config *PrismaConfig)) *PrismaClient {
	var config PrismaConfig
	for _, option := range options {
		option(&config)
	}

	c := newClient()

	// use the schema connection url if set
	url := config.datasourceURL
	if url == "" {
		url = schemaDatasourceURL
		if url == "" {
			// if not, use the schema env var name
			url = os.Getenv(schemaEnvVarName)
			if url == "" {
				//panic("no connection string found")
				println("WARNING: env var which was defined in the Prisma schema is not set" + schemaEnvVarName)
			}
		}
	}

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets, datasources, url)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

type PrismaConfig struct {
	datasourceURL string
}

func WithDatasourceURL(url string) func(*PrismaConfig) {
	return func(config *PrismaConfig) {
		config.datasourceURL = url
	}
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.User = userActions{client: c}
	c.UserProfile = userProfileActions{client: c}
	c.Post = postActions{client: c}
	c.PostTag = postTagActions{client: c}
	c.PostCategory = postCategoryActions{client: c}
	c.Comment = commentActions{client: c}
	c.Like = likeActions{client: c}
	c.UserFollower = userFollowerActions{client: c}
	c.PublicationPost = publicationPostActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// User provides access to CRUD methods.
	User userActions
	// UserProfile provides access to CRUD methods.
	UserProfile userProfileActions
	// Post provides access to CRUD methods.
	Post postActions
	// PostTag provides access to CRUD methods.
	PostTag postTagActions
	// PostCategory provides access to CRUD methods.
	PostCategory postCategoryActions
	// Comment provides access to CRUD methods.
	Comment commentActions
	// Like provides access to CRUD methods.
	Like likeActions
	// UserFollower provides access to CRUD methods.
	UserFollower userFollowerActions
	// PublicationPost provides access to CRUD methods.
	PublicationPost publicationPostActions
}

// --- template enums.gotpl ---

type SrcType string

const (
	SrcTypeMarkdownURL  SrcType = "MARKDOWN_URL"
	SrcTypeContent      SrcType = "CONTENT"
	SrcTypeMarkdownFile SrcType = "MARKDOWN_FILE"
)

type RawSrcType SrcType

type TransactionIsolationLevel string

const (
	TransactionIsolationLevelReadUncommitted TransactionIsolationLevel = "ReadUncommitted"
	TransactionIsolationLevelReadCommitted   TransactionIsolationLevel = "ReadCommitted"
	TransactionIsolationLevelRepeatableRead  TransactionIsolationLevel = "RepeatableRead"
	TransactionIsolationLevelSerializable    TransactionIsolationLevel = "Serializable"
)

type UserScalarFieldEnum string

const (
	UserScalarFieldEnumID        UserScalarFieldEnum = "id"
	UserScalarFieldEnumUUID      UserScalarFieldEnum = "uuid"
	UserScalarFieldEnumCreatedAt UserScalarFieldEnum = "createdAt"
	UserScalarFieldEnumUpdatedAt UserScalarFieldEnum = "updatedAt"
	UserScalarFieldEnumEmail     UserScalarFieldEnum = "email"
	UserScalarFieldEnumPassword  UserScalarFieldEnum = "password"
)

type UserProfileScalarFieldEnum string

const (
	UserProfileScalarFieldEnumID             UserProfileScalarFieldEnum = "id"
	UserProfileScalarFieldEnumUUID           UserProfileScalarFieldEnum = "uuid"
	UserProfileScalarFieldEnumFirstName      UserProfileScalarFieldEnum = "firstName"
	UserProfileScalarFieldEnumLastName       UserProfileScalarFieldEnum = "lastName"
	UserProfileScalarFieldEnumBio            UserProfileScalarFieldEnum = "bio"
	UserProfileScalarFieldEnumProfilePicture UserProfileScalarFieldEnum = "profilePicture"
	UserProfileScalarFieldEnumUserUUID       UserProfileScalarFieldEnum = "userUuid"
	UserProfileScalarFieldEnumCreatedAt      UserProfileScalarFieldEnum = "createdAt"
	UserProfileScalarFieldEnumUpdatedAt      UserProfileScalarFieldEnum = "updatedAt"
)

type PostScalarFieldEnum string

const (
	PostScalarFieldEnumID              PostScalarFieldEnum = "id"
	PostScalarFieldEnumUUID            PostScalarFieldEnum = "uuid"
	PostScalarFieldEnumTitle           PostScalarFieldEnum = "title"
	PostScalarFieldEnumSource          PostScalarFieldEnum = "source"
	PostScalarFieldEnumSrcType         PostScalarFieldEnum = "srcType"
	PostScalarFieldEnumCreatedAt       PostScalarFieldEnum = "createdAt"
	PostScalarFieldEnumUpdatedAt       PostScalarFieldEnum = "updatedAt"
	PostScalarFieldEnumPublished       PostScalarFieldEnum = "published"
	PostScalarFieldEnumUserUUID        PostScalarFieldEnum = "userUuid"
	PostScalarFieldEnumPostCategoryID  PostScalarFieldEnum = "postCategoryId"
	PostScalarFieldEnumPostTagID       PostScalarFieldEnum = "postTagId"
	PostScalarFieldEnumPublishPostUUID PostScalarFieldEnum = "publishPostUuid"
)

type PostTagScalarFieldEnum string

const (
	PostTagScalarFieldEnumID        PostTagScalarFieldEnum = "id"
	PostTagScalarFieldEnumCreatedAt PostTagScalarFieldEnum = "createdAt"
	PostTagScalarFieldEnumUpdatedAt PostTagScalarFieldEnum = "updatedAt"
	PostTagScalarFieldEnumTags      PostTagScalarFieldEnum = "tags"
)

type PostCategoryScalarFieldEnum string

const (
	PostCategoryScalarFieldEnumID        PostCategoryScalarFieldEnum = "id"
	PostCategoryScalarFieldEnumName      PostCategoryScalarFieldEnum = "name"
	PostCategoryScalarFieldEnumCreatedAt PostCategoryScalarFieldEnum = "createdAt"
	PostCategoryScalarFieldEnumUpdatedAt PostCategoryScalarFieldEnum = "updatedAt"
)

type CommentScalarFieldEnum string

const (
	CommentScalarFieldEnumID        CommentScalarFieldEnum = "id"
	CommentScalarFieldEnumUUID      CommentScalarFieldEnum = "uuid"
	CommentScalarFieldEnumCreatedAt CommentScalarFieldEnum = "createdAt"
	CommentScalarFieldEnumUpdatedAt CommentScalarFieldEnum = "updatedAt"
	CommentScalarFieldEnumContent   CommentScalarFieldEnum = "content"
	CommentScalarFieldEnumUserUUID  CommentScalarFieldEnum = "userUuid"
	CommentScalarFieldEnumPostUUID  CommentScalarFieldEnum = "postUuid"
)

type LikeScalarFieldEnum string

const (
	LikeScalarFieldEnumID        LikeScalarFieldEnum = "id"
	LikeScalarFieldEnumUUID      LikeScalarFieldEnum = "uuid"
	LikeScalarFieldEnumCreatedAt LikeScalarFieldEnum = "createdAt"
	LikeScalarFieldEnumUserUUID  LikeScalarFieldEnum = "userUuid"
	LikeScalarFieldEnumPostUUID  LikeScalarFieldEnum = "postUuid"
)

type UserFollowerScalarFieldEnum string

const (
	UserFollowerScalarFieldEnumID           UserFollowerScalarFieldEnum = "id"
	UserFollowerScalarFieldEnumCreatedAt    UserFollowerScalarFieldEnum = "createdAt"
	UserFollowerScalarFieldEnumUpdatedAt    UserFollowerScalarFieldEnum = "updatedAt"
	UserFollowerScalarFieldEnumFollowerUUID UserFollowerScalarFieldEnum = "followerUuid"
	UserFollowerScalarFieldEnumFolloweeUUID UserFollowerScalarFieldEnum = "followeeUuid"
)

type PublicationPostScalarFieldEnum string

const (
	PublicationPostScalarFieldEnumID        PublicationPostScalarFieldEnum = "id"
	PublicationPostScalarFieldEnumUUID      PublicationPostScalarFieldEnum = "uuid"
	PublicationPostScalarFieldEnumCreatedAt PublicationPostScalarFieldEnum = "createdAt"
	PublicationPostScalarFieldEnumUpdatedAt PublicationPostScalarFieldEnum = "updatedAt"
	PublicationPostScalarFieldEnumPostUUID  PublicationPostScalarFieldEnum = "postUuid"
	PublicationPostScalarFieldEnumUserUUID  PublicationPostScalarFieldEnum = "userUuid"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

type NullsOrder string

const (
	NullsOrderFirst NullsOrder = "first"
	NullsOrderLast  NullsOrder = "last"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound
var IsErrNotFound = types.IsErrNotFound

type ErrUniqueConstraint = types.ErrUniqueConstraint[prismaFields]

// IsErrUniqueConstraint returns on a unique constraint error or violation with error info
// Use as follows:
//
//	user, err := db.User.CreateOne(...).Exec(cxt)
//	if err != nil {
//		if info, err := db.IsErrUniqueConstraint(err); err != nil {
//			// Fields exists for Postgres and SQLite
//			log.Printf("unique constraint on the fields: %s", info.Fields)
//
//			// you can also compare it with generated field names:
//			if info.Fields[0] == db.User.Name.Field() {
//				// do something
//			}
//
//			// For MySQL, use the constraint key
//			log.Printf("unique constraint on the key: %s", info.Key)
//		}
//	}
func IsErrUniqueConstraint(err error) (*types.ErrUniqueConstraint[prismaFields], bool) {
	return types.CheckUniqueConstraint[prismaFields](err)
}

// --- template fields.gotpl ---
type prismaFields string

type userPrismaFields = prismaFields

const userFieldID userPrismaFields = "id"

const userFieldUUID userPrismaFields = "uuid"

const userFieldCreatedAt userPrismaFields = "createdAt"

const userFieldUpdatedAt userPrismaFields = "updatedAt"

const userFieldEmail userPrismaFields = "email"

const userFieldPassword userPrismaFields = "password"

const userFieldPosts userPrismaFields = "posts"

const userFieldComments userPrismaFields = "comments"

const userFieldLikes userPrismaFields = "likes"

const userFieldUserProfile userPrismaFields = "userProfile"

const userFieldPublicationPost userPrismaFields = "PublicationPost"

const userFieldUserFollower userPrismaFields = "UserFollower"

const userFieldUserFollowee userPrismaFields = "UserFollowee"

type userProfilePrismaFields = prismaFields

const userProfileFieldID userProfilePrismaFields = "id"

const userProfileFieldUUID userProfilePrismaFields = "uuid"

const userProfileFieldFirstName userProfilePrismaFields = "firstName"

const userProfileFieldLastName userProfilePrismaFields = "lastName"

const userProfileFieldBio userProfilePrismaFields = "bio"

const userProfileFieldProfilePicture userProfilePrismaFields = "profilePicture"

const userProfileFieldUser userProfilePrismaFields = "user"

const userProfileFieldUserUUID userProfilePrismaFields = "userUuid"

const userProfileFieldCreatedAt userProfilePrismaFields = "createdAt"

const userProfileFieldUpdatedAt userProfilePrismaFields = "updatedAt"

type postPrismaFields = prismaFields

const postFieldID postPrismaFields = "id"

const postFieldUUID postPrismaFields = "uuid"

const postFieldTitle postPrismaFields = "title"

const postFieldSource postPrismaFields = "source"

const postFieldSrcType postPrismaFields = "srcType"

const postFieldCreatedAt postPrismaFields = "createdAt"

const postFieldUpdatedAt postPrismaFields = "updatedAt"

const postFieldPublished postPrismaFields = "published"

const postFieldUserUUID postPrismaFields = "userUuid"

const postFieldUser postPrismaFields = "user"

const postFieldTags postPrismaFields = "tags"

const postFieldCategory postPrismaFields = "category"

const postFieldPostCategoryID postPrismaFields = "postCategoryId"

const postFieldPostTagID postPrismaFields = "postTagId"

const postFieldComments postPrismaFields = "comments"

const postFieldLikes postPrismaFields = "likes"

const postFieldPublicationPost postPrismaFields = "PublicationPost"

const postFieldPublishPostUUID postPrismaFields = "publishPostUuid"

type postTagPrismaFields = prismaFields

const postTagFieldID postTagPrismaFields = "id"

const postTagFieldCreatedAt postTagPrismaFields = "createdAt"

const postTagFieldUpdatedAt postTagPrismaFields = "updatedAt"

const postTagFieldPost postTagPrismaFields = "post"

const postTagFieldTags postTagPrismaFields = "tags"

type postCategoryPrismaFields = prismaFields

const postCategoryFieldID postCategoryPrismaFields = "id"

const postCategoryFieldName postCategoryPrismaFields = "name"

const postCategoryFieldCreatedAt postCategoryPrismaFields = "createdAt"

const postCategoryFieldUpdatedAt postCategoryPrismaFields = "updatedAt"

const postCategoryFieldPost postCategoryPrismaFields = "post"

type commentPrismaFields = prismaFields

const commentFieldID commentPrismaFields = "id"

const commentFieldUUID commentPrismaFields = "uuid"

const commentFieldCreatedAt commentPrismaFields = "createdAt"

const commentFieldUpdatedAt commentPrismaFields = "updatedAt"

const commentFieldContent commentPrismaFields = "content"

const commentFieldUserUUID commentPrismaFields = "userUuid"

const commentFieldPostUUID commentPrismaFields = "postUuid"

const commentFieldUser commentPrismaFields = "user"

const commentFieldPost commentPrismaFields = "post"

type likePrismaFields = prismaFields

const likeFieldID likePrismaFields = "id"

const likeFieldUUID likePrismaFields = "uuid"

const likeFieldCreatedAt likePrismaFields = "createdAt"

const likeFieldUserUUID likePrismaFields = "userUuid"

const likeFieldPostUUID likePrismaFields = "postUuid"

const likeFieldUser likePrismaFields = "user"

const likeFieldPost likePrismaFields = "post"

type userFollowerPrismaFields = prismaFields

const userFollowerFieldID userFollowerPrismaFields = "id"

const userFollowerFieldCreatedAt userFollowerPrismaFields = "createdAt"

const userFollowerFieldUpdatedAt userFollowerPrismaFields = "updatedAt"

const userFollowerFieldFollower userFollowerPrismaFields = "follower"

const userFollowerFieldFollowee userFollowerPrismaFields = "followee"

const userFollowerFieldFollowerUUID userFollowerPrismaFields = "followerUuid"

const userFollowerFieldFolloweeUUID userFollowerPrismaFields = "followeeUuid"

type publicationPostPrismaFields = prismaFields

const publicationPostFieldID publicationPostPrismaFields = "id"

const publicationPostFieldUUID publicationPostPrismaFields = "uuid"

const publicationPostFieldCreatedAt publicationPostPrismaFields = "createdAt"

const publicationPostFieldUpdatedAt publicationPostPrismaFields = "updatedAt"

const publicationPostFieldUser publicationPostPrismaFields = "User"

const publicationPostFieldPost publicationPostPrismaFields = "Post"

const publicationPostFieldPostUUID publicationPostPrismaFields = "postUuid"

const publicationPostFieldUserUUID publicationPostPrismaFields = "userUuid"

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.User = userMock{
		mock: m,
	}

	m.UserProfile = userProfileMock{
		mock: m,
	}

	m.Post = postMock{
		mock: m,
	}

	m.PostTag = postTagMock{
		mock: m,
	}

	m.PostCategory = postCategoryMock{
		mock: m,
	}

	m.Comment = commentMock{
		mock: m,
	}

	m.Like = likeMock{
		mock: m,
	}

	m.UserFollower = userFollowerMock{
		mock: m,
	}

	m.PublicationPost = publicationPostMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	User userMock

	UserProfile userProfileMock

	Post postMock

	PostTag postTagMock

	PostCategory postCategoryMock

	Comment commentMock

	Like likeMock

	UserFollower userFollowerMock

	PublicationPost publicationPostMock
}

type userMock struct {
	mock *Mock
}

type UserMockExpectParam interface {
	ExtractQuery() builder.Query
	userModel()
}

func (m *userMock) Expect(query UserMockExpectParam) *userMockExec {
	return &userMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userMockExec) Returns(v UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) ReturnsMany(v []UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type userProfileMock struct {
	mock *Mock
}

type UserProfileMockExpectParam interface {
	ExtractQuery() builder.Query
	userProfileModel()
}

func (m *userProfileMock) Expect(query UserProfileMockExpectParam) *userProfileMockExec {
	return &userProfileMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userProfileMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userProfileMockExec) Returns(v UserProfileModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userProfileMockExec) ReturnsMany(v []UserProfileModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userProfileMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type postMock struct {
	mock *Mock
}

type PostMockExpectParam interface {
	ExtractQuery() builder.Query
	postModel()
}

func (m *postMock) Expect(query PostMockExpectParam) *postMockExec {
	return &postMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type postMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *postMockExec) Returns(v PostModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *postMockExec) ReturnsMany(v []PostModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *postMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type postTagMock struct {
	mock *Mock
}

type PostTagMockExpectParam interface {
	ExtractQuery() builder.Query
	postTagModel()
}

func (m *postTagMock) Expect(query PostTagMockExpectParam) *postTagMockExec {
	return &postTagMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type postTagMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *postTagMockExec) Returns(v PostTagModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *postTagMockExec) ReturnsMany(v []PostTagModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *postTagMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type postCategoryMock struct {
	mock *Mock
}

type PostCategoryMockExpectParam interface {
	ExtractQuery() builder.Query
	postCategoryModel()
}

func (m *postCategoryMock) Expect(query PostCategoryMockExpectParam) *postCategoryMockExec {
	return &postCategoryMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type postCategoryMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *postCategoryMockExec) Returns(v PostCategoryModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *postCategoryMockExec) ReturnsMany(v []PostCategoryModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *postCategoryMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type commentMock struct {
	mock *Mock
}

type CommentMockExpectParam interface {
	ExtractQuery() builder.Query
	commentModel()
}

func (m *commentMock) Expect(query CommentMockExpectParam) *commentMockExec {
	return &commentMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type commentMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *commentMockExec) Returns(v CommentModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *commentMockExec) ReturnsMany(v []CommentModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *commentMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type likeMock struct {
	mock *Mock
}

type LikeMockExpectParam interface {
	ExtractQuery() builder.Query
	likeModel()
}

func (m *likeMock) Expect(query LikeMockExpectParam) *likeMockExec {
	return &likeMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type likeMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *likeMockExec) Returns(v LikeModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *likeMockExec) ReturnsMany(v []LikeModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *likeMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type userFollowerMock struct {
	mock *Mock
}

type UserFollowerMockExpectParam interface {
	ExtractQuery() builder.Query
	userFollowerModel()
}

func (m *userFollowerMock) Expect(query UserFollowerMockExpectParam) *userFollowerMockExec {
	return &userFollowerMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userFollowerMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userFollowerMockExec) Returns(v UserFollowerModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userFollowerMockExec) ReturnsMany(v []UserFollowerModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userFollowerMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type publicationPostMock struct {
	mock *Mock
}

type PublicationPostMockExpectParam interface {
	ExtractQuery() builder.Query
	publicationPostModel()
}

func (m *publicationPostMock) Expect(query PublicationPostMockExpectParam) *publicationPostMockExec {
	return &publicationPostMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type publicationPostMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *publicationPostMockExec) Returns(v PublicationPostModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *publicationPostMockExec) ReturnsMany(v []PublicationPostModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *publicationPostMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// UserModel represents the User model and is a wrapper for accessing fields and methods
type UserModel struct {
	InnerUser
	RelationsUser
}

// InnerUser holds the actual data
type InnerUser struct {
	ID        int      `json:"id"`
	UUID      string   `json:"uuid"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
	Email     string   `json:"email"`
	Password  string   `json:"password"`
}

// RawUserModel is a struct for User when used in raw queries
type RawUserModel struct {
	ID        RawInt      `json:"id"`
	UUID      RawString   `json:"uuid"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
	Email     RawString   `json:"email"`
	Password  RawString   `json:"password"`
}

// RelationsUser holds the relation data separately
type RelationsUser struct {
	Posts           []PostModel            `json:"posts,omitempty"`
	Comments        []CommentModel         `json:"comments,omitempty"`
	Likes           []LikeModel            `json:"likes,omitempty"`
	UserProfile     *UserProfileModel      `json:"userProfile,omitempty"`
	PublicationPost []PublicationPostModel `json:"PublicationPost,omitempty"`
	UserFollower    []UserFollowerModel    `json:"UserFollower,omitempty"`
	UserFollowee    []UserFollowerModel    `json:"UserFollowee,omitempty"`
}

func (r UserModel) Posts() (value []PostModel) {
	if r.RelationsUser.Posts == nil {
		panic("attempted to access posts but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Posts
}

func (r UserModel) Comments() (value []CommentModel) {
	if r.RelationsUser.Comments == nil {
		panic("attempted to access comments but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Comments
}

func (r UserModel) Likes() (value []LikeModel) {
	if r.RelationsUser.Likes == nil {
		panic("attempted to access likes but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Likes
}

func (r UserModel) UserProfile() (value *UserProfileModel, ok bool) {
	if r.RelationsUser.UserProfile == nil {
		return value, false
	}
	return r.RelationsUser.UserProfile, true
}

func (r UserModel) PublicationPost() (value []PublicationPostModel) {
	if r.RelationsUser.PublicationPost == nil {
		panic("attempted to access publicationPost but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.PublicationPost
}

func (r UserModel) UserFollower() (value []UserFollowerModel) {
	if r.RelationsUser.UserFollower == nil {
		panic("attempted to access userFollower but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.UserFollower
}

func (r UserModel) UserFollowee() (value []UserFollowerModel) {
	if r.RelationsUser.UserFollowee == nil {
		panic("attempted to access userFollowee but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.UserFollowee
}

// UserProfileModel represents the UserProfile model and is a wrapper for accessing fields and methods
type UserProfileModel struct {
	InnerUserProfile
	RelationsUserProfile
}

// InnerUserProfile holds the actual data
type InnerUserProfile struct {
	ID             int      `json:"id"`
	UUID           string   `json:"uuid"`
	FirstName      string   `json:"firstName"`
	LastName       string   `json:"lastName"`
	Bio            string   `json:"bio"`
	ProfilePicture string   `json:"profilePicture"`
	UserUUID       string   `json:"userUuid"`
	CreatedAt      DateTime `json:"createdAt"`
	UpdatedAt      DateTime `json:"updatedAt"`
}

// RawUserProfileModel is a struct for UserProfile when used in raw queries
type RawUserProfileModel struct {
	ID             RawInt      `json:"id"`
	UUID           RawString   `json:"uuid"`
	FirstName      RawString   `json:"firstName"`
	LastName       RawString   `json:"lastName"`
	Bio            RawString   `json:"bio"`
	ProfilePicture RawString   `json:"profilePicture"`
	UserUUID       RawString   `json:"userUuid"`
	CreatedAt      RawDateTime `json:"createdAt"`
	UpdatedAt      RawDateTime `json:"updatedAt"`
}

// RelationsUserProfile holds the relation data separately
type RelationsUserProfile struct {
	User *UserModel `json:"user,omitempty"`
}

func (r UserProfileModel) User() (value *UserModel) {
	if r.RelationsUserProfile.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsUserProfile.User
}

// PostModel represents the Post model and is a wrapper for accessing fields and methods
type PostModel struct {
	InnerPost
	RelationsPost
}

// InnerPost holds the actual data
type InnerPost struct {
	ID              int      `json:"id"`
	UUID            string   `json:"uuid"`
	Title           string   `json:"title"`
	Source          string   `json:"source"`
	SrcType         SrcType  `json:"srcType"`
	CreatedAt       DateTime `json:"createdAt"`
	UpdatedAt       DateTime `json:"updatedAt"`
	Published       bool     `json:"published"`
	UserUUID        string   `json:"userUuid"`
	PostCategoryID  int      `json:"postCategoryId"`
	PostTagID       int      `json:"postTagId"`
	PublishPostUUID *string  `json:"publishPostUuid,omitempty"`
}

// RawPostModel is a struct for Post when used in raw queries
type RawPostModel struct {
	ID              RawInt      `json:"id"`
	UUID            RawString   `json:"uuid"`
	Title           RawString   `json:"title"`
	Source          RawString   `json:"source"`
	SrcType         RawSrcType  `json:"srcType"`
	CreatedAt       RawDateTime `json:"createdAt"`
	UpdatedAt       RawDateTime `json:"updatedAt"`
	Published       RawBoolean  `json:"published"`
	UserUUID        RawString   `json:"userUuid"`
	PostCategoryID  RawInt      `json:"postCategoryId"`
	PostTagID       RawInt      `json:"postTagId"`
	PublishPostUUID *RawString  `json:"publishPostUuid,omitempty"`
}

// RelationsPost holds the relation data separately
type RelationsPost struct {
	User            *UserModel            `json:"user,omitempty"`
	Tags            *PostTagModel         `json:"tags,omitempty"`
	Category        *PostCategoryModel    `json:"category,omitempty"`
	Comments        []CommentModel        `json:"comments,omitempty"`
	Likes           []LikeModel           `json:"likes,omitempty"`
	PublicationPost *PublicationPostModel `json:"PublicationPost,omitempty"`
}

func (r PostModel) User() (value *UserModel) {
	if r.RelationsPost.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsPost.User
}

func (r PostModel) Tags() (value *PostTagModel) {
	if r.RelationsPost.Tags == nil {
		panic("attempted to access tags but did not fetch it using the .With() syntax")
	}
	return r.RelationsPost.Tags
}

func (r PostModel) Category() (value *PostCategoryModel) {
	if r.RelationsPost.Category == nil {
		panic("attempted to access category but did not fetch it using the .With() syntax")
	}
	return r.RelationsPost.Category
}

func (r PostModel) Comments() (value []CommentModel) {
	if r.RelationsPost.Comments == nil {
		panic("attempted to access comments but did not fetch it using the .With() syntax")
	}
	return r.RelationsPost.Comments
}

func (r PostModel) Likes() (value []LikeModel) {
	if r.RelationsPost.Likes == nil {
		panic("attempted to access likes but did not fetch it using the .With() syntax")
	}
	return r.RelationsPost.Likes
}

func (r PostModel) PublicationPost() (value *PublicationPostModel, ok bool) {
	if r.RelationsPost.PublicationPost == nil {
		return value, false
	}
	return r.RelationsPost.PublicationPost, true
}

func (r PostModel) PublishPostUUID() (value String, ok bool) {
	if r.InnerPost.PublishPostUUID == nil {
		return value, false
	}
	return *r.InnerPost.PublishPostUUID, true
}

// PostTagModel represents the PostTag model and is a wrapper for accessing fields and methods
type PostTagModel struct {
	InnerPostTag
	RelationsPostTag
}

// InnerPostTag holds the actual data
type InnerPostTag struct {
	ID        int      `json:"id"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
	Tags      []string `json:"tags"`
}

// RawPostTagModel is a struct for PostTag when used in raw queries
type RawPostTagModel struct {
	ID        RawInt      `json:"id"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
	Tags      []RawString `json:"tags"`
}

// RelationsPostTag holds the relation data separately
type RelationsPostTag struct {
	Post *PostModel `json:"post,omitempty"`
}

func (r PostTagModel) Post() (value *PostModel, ok bool) {
	if r.RelationsPostTag.Post == nil {
		return value, false
	}
	return r.RelationsPostTag.Post, true
}

// PostCategoryModel represents the PostCategory model and is a wrapper for accessing fields and methods
type PostCategoryModel struct {
	InnerPostCategory
	RelationsPostCategory
}

// InnerPostCategory holds the actual data
type InnerPostCategory struct {
	ID        int      `json:"id"`
	Name      string   `json:"name"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
}

// RawPostCategoryModel is a struct for PostCategory when used in raw queries
type RawPostCategoryModel struct {
	ID        RawInt      `json:"id"`
	Name      RawString   `json:"name"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
}

// RelationsPostCategory holds the relation data separately
type RelationsPostCategory struct {
	Post []PostModel `json:"post,omitempty"`
}

func (r PostCategoryModel) Post() (value []PostModel) {
	if r.RelationsPostCategory.Post == nil {
		panic("attempted to access post but did not fetch it using the .With() syntax")
	}
	return r.RelationsPostCategory.Post
}

// CommentModel represents the Comment model and is a wrapper for accessing fields and methods
type CommentModel struct {
	InnerComment
	RelationsComment
}

// InnerComment holds the actual data
type InnerComment struct {
	ID        int      `json:"id"`
	UUID      string   `json:"uuid"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
	Content   string   `json:"content"`
	UserUUID  string   `json:"userUuid"`
	PostUUID  string   `json:"postUuid"`
}

// RawCommentModel is a struct for Comment when used in raw queries
type RawCommentModel struct {
	ID        RawInt      `json:"id"`
	UUID      RawString   `json:"uuid"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
	Content   RawString   `json:"content"`
	UserUUID  RawString   `json:"userUuid"`
	PostUUID  RawString   `json:"postUuid"`
}

// RelationsComment holds the relation data separately
type RelationsComment struct {
	User *UserModel `json:"user,omitempty"`
	Post *PostModel `json:"post,omitempty"`
}

func (r CommentModel) User() (value *UserModel) {
	if r.RelationsComment.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsComment.User
}

func (r CommentModel) Post() (value *PostModel) {
	if r.RelationsComment.Post == nil {
		panic("attempted to access post but did not fetch it using the .With() syntax")
	}
	return r.RelationsComment.Post
}

// LikeModel represents the Like model and is a wrapper for accessing fields and methods
type LikeModel struct {
	InnerLike
	RelationsLike
}

// InnerLike holds the actual data
type InnerLike struct {
	ID        int      `json:"id"`
	UUID      string   `json:"uuid"`
	CreatedAt DateTime `json:"createdAt"`
	UserUUID  string   `json:"userUuid"`
	PostUUID  string   `json:"postUuid"`
}

// RawLikeModel is a struct for Like when used in raw queries
type RawLikeModel struct {
	ID        RawInt      `json:"id"`
	UUID      RawString   `json:"uuid"`
	CreatedAt RawDateTime `json:"createdAt"`
	UserUUID  RawString   `json:"userUuid"`
	PostUUID  RawString   `json:"postUuid"`
}

// RelationsLike holds the relation data separately
type RelationsLike struct {
	User *UserModel `json:"user,omitempty"`
	Post *PostModel `json:"post,omitempty"`
}

func (r LikeModel) User() (value *UserModel) {
	if r.RelationsLike.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsLike.User
}

func (r LikeModel) Post() (value *PostModel) {
	if r.RelationsLike.Post == nil {
		panic("attempted to access post but did not fetch it using the .With() syntax")
	}
	return r.RelationsLike.Post
}

// UserFollowerModel represents the UserFollower model and is a wrapper for accessing fields and methods
type UserFollowerModel struct {
	InnerUserFollower
	RelationsUserFollower
}

// InnerUserFollower holds the actual data
type InnerUserFollower struct {
	ID           int      `json:"id"`
	CreatedAt    DateTime `json:"createdAt"`
	UpdatedAt    DateTime `json:"updatedAt"`
	FollowerUUID string   `json:"followerUuid"`
	FolloweeUUID string   `json:"followeeUuid"`
}

// RawUserFollowerModel is a struct for UserFollower when used in raw queries
type RawUserFollowerModel struct {
	ID           RawInt      `json:"id"`
	CreatedAt    RawDateTime `json:"createdAt"`
	UpdatedAt    RawDateTime `json:"updatedAt"`
	FollowerUUID RawString   `json:"followerUuid"`
	FolloweeUUID RawString   `json:"followeeUuid"`
}

// RelationsUserFollower holds the relation data separately
type RelationsUserFollower struct {
	Follower *UserModel `json:"follower,omitempty"`
	Followee *UserModel `json:"followee,omitempty"`
}

func (r UserFollowerModel) Follower() (value *UserModel) {
	if r.RelationsUserFollower.Follower == nil {
		panic("attempted to access follower but did not fetch it using the .With() syntax")
	}
	return r.RelationsUserFollower.Follower
}

func (r UserFollowerModel) Followee() (value *UserModel) {
	if r.RelationsUserFollower.Followee == nil {
		panic("attempted to access followee but did not fetch it using the .With() syntax")
	}
	return r.RelationsUserFollower.Followee
}

// PublicationPostModel represents the PublicationPost model and is a wrapper for accessing fields and methods
type PublicationPostModel struct {
	InnerPublicationPost
	RelationsPublicationPost
}

// InnerPublicationPost holds the actual data
type InnerPublicationPost struct {
	ID        int      `json:"id"`
	UUID      string   `json:"uuid"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
	PostUUID  string   `json:"postUuid"`
	UserUUID  string   `json:"userUuid"`
}

// RawPublicationPostModel is a struct for PublicationPost when used in raw queries
type RawPublicationPostModel struct {
	ID        RawInt      `json:"id"`
	UUID      RawString   `json:"uuid"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
	PostUUID  RawString   `json:"postUuid"`
	UserUUID  RawString   `json:"userUuid"`
}

// RelationsPublicationPost holds the relation data separately
type RelationsPublicationPost struct {
	User *UserModel `json:"User,omitempty"`
	Post *PostModel `json:"Post,omitempty"`
}

func (r PublicationPostModel) User() (value *UserModel) {
	if r.RelationsPublicationPost.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsPublicationPost.User
}

func (r PublicationPostModel) Post() (value *PostModel) {
	if r.RelationsPublicationPost.Post == nil {
		panic("attempted to access post but did not fetch it using the .With() syntax")
	}
	return r.RelationsPublicationPost.Post
}

// --- template query.gotpl ---

// User acts as a namespaces to access query methods for the User model
var User = userQuery{}

// userQuery exposes query functions for the user model
type userQuery struct {

	// ID
	//
	// @required
	ID userQueryIDInt

	// UUID
	//
	// @required
	UUID userQueryUUIDString

	// CreatedAt
	//
	// @required
	CreatedAt userQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt userQueryUpdatedAtDateTime

	// Email
	//
	// @required
	// @unique
	Email userQueryEmailString

	// Password
	//
	// @required
	Password userQueryPasswordString

	Posts userQueryPostsRelations

	Comments userQueryCommentsRelations

	Likes userQueryLikesRelations

	UserProfile userQueryUserProfileRelations

	PublicationPost userQueryPublicationPostRelations

	UserFollower userQueryUserFollowerRelations

	UserFollowee userQueryUserFolloweeRelations
}

func (userQuery) Not(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) Or(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) And(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type userQueryIDInt struct{}

// Set the required value of ID
func (r userQueryIDInt) Set(value int) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r userQueryIDInt) SetIfPresent(value *Int) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r userQueryIDInt) Increment(value int) userSetParam {
	return userSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) IncrementIfPresent(value *int) userSetParam {
	if value == nil {
		return userSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r userQueryIDInt) Decrement(value int) userSetParam {
	return userSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) DecrementIfPresent(value *int) userSetParam {
	if value == nil {
		return userSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r userQueryIDInt) Multiply(value int) userSetParam {
	return userSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) MultiplyIfPresent(value *int) userSetParam {
	if value == nil {
		return userSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r userQueryIDInt) Divide(value int) userSetParam {
	return userSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) DivideIfPresent(value *int) userSetParam {
	if value == nil {
		return userSetParam{}
	}
	return r.Divide(*value)
}

func (r userQueryIDInt) Equals(value int) userWithPrismaIDEqualsParam {

	return userWithPrismaIDEqualsParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) EqualsIfPresent(value *int) userWithPrismaIDEqualsParam {
	if value == nil {
		return userWithPrismaIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryIDInt) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userQueryIDInt) Cursor(cursor int) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userQueryIDInt) In(value []int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) InIfPresent(value []int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryIDInt) NotIn(value []int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) NotInIfPresent(value []int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryIDInt) Lt(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) LtIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryIDInt) Lte(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) LteIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryIDInt) Gt(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) GtIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryIDInt) Gte(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) GteIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryIDInt) Not(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) NotIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryIDInt) LT(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryIDInt) LTIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r userQueryIDInt) LTE(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryIDInt) LTEIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r userQueryIDInt) GT(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryIDInt) GTIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r userQueryIDInt) GTE(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryIDInt) GTEIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.GTE(*value)
}

func (r userQueryIDInt) Field() userPrismaFields {
	return userFieldID
}

// base struct
type userQueryUUIDString struct{}

// Set the required value of UUID
func (r userQueryUUIDString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "uuid",
			Value: value,
		},
	}

}

// Set the optional value of UUID dynamically
func (r userQueryUUIDString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryUUIDString) Equals(value string) userWithPrismaUUIDEqualsUniqueParam {

	return userWithPrismaUUIDEqualsUniqueParam{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) EqualsIfPresent(value *string) userWithPrismaUUIDEqualsUniqueParam {
	if value == nil {
		return userWithPrismaUUIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryUUIDString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "uuid",
			Value: direction,
		},
	}
}

func (r userQueryUUIDString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "uuid",
			Value: cursor,
		},
	}
}

func (r userQueryUUIDString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryUUIDString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryUUIDString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryUUIDString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryUUIDString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryUUIDString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryUUIDString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryUUIDString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryUUIDString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryUUIDString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryUUIDString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUUIDString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryUUIDString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryUUIDString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryUUIDString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryUUIDString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryUUIDString) Field() userPrismaFields {
	return userFieldUUID
}

// base struct
type userQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r userQueryCreatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r userQueryCreatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryCreatedAtDateTime) Equals(value DateTime) userWithPrismaCreatedAtEqualsParam {

	return userWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return userWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryCreatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r userQueryCreatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r userQueryCreatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryCreatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryCreatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryCreatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryCreatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryCreatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryCreatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryCreatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryCreatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryCreatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryCreatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryCreatedAtDateTime) Field() userPrismaFields {
	return userFieldCreatedAt
}

// base struct
type userQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r userQueryUpdatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r userQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryUpdatedAtDateTime) Equals(value DateTime) userWithPrismaUpdatedAtEqualsParam {

	return userWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return userWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryUpdatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r userQueryUpdatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r userQueryUpdatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryUpdatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryUpdatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryUpdatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryUpdatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryUpdatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryUpdatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryUpdatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryUpdatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryUpdatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryUpdatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryUpdatedAtDateTime) Field() userPrismaFields {
	return userFieldUpdatedAt
}

// base struct
type userQueryEmailString struct{}

// Set the required value of Email
func (r userQueryEmailString) Set(value string) userWithPrismaEmailSetParam {

	return userWithPrismaEmailSetParam{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}

}

// Set the optional value of Email dynamically
func (r userQueryEmailString) SetIfPresent(value *String) userWithPrismaEmailSetParam {
	if value == nil {
		return userWithPrismaEmailSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryEmailString) Equals(value string) userWithPrismaEmailEqualsUniqueParam {

	return userWithPrismaEmailEqualsUniqueParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) EqualsIfPresent(value *string) userWithPrismaEmailEqualsUniqueParam {
	if value == nil {
		return userWithPrismaEmailEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryEmailString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "email",
			Value: direction,
		},
	}
}

func (r userQueryEmailString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "email",
			Value: cursor,
		},
	}
}

func (r userQueryEmailString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryEmailString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryEmailString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryEmailString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryEmailString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryEmailString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryEmailString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryEmailString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryEmailString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryEmailString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryEmailString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryEmailString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryEmailString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryEmailString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryEmailString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryEmailString) Field() userPrismaFields {
	return userFieldEmail
}

// base struct
type userQueryPasswordString struct{}

// Set the required value of Password
func (r userQueryPasswordString) Set(value string) userWithPrismaPasswordSetParam {

	return userWithPrismaPasswordSetParam{
		data: builder.Field{
			Name:  "password",
			Value: value,
		},
	}

}

// Set the optional value of Password dynamically
func (r userQueryPasswordString) SetIfPresent(value *String) userWithPrismaPasswordSetParam {
	if value == nil {
		return userWithPrismaPasswordSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryPasswordString) Equals(value string) userWithPrismaPasswordEqualsParam {

	return userWithPrismaPasswordEqualsParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) EqualsIfPresent(value *string) userWithPrismaPasswordEqualsParam {
	if value == nil {
		return userWithPrismaPasswordEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryPasswordString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "password",
			Value: direction,
		},
	}
}

func (r userQueryPasswordString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "password",
			Value: cursor,
		},
	}
}

func (r userQueryPasswordString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryPasswordString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryPasswordString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryPasswordString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryPasswordString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryPasswordString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryPasswordString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryPasswordString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryPasswordString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryPasswordString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryPasswordString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryPasswordString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryPasswordString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryPasswordString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryPasswordString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryPasswordString) Field() userPrismaFields {
	return userFieldPassword
}

// base struct
type userQueryPostsPost struct{}

type userQueryPostsRelations struct{}

// User -> Posts
//
// @relation
// @required
func (userQueryPostsRelations) Some(
	params ...PostWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "posts",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Posts
//
// @relation
// @required
func (userQueryPostsRelations) Every(
	params ...PostWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "posts",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Posts
//
// @relation
// @required
func (userQueryPostsRelations) None(
	params ...PostWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "posts",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryPostsRelations) Fetch(

	params ...PostWhereParam,

) userToPostsFindMany {
	var v userToPostsFindMany

	v.query.Operation = "query"
	v.query.Method = "posts"
	v.query.Outputs = postOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryPostsRelations) Link(
	params ...PostWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "posts",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryPostsRelations) Unlink(
	params ...PostWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "posts",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryPostsPost) Field() userPrismaFields {
	return userFieldPosts
}

// base struct
type userQueryCommentsComment struct{}

type userQueryCommentsRelations struct{}

// User -> Comments
//
// @relation
// @required
func (userQueryCommentsRelations) Some(
	params ...CommentWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "comments",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Comments
//
// @relation
// @required
func (userQueryCommentsRelations) Every(
	params ...CommentWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "comments",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Comments
//
// @relation
// @required
func (userQueryCommentsRelations) None(
	params ...CommentWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "comments",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryCommentsRelations) Fetch(

	params ...CommentWhereParam,

) userToCommentsFindMany {
	var v userToCommentsFindMany

	v.query.Operation = "query"
	v.query.Method = "comments"
	v.query.Outputs = commentOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryCommentsRelations) Link(
	params ...CommentWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "comments",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryCommentsRelations) Unlink(
	params ...CommentWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "comments",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryCommentsComment) Field() userPrismaFields {
	return userFieldComments
}

// base struct
type userQueryLikesLike struct{}

type userQueryLikesRelations struct{}

// User -> Likes
//
// @relation
// @required
func (userQueryLikesRelations) Some(
	params ...LikeWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "likes",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Likes
//
// @relation
// @required
func (userQueryLikesRelations) Every(
	params ...LikeWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "likes",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Likes
//
// @relation
// @required
func (userQueryLikesRelations) None(
	params ...LikeWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "likes",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryLikesRelations) Fetch(

	params ...LikeWhereParam,

) userToLikesFindMany {
	var v userToLikesFindMany

	v.query.Operation = "query"
	v.query.Method = "likes"
	v.query.Outputs = likeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryLikesRelations) Link(
	params ...LikeWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "likes",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryLikesRelations) Unlink(
	params ...LikeWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "likes",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryLikesLike) Field() userPrismaFields {
	return userFieldLikes
}

// base struct
type userQueryUserProfileUserProfile struct{}

type userQueryUserProfileRelations struct{}

// User -> UserProfile
//
// @relation
// @optional
func (userQueryUserProfileRelations) Where(
	params ...UserProfileWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "userProfile",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryUserProfileRelations) Fetch() userToUserProfileFindUnique {
	var v userToUserProfileFindUnique

	v.query.Operation = "query"
	v.query.Method = "userProfile"
	v.query.Outputs = userProfileOutput

	return v
}

func (r userQueryUserProfileRelations) Link(
	params UserProfileWhereParam,
) userSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return userSetParam{}
	}

	fields = append(fields, f)

	return userSetParam{
		data: builder.Field{
			Name: "userProfile",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r userQueryUserProfileRelations) Unlink() userSetParam {
	var v userSetParam

	v = userSetParam{
		data: builder.Field{
			Name: "userProfile",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r userQueryUserProfileUserProfile) Field() userPrismaFields {
	return userFieldUserProfile
}

// base struct
type userQueryPublicationPostPublicationPost struct{}

type userQueryPublicationPostRelations struct{}

// User -> PublicationPost
//
// @relation
// @required
func (userQueryPublicationPostRelations) Some(
	params ...PublicationPostWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "PublicationPost",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> PublicationPost
//
// @relation
// @required
func (userQueryPublicationPostRelations) Every(
	params ...PublicationPostWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "PublicationPost",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> PublicationPost
//
// @relation
// @required
func (userQueryPublicationPostRelations) None(
	params ...PublicationPostWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "PublicationPost",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryPublicationPostRelations) Fetch(

	params ...PublicationPostWhereParam,

) userToPublicationPostFindMany {
	var v userToPublicationPostFindMany

	v.query.Operation = "query"
	v.query.Method = "PublicationPost"
	v.query.Outputs = publicationPostOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryPublicationPostRelations) Link(
	params ...PublicationPostWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "PublicationPost",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryPublicationPostRelations) Unlink(
	params ...PublicationPostWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "PublicationPost",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryPublicationPostPublicationPost) Field() userPrismaFields {
	return userFieldPublicationPost
}

// base struct
type userQueryUserFollowerUserFollower struct{}

type userQueryUserFollowerRelations struct{}

// User -> UserFollower
//
// @relation
// @required
func (userQueryUserFollowerRelations) Some(
	params ...UserFollowerWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "UserFollower",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> UserFollower
//
// @relation
// @required
func (userQueryUserFollowerRelations) Every(
	params ...UserFollowerWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "UserFollower",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> UserFollower
//
// @relation
// @required
func (userQueryUserFollowerRelations) None(
	params ...UserFollowerWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "UserFollower",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryUserFollowerRelations) Fetch(

	params ...UserFollowerWhereParam,

) userToUserFollowerFindMany {
	var v userToUserFollowerFindMany

	v.query.Operation = "query"
	v.query.Method = "UserFollower"
	v.query.Outputs = userFollowerOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryUserFollowerRelations) Link(
	params ...UserFollowerWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "UserFollower",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryUserFollowerRelations) Unlink(
	params ...UserFollowerWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "UserFollower",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryUserFollowerUserFollower) Field() userPrismaFields {
	return userFieldUserFollower
}

// base struct
type userQueryUserFolloweeUserFollower struct{}

type userQueryUserFolloweeRelations struct{}

// User -> UserFollowee
//
// @relation
// @required
func (userQueryUserFolloweeRelations) Some(
	params ...UserFollowerWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "UserFollowee",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> UserFollowee
//
// @relation
// @required
func (userQueryUserFolloweeRelations) Every(
	params ...UserFollowerWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "UserFollowee",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> UserFollowee
//
// @relation
// @required
func (userQueryUserFolloweeRelations) None(
	params ...UserFollowerWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "UserFollowee",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryUserFolloweeRelations) Fetch(

	params ...UserFollowerWhereParam,

) userToUserFolloweeFindMany {
	var v userToUserFolloweeFindMany

	v.query.Operation = "query"
	v.query.Method = "UserFollowee"
	v.query.Outputs = userFollowerOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryUserFolloweeRelations) Link(
	params ...UserFollowerWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "UserFollowee",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryUserFolloweeRelations) Unlink(
	params ...UserFollowerWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "UserFollowee",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryUserFolloweeUserFollower) Field() userPrismaFields {
	return userFieldUserFollowee
}

// UserProfile acts as a namespaces to access query methods for the UserProfile model
var UserProfile = userProfileQuery{}

// userProfileQuery exposes query functions for the userProfile model
type userProfileQuery struct {

	// ID
	//
	// @required
	ID userProfileQueryIDInt

	// UUID
	//
	// @required
	UUID userProfileQueryUUIDString

	// FirstName
	//
	// @required
	FirstName userProfileQueryFirstNameString

	// LastName
	//
	// @required
	LastName userProfileQueryLastNameString

	// Bio
	//
	// @required
	Bio userProfileQueryBioString

	// ProfilePicture
	//
	// @required
	ProfilePicture userProfileQueryProfilePictureString

	User userProfileQueryUserRelations

	// UserUUID
	//
	// @required
	// @unique
	UserUUID userProfileQueryUserUUIDString

	// CreatedAt
	//
	// @required
	CreatedAt userProfileQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt userProfileQueryUpdatedAtDateTime
}

func (userProfileQuery) Not(params ...UserProfileWhereParam) userProfileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userProfileDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userProfileQuery) Or(params ...UserProfileWhereParam) userProfileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userProfileDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userProfileQuery) And(params ...UserProfileWhereParam) userProfileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userProfileDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type userProfileQueryIDInt struct{}

// Set the required value of ID
func (r userProfileQueryIDInt) Set(value int) userProfileSetParam {

	return userProfileSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r userProfileQueryIDInt) SetIfPresent(value *Int) userProfileSetParam {
	if value == nil {
		return userProfileSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r userProfileQueryIDInt) Increment(value int) userProfileSetParam {
	return userProfileSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) IncrementIfPresent(value *int) userProfileSetParam {
	if value == nil {
		return userProfileSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r userProfileQueryIDInt) Decrement(value int) userProfileSetParam {
	return userProfileSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) DecrementIfPresent(value *int) userProfileSetParam {
	if value == nil {
		return userProfileSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r userProfileQueryIDInt) Multiply(value int) userProfileSetParam {
	return userProfileSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) MultiplyIfPresent(value *int) userProfileSetParam {
	if value == nil {
		return userProfileSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r userProfileQueryIDInt) Divide(value int) userProfileSetParam {
	return userProfileSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) DivideIfPresent(value *int) userProfileSetParam {
	if value == nil {
		return userProfileSetParam{}
	}
	return r.Divide(*value)
}

func (r userProfileQueryIDInt) Equals(value int) userProfileWithPrismaIDEqualsParam {

	return userProfileWithPrismaIDEqualsParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) EqualsIfPresent(value *int) userProfileWithPrismaIDEqualsParam {
	if value == nil {
		return userProfileWithPrismaIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userProfileQueryIDInt) Order(direction SortOrder) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userProfileQueryIDInt) Cursor(cursor int) userProfileCursorParam {
	return userProfileCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userProfileQueryIDInt) In(value []int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) InIfPresent(value []int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.In(value)
}

func (r userProfileQueryIDInt) NotIn(value []int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) NotInIfPresent(value []int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userProfileQueryIDInt) Lt(value int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) LtIfPresent(value *int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userProfileQueryIDInt) Lte(value int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) LteIfPresent(value *int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userProfileQueryIDInt) Gt(value int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) GtIfPresent(value *int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userProfileQueryIDInt) Gte(value int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) GteIfPresent(value *int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userProfileQueryIDInt) Not(value int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryIDInt) NotIfPresent(value *int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userProfileQueryIDInt) LT(value int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userProfileQueryIDInt) LTIfPresent(value *int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r userProfileQueryIDInt) LTE(value int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userProfileQueryIDInt) LTEIfPresent(value *int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r userProfileQueryIDInt) GT(value int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userProfileQueryIDInt) GTIfPresent(value *int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r userProfileQueryIDInt) GTE(value int) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userProfileQueryIDInt) GTEIfPresent(value *int) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.GTE(*value)
}

func (r userProfileQueryIDInt) Field() userProfilePrismaFields {
	return userProfileFieldID
}

// base struct
type userProfileQueryUUIDString struct{}

// Set the required value of UUID
func (r userProfileQueryUUIDString) Set(value string) userProfileSetParam {

	return userProfileSetParam{
		data: builder.Field{
			Name:  "uuid",
			Value: value,
		},
	}

}

// Set the optional value of UUID dynamically
func (r userProfileQueryUUIDString) SetIfPresent(value *String) userProfileSetParam {
	if value == nil {
		return userProfileSetParam{}
	}

	return r.Set(*value)
}

func (r userProfileQueryUUIDString) Equals(value string) userProfileWithPrismaUUIDEqualsUniqueParam {

	return userProfileWithPrismaUUIDEqualsUniqueParam{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) EqualsIfPresent(value *string) userProfileWithPrismaUUIDEqualsUniqueParam {
	if value == nil {
		return userProfileWithPrismaUUIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userProfileQueryUUIDString) Order(direction SortOrder) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name:  "uuid",
			Value: direction,
		},
	}
}

func (r userProfileQueryUUIDString) Cursor(cursor string) userProfileCursorParam {
	return userProfileCursorParam{
		data: builder.Field{
			Name:  "uuid",
			Value: cursor,
		},
	}
}

func (r userProfileQueryUUIDString) In(value []string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) InIfPresent(value []string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.In(value)
}

func (r userProfileQueryUUIDString) NotIn(value []string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) NotInIfPresent(value []string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.NotIn(value)
}

func (r userProfileQueryUUIDString) Lt(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) LtIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Lt(*value)
}

func (r userProfileQueryUUIDString) Lte(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) LteIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Lte(*value)
}

func (r userProfileQueryUUIDString) Gt(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) GtIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Gt(*value)
}

func (r userProfileQueryUUIDString) Gte(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) GteIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Gte(*value)
}

func (r userProfileQueryUUIDString) Contains(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) ContainsIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Contains(*value)
}

func (r userProfileQueryUUIDString) StartsWith(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) StartsWithIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userProfileQueryUUIDString) EndsWith(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) EndsWithIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userProfileQueryUUIDString) Mode(value QueryMode) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) ModeIfPresent(value *QueryMode) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Mode(*value)
}

func (r userProfileQueryUUIDString) Not(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUUIDString) NotIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userProfileQueryUUIDString) HasPrefix(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userProfileQueryUUIDString) HasPrefixIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userProfileQueryUUIDString) HasSuffix(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userProfileQueryUUIDString) HasSuffixIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userProfileQueryUUIDString) Field() userProfilePrismaFields {
	return userProfileFieldUUID
}

// base struct
type userProfileQueryFirstNameString struct{}

// Set the required value of FirstName
func (r userProfileQueryFirstNameString) Set(value string) userProfileWithPrismaFirstNameSetParam {

	return userProfileWithPrismaFirstNameSetParam{
		data: builder.Field{
			Name:  "firstName",
			Value: value,
		},
	}

}

// Set the optional value of FirstName dynamically
func (r userProfileQueryFirstNameString) SetIfPresent(value *String) userProfileWithPrismaFirstNameSetParam {
	if value == nil {
		return userProfileWithPrismaFirstNameSetParam{}
	}

	return r.Set(*value)
}

func (r userProfileQueryFirstNameString) Equals(value string) userProfileWithPrismaFirstNameEqualsParam {

	return userProfileWithPrismaFirstNameEqualsParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) EqualsIfPresent(value *string) userProfileWithPrismaFirstNameEqualsParam {
	if value == nil {
		return userProfileWithPrismaFirstNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userProfileQueryFirstNameString) Order(direction SortOrder) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name:  "firstName",
			Value: direction,
		},
	}
}

func (r userProfileQueryFirstNameString) Cursor(cursor string) userProfileCursorParam {
	return userProfileCursorParam{
		data: builder.Field{
			Name:  "firstName",
			Value: cursor,
		},
	}
}

func (r userProfileQueryFirstNameString) In(value []string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) InIfPresent(value []string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.In(value)
}

func (r userProfileQueryFirstNameString) NotIn(value []string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) NotInIfPresent(value []string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userProfileQueryFirstNameString) Lt(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) LtIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userProfileQueryFirstNameString) Lte(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) LteIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userProfileQueryFirstNameString) Gt(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) GtIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userProfileQueryFirstNameString) Gte(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) GteIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userProfileQueryFirstNameString) Contains(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) ContainsIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userProfileQueryFirstNameString) StartsWith(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) StartsWithIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userProfileQueryFirstNameString) EndsWith(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) EndsWithIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userProfileQueryFirstNameString) Mode(value QueryMode) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) ModeIfPresent(value *QueryMode) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userProfileQueryFirstNameString) Not(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryFirstNameString) NotIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userProfileQueryFirstNameString) HasPrefix(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userProfileQueryFirstNameString) HasPrefixIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userProfileQueryFirstNameString) HasSuffix(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "firstName",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userProfileQueryFirstNameString) HasSuffixIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userProfileQueryFirstNameString) Field() userProfilePrismaFields {
	return userProfileFieldFirstName
}

// base struct
type userProfileQueryLastNameString struct{}

// Set the required value of LastName
func (r userProfileQueryLastNameString) Set(value string) userProfileWithPrismaLastNameSetParam {

	return userProfileWithPrismaLastNameSetParam{
		data: builder.Field{
			Name:  "lastName",
			Value: value,
		},
	}

}

// Set the optional value of LastName dynamically
func (r userProfileQueryLastNameString) SetIfPresent(value *String) userProfileWithPrismaLastNameSetParam {
	if value == nil {
		return userProfileWithPrismaLastNameSetParam{}
	}

	return r.Set(*value)
}

func (r userProfileQueryLastNameString) Equals(value string) userProfileWithPrismaLastNameEqualsParam {

	return userProfileWithPrismaLastNameEqualsParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) EqualsIfPresent(value *string) userProfileWithPrismaLastNameEqualsParam {
	if value == nil {
		return userProfileWithPrismaLastNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userProfileQueryLastNameString) Order(direction SortOrder) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name:  "lastName",
			Value: direction,
		},
	}
}

func (r userProfileQueryLastNameString) Cursor(cursor string) userProfileCursorParam {
	return userProfileCursorParam{
		data: builder.Field{
			Name:  "lastName",
			Value: cursor,
		},
	}
}

func (r userProfileQueryLastNameString) In(value []string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) InIfPresent(value []string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.In(value)
}

func (r userProfileQueryLastNameString) NotIn(value []string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) NotInIfPresent(value []string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userProfileQueryLastNameString) Lt(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) LtIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userProfileQueryLastNameString) Lte(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) LteIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userProfileQueryLastNameString) Gt(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) GtIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userProfileQueryLastNameString) Gte(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) GteIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userProfileQueryLastNameString) Contains(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) ContainsIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userProfileQueryLastNameString) StartsWith(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) StartsWithIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userProfileQueryLastNameString) EndsWith(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) EndsWithIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userProfileQueryLastNameString) Mode(value QueryMode) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) ModeIfPresent(value *QueryMode) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userProfileQueryLastNameString) Not(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryLastNameString) NotIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userProfileQueryLastNameString) HasPrefix(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userProfileQueryLastNameString) HasPrefixIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userProfileQueryLastNameString) HasSuffix(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "lastName",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userProfileQueryLastNameString) HasSuffixIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userProfileQueryLastNameString) Field() userProfilePrismaFields {
	return userProfileFieldLastName
}

// base struct
type userProfileQueryBioString struct{}

// Set the required value of Bio
func (r userProfileQueryBioString) Set(value string) userProfileWithPrismaBioSetParam {

	return userProfileWithPrismaBioSetParam{
		data: builder.Field{
			Name:  "bio",
			Value: value,
		},
	}

}

// Set the optional value of Bio dynamically
func (r userProfileQueryBioString) SetIfPresent(value *String) userProfileWithPrismaBioSetParam {
	if value == nil {
		return userProfileWithPrismaBioSetParam{}
	}

	return r.Set(*value)
}

func (r userProfileQueryBioString) Equals(value string) userProfileWithPrismaBioEqualsParam {

	return userProfileWithPrismaBioEqualsParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) EqualsIfPresent(value *string) userProfileWithPrismaBioEqualsParam {
	if value == nil {
		return userProfileWithPrismaBioEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userProfileQueryBioString) Order(direction SortOrder) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name:  "bio",
			Value: direction,
		},
	}
}

func (r userProfileQueryBioString) Cursor(cursor string) userProfileCursorParam {
	return userProfileCursorParam{
		data: builder.Field{
			Name:  "bio",
			Value: cursor,
		},
	}
}

func (r userProfileQueryBioString) In(value []string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) InIfPresent(value []string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.In(value)
}

func (r userProfileQueryBioString) NotIn(value []string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) NotInIfPresent(value []string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userProfileQueryBioString) Lt(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) LtIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userProfileQueryBioString) Lte(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) LteIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userProfileQueryBioString) Gt(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) GtIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userProfileQueryBioString) Gte(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) GteIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userProfileQueryBioString) Contains(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) ContainsIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userProfileQueryBioString) StartsWith(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) StartsWithIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userProfileQueryBioString) EndsWith(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) EndsWithIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userProfileQueryBioString) Mode(value QueryMode) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) ModeIfPresent(value *QueryMode) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userProfileQueryBioString) Not(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryBioString) NotIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userProfileQueryBioString) HasPrefix(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userProfileQueryBioString) HasPrefixIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userProfileQueryBioString) HasSuffix(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "bio",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userProfileQueryBioString) HasSuffixIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userProfileQueryBioString) Field() userProfilePrismaFields {
	return userProfileFieldBio
}

// base struct
type userProfileQueryProfilePictureString struct{}

// Set the required value of ProfilePicture
func (r userProfileQueryProfilePictureString) Set(value string) userProfileWithPrismaProfilePictureSetParam {

	return userProfileWithPrismaProfilePictureSetParam{
		data: builder.Field{
			Name:  "profilePicture",
			Value: value,
		},
	}

}

// Set the optional value of ProfilePicture dynamically
func (r userProfileQueryProfilePictureString) SetIfPresent(value *String) userProfileWithPrismaProfilePictureSetParam {
	if value == nil {
		return userProfileWithPrismaProfilePictureSetParam{}
	}

	return r.Set(*value)
}

func (r userProfileQueryProfilePictureString) Equals(value string) userProfileWithPrismaProfilePictureEqualsParam {

	return userProfileWithPrismaProfilePictureEqualsParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) EqualsIfPresent(value *string) userProfileWithPrismaProfilePictureEqualsParam {
	if value == nil {
		return userProfileWithPrismaProfilePictureEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userProfileQueryProfilePictureString) Order(direction SortOrder) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name:  "profilePicture",
			Value: direction,
		},
	}
}

func (r userProfileQueryProfilePictureString) Cursor(cursor string) userProfileCursorParam {
	return userProfileCursorParam{
		data: builder.Field{
			Name:  "profilePicture",
			Value: cursor,
		},
	}
}

func (r userProfileQueryProfilePictureString) In(value []string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) InIfPresent(value []string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.In(value)
}

func (r userProfileQueryProfilePictureString) NotIn(value []string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) NotInIfPresent(value []string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userProfileQueryProfilePictureString) Lt(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) LtIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userProfileQueryProfilePictureString) Lte(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) LteIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userProfileQueryProfilePictureString) Gt(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) GtIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userProfileQueryProfilePictureString) Gte(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) GteIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userProfileQueryProfilePictureString) Contains(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) ContainsIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userProfileQueryProfilePictureString) StartsWith(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) StartsWithIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userProfileQueryProfilePictureString) EndsWith(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) EndsWithIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userProfileQueryProfilePictureString) Mode(value QueryMode) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) ModeIfPresent(value *QueryMode) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userProfileQueryProfilePictureString) Not(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryProfilePictureString) NotIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userProfileQueryProfilePictureString) HasPrefix(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userProfileQueryProfilePictureString) HasPrefixIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userProfileQueryProfilePictureString) HasSuffix(value string) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "profilePicture",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userProfileQueryProfilePictureString) HasSuffixIfPresent(value *string) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userProfileQueryProfilePictureString) Field() userProfilePrismaFields {
	return userProfileFieldProfilePicture
}

// base struct
type userProfileQueryUserUser struct{}

type userProfileQueryUserRelations struct{}

// UserProfile -> User
//
// @relation
// @required
func (userProfileQueryUserRelations) Where(
	params ...UserWhereParam,
) userProfileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userProfileDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (userProfileQueryUserRelations) Fetch() userProfileToUserFindUnique {
	var v userProfileToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r userProfileQueryUserRelations) Link(
	params UserWhereParam,
) userProfileWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return userProfileWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return userProfileWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r userProfileQueryUserRelations) Unlink() userProfileWithPrismaUserSetParam {
	var v userProfileWithPrismaUserSetParam

	v = userProfileWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r userProfileQueryUserUser) Field() userProfilePrismaFields {
	return userProfileFieldUser
}

// base struct
type userProfileQueryUserUUIDString struct{}

// Set the required value of UserUUID
func (r userProfileQueryUserUUIDString) Set(value string) userProfileSetParam {

	return userProfileSetParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: value,
		},
	}

}

// Set the optional value of UserUUID dynamically
func (r userProfileQueryUserUUIDString) SetIfPresent(value *String) userProfileSetParam {
	if value == nil {
		return userProfileSetParam{}
	}

	return r.Set(*value)
}

func (r userProfileQueryUserUUIDString) Equals(value string) userProfileWithPrismaUserUUIDEqualsUniqueParam {

	return userProfileWithPrismaUserUUIDEqualsUniqueParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) EqualsIfPresent(value *string) userProfileWithPrismaUserUUIDEqualsUniqueParam {
	if value == nil {
		return userProfileWithPrismaUserUUIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userProfileQueryUserUUIDString) Order(direction SortOrder) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: direction,
		},
	}
}

func (r userProfileQueryUserUUIDString) Cursor(cursor string) userProfileCursorParam {
	return userProfileCursorParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: cursor,
		},
	}
}

func (r userProfileQueryUserUUIDString) In(value []string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) InIfPresent(value []string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.In(value)
}

func (r userProfileQueryUserUUIDString) NotIn(value []string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) NotInIfPresent(value []string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.NotIn(value)
}

func (r userProfileQueryUserUUIDString) Lt(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) LtIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Lt(*value)
}

func (r userProfileQueryUserUUIDString) Lte(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) LteIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Lte(*value)
}

func (r userProfileQueryUserUUIDString) Gt(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) GtIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Gt(*value)
}

func (r userProfileQueryUserUUIDString) Gte(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) GteIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Gte(*value)
}

func (r userProfileQueryUserUUIDString) Contains(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) ContainsIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Contains(*value)
}

func (r userProfileQueryUserUUIDString) StartsWith(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) StartsWithIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userProfileQueryUserUUIDString) EndsWith(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) EndsWithIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userProfileQueryUserUUIDString) Mode(value QueryMode) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) ModeIfPresent(value *QueryMode) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Mode(*value)
}

func (r userProfileQueryUserUUIDString) Not(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUserUUIDString) NotIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userProfileQueryUserUUIDString) HasPrefix(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userProfileQueryUserUUIDString) HasPrefixIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userProfileQueryUserUUIDString) HasSuffix(value string) userProfileParamUnique {
	return userProfileParamUnique{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userProfileQueryUserUUIDString) HasSuffixIfPresent(value *string) userProfileParamUnique {
	if value == nil {
		return userProfileParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userProfileQueryUserUUIDString) Field() userProfilePrismaFields {
	return userProfileFieldUserUUID
}

// base struct
type userProfileQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r userProfileQueryCreatedAtDateTime) Set(value DateTime) userProfileSetParam {

	return userProfileSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r userProfileQueryCreatedAtDateTime) SetIfPresent(value *DateTime) userProfileSetParam {
	if value == nil {
		return userProfileSetParam{}
	}

	return r.Set(*value)
}

func (r userProfileQueryCreatedAtDateTime) Equals(value DateTime) userProfileWithPrismaCreatedAtEqualsParam {

	return userProfileWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) userProfileWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return userProfileWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userProfileQueryCreatedAtDateTime) Order(direction SortOrder) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r userProfileQueryCreatedAtDateTime) Cursor(cursor DateTime) userProfileCursorParam {
	return userProfileCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r userProfileQueryCreatedAtDateTime) In(value []DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryCreatedAtDateTime) InIfPresent(value []DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.In(value)
}

func (r userProfileQueryCreatedAtDateTime) NotIn(value []DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userProfileQueryCreatedAtDateTime) Lt(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryCreatedAtDateTime) LtIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userProfileQueryCreatedAtDateTime) Lte(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryCreatedAtDateTime) LteIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userProfileQueryCreatedAtDateTime) Gt(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryCreatedAtDateTime) GtIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userProfileQueryCreatedAtDateTime) Gte(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryCreatedAtDateTime) GteIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userProfileQueryCreatedAtDateTime) Not(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryCreatedAtDateTime) NotIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userProfileQueryCreatedAtDateTime) Before(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userProfileQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userProfileQueryCreatedAtDateTime) After(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userProfileQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userProfileQueryCreatedAtDateTime) BeforeEquals(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userProfileQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userProfileQueryCreatedAtDateTime) AfterEquals(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userProfileQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userProfileQueryCreatedAtDateTime) Field() userProfilePrismaFields {
	return userProfileFieldCreatedAt
}

// base struct
type userProfileQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r userProfileQueryUpdatedAtDateTime) Set(value DateTime) userProfileSetParam {

	return userProfileSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r userProfileQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) userProfileSetParam {
	if value == nil {
		return userProfileSetParam{}
	}

	return r.Set(*value)
}

func (r userProfileQueryUpdatedAtDateTime) Equals(value DateTime) userProfileWithPrismaUpdatedAtEqualsParam {

	return userProfileWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) userProfileWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return userProfileWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userProfileQueryUpdatedAtDateTime) Order(direction SortOrder) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r userProfileQueryUpdatedAtDateTime) Cursor(cursor DateTime) userProfileCursorParam {
	return userProfileCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r userProfileQueryUpdatedAtDateTime) In(value []DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUpdatedAtDateTime) InIfPresent(value []DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.In(value)
}

func (r userProfileQueryUpdatedAtDateTime) NotIn(value []DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userProfileQueryUpdatedAtDateTime) Lt(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userProfileQueryUpdatedAtDateTime) Lte(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userProfileQueryUpdatedAtDateTime) Gt(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userProfileQueryUpdatedAtDateTime) Gte(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userProfileQueryUpdatedAtDateTime) Not(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userProfileQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userProfileQueryUpdatedAtDateTime) Before(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userProfileQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userProfileQueryUpdatedAtDateTime) After(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userProfileQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userProfileQueryUpdatedAtDateTime) BeforeEquals(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userProfileQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userProfileQueryUpdatedAtDateTime) AfterEquals(value DateTime) userProfileDefaultParam {
	return userProfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userProfileQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userProfileDefaultParam {
	if value == nil {
		return userProfileDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userProfileQueryUpdatedAtDateTime) Field() userProfilePrismaFields {
	return userProfileFieldUpdatedAt
}

// Post acts as a namespaces to access query methods for the Post model
var Post = postQuery{}

// postQuery exposes query functions for the post model
type postQuery struct {

	// ID
	//
	// @required
	ID postQueryIDInt

	// UUID
	//
	// @required
	UUID postQueryUUIDString

	// Title
	//
	// @required
	Title postQueryTitleString

	// Source
	//
	// @required
	Source postQuerySourceString

	// SrcType
	//
	// @required
	SrcType postQuerySrcTypeSrcType

	// CreatedAt
	//
	// @required
	CreatedAt postQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt postQueryUpdatedAtDateTime

	// Published
	//
	// @required
	Published postQueryPublishedBoolean

	// UserUUID
	//
	// @required
	UserUUID postQueryUserUUIDString

	User postQueryUserRelations

	Tags postQueryTagsRelations

	Category postQueryCategoryRelations

	// PostCategoryID
	//
	// @required
	PostCategoryID postQueryPostCategoryIDInt

	// PostTagID
	//
	// @required
	// @unique
	PostTagID postQueryPostTagIDInt

	Comments postQueryCommentsRelations

	Likes postQueryLikesRelations

	PublicationPost postQueryPublicationPostRelations

	// PublishPostUUID
	//
	// @optional
	// @unique
	PublishPostUUID postQueryPublishPostUUIDString
}

func (postQuery) Not(params ...PostWhereParam) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (postQuery) Or(params ...PostWhereParam) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (postQuery) And(params ...PostWhereParam) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type postQueryIDInt struct{}

// Set the required value of ID
func (r postQueryIDInt) Set(value int) postSetParam {

	return postSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r postQueryIDInt) SetIfPresent(value *Int) postSetParam {
	if value == nil {
		return postSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r postQueryIDInt) Increment(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) IncrementIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r postQueryIDInt) Decrement(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) DecrementIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r postQueryIDInt) Multiply(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) MultiplyIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r postQueryIDInt) Divide(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) DivideIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Divide(*value)
}

func (r postQueryIDInt) Equals(value int) postWithPrismaIDEqualsParam {

	return postWithPrismaIDEqualsParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) EqualsIfPresent(value *int) postWithPrismaIDEqualsParam {
	if value == nil {
		return postWithPrismaIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postQueryIDInt) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r postQueryIDInt) Cursor(cursor int) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r postQueryIDInt) In(value []int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) InIfPresent(value []int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.In(value)
}

func (r postQueryIDInt) NotIn(value []int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) NotInIfPresent(value []int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postQueryIDInt) Lt(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) LtIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postQueryIDInt) Lte(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) LteIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postQueryIDInt) Gt(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) GtIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postQueryIDInt) Gte(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) GteIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postQueryIDInt) Not(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryIDInt) NotIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postQueryIDInt) LT(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postQueryIDInt) LTIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r postQueryIDInt) LTE(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postQueryIDInt) LTEIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r postQueryIDInt) GT(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postQueryIDInt) GTIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r postQueryIDInt) GTE(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postQueryIDInt) GTEIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.GTE(*value)
}

func (r postQueryIDInt) Field() postPrismaFields {
	return postFieldID
}

// base struct
type postQueryUUIDString struct{}

// Set the required value of UUID
func (r postQueryUUIDString) Set(value string) postSetParam {

	return postSetParam{
		data: builder.Field{
			Name:  "uuid",
			Value: value,
		},
	}

}

// Set the optional value of UUID dynamically
func (r postQueryUUIDString) SetIfPresent(value *String) postSetParam {
	if value == nil {
		return postSetParam{}
	}

	return r.Set(*value)
}

func (r postQueryUUIDString) Equals(value string) postWithPrismaUUIDEqualsUniqueParam {

	return postWithPrismaUUIDEqualsUniqueParam{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) EqualsIfPresent(value *string) postWithPrismaUUIDEqualsUniqueParam {
	if value == nil {
		return postWithPrismaUUIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r postQueryUUIDString) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "uuid",
			Value: direction,
		},
	}
}

func (r postQueryUUIDString) Cursor(cursor string) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "uuid",
			Value: cursor,
		},
	}
}

func (r postQueryUUIDString) In(value []string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) InIfPresent(value []string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.In(value)
}

func (r postQueryUUIDString) NotIn(value []string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) NotInIfPresent(value []string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.NotIn(value)
}

func (r postQueryUUIDString) Lt(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) LtIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Lt(*value)
}

func (r postQueryUUIDString) Lte(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) LteIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Lte(*value)
}

func (r postQueryUUIDString) Gt(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) GtIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Gt(*value)
}

func (r postQueryUUIDString) Gte(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) GteIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Gte(*value)
}

func (r postQueryUUIDString) Contains(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) ContainsIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Contains(*value)
}

func (r postQueryUUIDString) StartsWith(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) StartsWithIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r postQueryUUIDString) EndsWith(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) EndsWithIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r postQueryUUIDString) Mode(value QueryMode) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) ModeIfPresent(value *QueryMode) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Mode(*value)
}

func (r postQueryUUIDString) Not(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUUIDString) NotIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r postQueryUUIDString) HasPrefix(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r postQueryUUIDString) HasPrefixIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r postQueryUUIDString) HasSuffix(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r postQueryUUIDString) HasSuffixIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r postQueryUUIDString) Field() postPrismaFields {
	return postFieldUUID
}

// base struct
type postQueryTitleString struct{}

// Set the required value of Title
func (r postQueryTitleString) Set(value string) postWithPrismaTitleSetParam {

	return postWithPrismaTitleSetParam{
		data: builder.Field{
			Name:  "title",
			Value: value,
		},
	}

}

// Set the optional value of Title dynamically
func (r postQueryTitleString) SetIfPresent(value *String) postWithPrismaTitleSetParam {
	if value == nil {
		return postWithPrismaTitleSetParam{}
	}

	return r.Set(*value)
}

func (r postQueryTitleString) Equals(value string) postWithPrismaTitleEqualsParam {

	return postWithPrismaTitleEqualsParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) EqualsIfPresent(value *string) postWithPrismaTitleEqualsParam {
	if value == nil {
		return postWithPrismaTitleEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postQueryTitleString) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "title",
			Value: direction,
		},
	}
}

func (r postQueryTitleString) Cursor(cursor string) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "title",
			Value: cursor,
		},
	}
}

func (r postQueryTitleString) In(value []string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) InIfPresent(value []string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.In(value)
}

func (r postQueryTitleString) NotIn(value []string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) NotInIfPresent(value []string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postQueryTitleString) Lt(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) LtIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postQueryTitleString) Lte(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) LteIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postQueryTitleString) Gt(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) GtIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postQueryTitleString) Gte(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) GteIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postQueryTitleString) Contains(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) ContainsIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Contains(*value)
}

func (r postQueryTitleString) StartsWith(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) StartsWithIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r postQueryTitleString) EndsWith(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) EndsWithIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r postQueryTitleString) Mode(value QueryMode) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) ModeIfPresent(value *QueryMode) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Mode(*value)
}

func (r postQueryTitleString) Not(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryTitleString) NotIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r postQueryTitleString) HasPrefix(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r postQueryTitleString) HasPrefixIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r postQueryTitleString) HasSuffix(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r postQueryTitleString) HasSuffixIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r postQueryTitleString) Field() postPrismaFields {
	return postFieldTitle
}

// base struct
type postQuerySourceString struct{}

// Set the required value of Source
func (r postQuerySourceString) Set(value string) postWithPrismaSourceSetParam {

	return postWithPrismaSourceSetParam{
		data: builder.Field{
			Name:  "source",
			Value: value,
		},
	}

}

// Set the optional value of Source dynamically
func (r postQuerySourceString) SetIfPresent(value *String) postWithPrismaSourceSetParam {
	if value == nil {
		return postWithPrismaSourceSetParam{}
	}

	return r.Set(*value)
}

func (r postQuerySourceString) Equals(value string) postWithPrismaSourceEqualsParam {

	return postWithPrismaSourceEqualsParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) EqualsIfPresent(value *string) postWithPrismaSourceEqualsParam {
	if value == nil {
		return postWithPrismaSourceEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postQuerySourceString) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "source",
			Value: direction,
		},
	}
}

func (r postQuerySourceString) Cursor(cursor string) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "source",
			Value: cursor,
		},
	}
}

func (r postQuerySourceString) In(value []string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) InIfPresent(value []string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.In(value)
}

func (r postQuerySourceString) NotIn(value []string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) NotInIfPresent(value []string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postQuerySourceString) Lt(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) LtIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postQuerySourceString) Lte(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) LteIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postQuerySourceString) Gt(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) GtIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postQuerySourceString) Gte(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) GteIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postQuerySourceString) Contains(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) ContainsIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Contains(*value)
}

func (r postQuerySourceString) StartsWith(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) StartsWithIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r postQuerySourceString) EndsWith(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) EndsWithIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r postQuerySourceString) Mode(value QueryMode) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) ModeIfPresent(value *QueryMode) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Mode(*value)
}

func (r postQuerySourceString) Not(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySourceString) NotIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r postQuerySourceString) HasPrefix(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r postQuerySourceString) HasPrefixIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r postQuerySourceString) HasSuffix(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "source",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r postQuerySourceString) HasSuffixIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r postQuerySourceString) Field() postPrismaFields {
	return postFieldSource
}

// base struct
type postQuerySrcTypeSrcType struct{}

// Set the required value of SrcType
func (r postQuerySrcTypeSrcType) Set(value SrcType) postWithPrismaSrcTypeSetParam {

	return postWithPrismaSrcTypeSetParam{
		data: builder.Field{
			Name:  "srcType",
			Value: value,
		},
	}

}

// Set the optional value of SrcType dynamically
func (r postQuerySrcTypeSrcType) SetIfPresent(value *SrcType) postWithPrismaSrcTypeSetParam {
	if value == nil {
		return postWithPrismaSrcTypeSetParam{}
	}

	return r.Set(*value)
}

func (r postQuerySrcTypeSrcType) Equals(value SrcType) postWithPrismaSrcTypeEqualsParam {

	return postWithPrismaSrcTypeEqualsParam{
		data: builder.Field{
			Name: "srcType",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySrcTypeSrcType) EqualsIfPresent(value *SrcType) postWithPrismaSrcTypeEqualsParam {
	if value == nil {
		return postWithPrismaSrcTypeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postQuerySrcTypeSrcType) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "srcType",
			Value: direction,
		},
	}
}

func (r postQuerySrcTypeSrcType) Cursor(cursor SrcType) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "srcType",
			Value: cursor,
		},
	}
}

func (r postQuerySrcTypeSrcType) In(value []SrcType) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "srcType",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySrcTypeSrcType) InIfPresent(value []SrcType) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.In(value)
}

func (r postQuerySrcTypeSrcType) NotIn(value []SrcType) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "srcType",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySrcTypeSrcType) NotInIfPresent(value []SrcType) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postQuerySrcTypeSrcType) Not(value SrcType) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "srcType",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQuerySrcTypeSrcType) NotIfPresent(value *SrcType) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Not(*value)
}

func (r postQuerySrcTypeSrcType) Field() postPrismaFields {
	return postFieldSrcType
}

// base struct
type postQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r postQueryCreatedAtDateTime) Set(value DateTime) postSetParam {

	return postSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r postQueryCreatedAtDateTime) SetIfPresent(value *DateTime) postSetParam {
	if value == nil {
		return postSetParam{}
	}

	return r.Set(*value)
}

func (r postQueryCreatedAtDateTime) Equals(value DateTime) postWithPrismaCreatedAtEqualsParam {

	return postWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) postWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return postWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postQueryCreatedAtDateTime) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r postQueryCreatedAtDateTime) Cursor(cursor DateTime) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r postQueryCreatedAtDateTime) In(value []DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryCreatedAtDateTime) InIfPresent(value []DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.In(value)
}

func (r postQueryCreatedAtDateTime) NotIn(value []DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postQueryCreatedAtDateTime) Lt(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryCreatedAtDateTime) LtIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postQueryCreatedAtDateTime) Lte(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryCreatedAtDateTime) LteIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postQueryCreatedAtDateTime) Gt(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryCreatedAtDateTime) GtIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postQueryCreatedAtDateTime) Gte(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryCreatedAtDateTime) GteIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postQueryCreatedAtDateTime) Not(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryCreatedAtDateTime) NotIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postQueryCreatedAtDateTime) Before(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r postQueryCreatedAtDateTime) After(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r postQueryCreatedAtDateTime) BeforeEquals(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r postQueryCreatedAtDateTime) AfterEquals(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r postQueryCreatedAtDateTime) Field() postPrismaFields {
	return postFieldCreatedAt
}

// base struct
type postQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r postQueryUpdatedAtDateTime) Set(value DateTime) postSetParam {

	return postSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r postQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) postSetParam {
	if value == nil {
		return postSetParam{}
	}

	return r.Set(*value)
}

func (r postQueryUpdatedAtDateTime) Equals(value DateTime) postWithPrismaUpdatedAtEqualsParam {

	return postWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) postWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return postWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postQueryUpdatedAtDateTime) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r postQueryUpdatedAtDateTime) Cursor(cursor DateTime) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r postQueryUpdatedAtDateTime) In(value []DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUpdatedAtDateTime) InIfPresent(value []DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.In(value)
}

func (r postQueryUpdatedAtDateTime) NotIn(value []DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postQueryUpdatedAtDateTime) Lt(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postQueryUpdatedAtDateTime) Lte(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postQueryUpdatedAtDateTime) Gt(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postQueryUpdatedAtDateTime) Gte(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postQueryUpdatedAtDateTime) Not(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postQueryUpdatedAtDateTime) Before(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r postQueryUpdatedAtDateTime) After(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r postQueryUpdatedAtDateTime) BeforeEquals(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r postQueryUpdatedAtDateTime) AfterEquals(value DateTime) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r postQueryUpdatedAtDateTime) Field() postPrismaFields {
	return postFieldUpdatedAt
}

// base struct
type postQueryPublishedBoolean struct{}

// Set the required value of Published
func (r postQueryPublishedBoolean) Set(value bool) postWithPrismaPublishedSetParam {

	return postWithPrismaPublishedSetParam{
		data: builder.Field{
			Name:  "published",
			Value: value,
		},
	}

}

// Set the optional value of Published dynamically
func (r postQueryPublishedBoolean) SetIfPresent(value *Boolean) postWithPrismaPublishedSetParam {
	if value == nil {
		return postWithPrismaPublishedSetParam{}
	}

	return r.Set(*value)
}

func (r postQueryPublishedBoolean) Equals(value bool) postWithPrismaPublishedEqualsParam {

	return postWithPrismaPublishedEqualsParam{
		data: builder.Field{
			Name: "published",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishedBoolean) EqualsIfPresent(value *bool) postWithPrismaPublishedEqualsParam {
	if value == nil {
		return postWithPrismaPublishedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postQueryPublishedBoolean) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "published",
			Value: direction,
		},
	}
}

func (r postQueryPublishedBoolean) Cursor(cursor bool) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "published",
			Value: cursor,
		},
	}
}

func (r postQueryPublishedBoolean) Field() postPrismaFields {
	return postFieldPublished
}

// base struct
type postQueryUserUUIDString struct{}

// Set the required value of UserUUID
func (r postQueryUserUUIDString) Set(value string) postSetParam {

	return postSetParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: value,
		},
	}

}

// Set the optional value of UserUUID dynamically
func (r postQueryUserUUIDString) SetIfPresent(value *String) postSetParam {
	if value == nil {
		return postSetParam{}
	}

	return r.Set(*value)
}

func (r postQueryUserUUIDString) Equals(value string) postWithPrismaUserUUIDEqualsParam {

	return postWithPrismaUserUUIDEqualsParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) EqualsIfPresent(value *string) postWithPrismaUserUUIDEqualsParam {
	if value == nil {
		return postWithPrismaUserUUIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postQueryUserUUIDString) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: direction,
		},
	}
}

func (r postQueryUserUUIDString) Cursor(cursor string) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: cursor,
		},
	}
}

func (r postQueryUserUUIDString) In(value []string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) InIfPresent(value []string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.In(value)
}

func (r postQueryUserUUIDString) NotIn(value []string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) NotInIfPresent(value []string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postQueryUserUUIDString) Lt(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) LtIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postQueryUserUUIDString) Lte(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) LteIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postQueryUserUUIDString) Gt(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) GtIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postQueryUserUUIDString) Gte(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) GteIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postQueryUserUUIDString) Contains(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) ContainsIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Contains(*value)
}

func (r postQueryUserUUIDString) StartsWith(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) StartsWithIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r postQueryUserUUIDString) EndsWith(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) EndsWithIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r postQueryUserUUIDString) Mode(value QueryMode) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) ModeIfPresent(value *QueryMode) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Mode(*value)
}

func (r postQueryUserUUIDString) Not(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryUserUUIDString) NotIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r postQueryUserUUIDString) HasPrefix(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r postQueryUserUUIDString) HasPrefixIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r postQueryUserUUIDString) HasSuffix(value string) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r postQueryUserUUIDString) HasSuffixIfPresent(value *string) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r postQueryUserUUIDString) Field() postPrismaFields {
	return postFieldUserUUID
}

// base struct
type postQueryUserUser struct{}

type postQueryUserRelations struct{}

// Post -> User
//
// @relation
// @required
func (postQueryUserRelations) Where(
	params ...UserWhereParam,
) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (postQueryUserRelations) Fetch() postToUserFindUnique {
	var v postToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r postQueryUserRelations) Link(
	params UserWhereParam,
) postWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return postWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return postWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r postQueryUserRelations) Unlink() postWithPrismaUserSetParam {
	var v postWithPrismaUserSetParam

	v = postWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r postQueryUserUser) Field() postPrismaFields {
	return postFieldUser
}

// base struct
type postQueryTagsPostTag struct{}

type postQueryTagsRelations struct{}

// Post -> Tags
//
// @relation
// @required
func (postQueryTagsRelations) Where(
	params ...PostTagWhereParam,
) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name: "tags",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (postQueryTagsRelations) Fetch() postToTagsFindUnique {
	var v postToTagsFindUnique

	v.query.Operation = "query"
	v.query.Method = "tags"
	v.query.Outputs = postTagOutput

	return v
}

func (r postQueryTagsRelations) Link(
	params PostTagWhereParam,
) postWithPrismaTagsSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return postWithPrismaTagsSetParam{}
	}

	fields = append(fields, f)

	return postWithPrismaTagsSetParam{
		data: builder.Field{
			Name: "tags",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r postQueryTagsRelations) Unlink() postWithPrismaTagsSetParam {
	var v postWithPrismaTagsSetParam

	v = postWithPrismaTagsSetParam{
		data: builder.Field{
			Name: "tags",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r postQueryTagsPostTag) Field() postPrismaFields {
	return postFieldTags
}

// base struct
type postQueryCategoryPostCategory struct{}

type postQueryCategoryRelations struct{}

// Post -> Category
//
// @relation
// @required
func (postQueryCategoryRelations) Where(
	params ...PostCategoryWhereParam,
) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name: "category",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (postQueryCategoryRelations) Fetch() postToCategoryFindUnique {
	var v postToCategoryFindUnique

	v.query.Operation = "query"
	v.query.Method = "category"
	v.query.Outputs = postCategoryOutput

	return v
}

func (r postQueryCategoryRelations) Link(
	params PostCategoryWhereParam,
) postWithPrismaCategorySetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return postWithPrismaCategorySetParam{}
	}

	fields = append(fields, f)

	return postWithPrismaCategorySetParam{
		data: builder.Field{
			Name: "category",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r postQueryCategoryRelations) Unlink() postWithPrismaCategorySetParam {
	var v postWithPrismaCategorySetParam

	v = postWithPrismaCategorySetParam{
		data: builder.Field{
			Name: "category",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r postQueryCategoryPostCategory) Field() postPrismaFields {
	return postFieldCategory
}

// base struct
type postQueryPostCategoryIDInt struct{}

// Set the required value of PostCategoryID
func (r postQueryPostCategoryIDInt) Set(value int) postSetParam {

	return postSetParam{
		data: builder.Field{
			Name:  "postCategoryId",
			Value: value,
		},
	}

}

// Set the optional value of PostCategoryID dynamically
func (r postQueryPostCategoryIDInt) SetIfPresent(value *Int) postSetParam {
	if value == nil {
		return postSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of PostCategoryID
func (r postQueryPostCategoryIDInt) Increment(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) IncrementIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of PostCategoryID
func (r postQueryPostCategoryIDInt) Decrement(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) DecrementIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of PostCategoryID
func (r postQueryPostCategoryIDInt) Multiply(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) MultiplyIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of PostCategoryID
func (r postQueryPostCategoryIDInt) Divide(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) DivideIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Divide(*value)
}

func (r postQueryPostCategoryIDInt) Equals(value int) postWithPrismaPostCategoryIDEqualsParam {

	return postWithPrismaPostCategoryIDEqualsParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) EqualsIfPresent(value *int) postWithPrismaPostCategoryIDEqualsParam {
	if value == nil {
		return postWithPrismaPostCategoryIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postQueryPostCategoryIDInt) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "postCategoryId",
			Value: direction,
		},
	}
}

func (r postQueryPostCategoryIDInt) Cursor(cursor int) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "postCategoryId",
			Value: cursor,
		},
	}
}

func (r postQueryPostCategoryIDInt) In(value []int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) InIfPresent(value []int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.In(value)
}

func (r postQueryPostCategoryIDInt) NotIn(value []int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) NotInIfPresent(value []int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postQueryPostCategoryIDInt) Lt(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) LtIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postQueryPostCategoryIDInt) Lte(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) LteIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postQueryPostCategoryIDInt) Gt(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) GtIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postQueryPostCategoryIDInt) Gte(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) GteIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postQueryPostCategoryIDInt) Not(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostCategoryIDInt) NotIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postQueryPostCategoryIDInt) LT(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postQueryPostCategoryIDInt) LTIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r postQueryPostCategoryIDInt) LTE(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postQueryPostCategoryIDInt) LTEIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r postQueryPostCategoryIDInt) GT(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postQueryPostCategoryIDInt) GTIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r postQueryPostCategoryIDInt) GTE(value int) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name: "postCategoryId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postQueryPostCategoryIDInt) GTEIfPresent(value *int) postDefaultParam {
	if value == nil {
		return postDefaultParam{}
	}
	return r.GTE(*value)
}

func (r postQueryPostCategoryIDInt) Field() postPrismaFields {
	return postFieldPostCategoryID
}

// base struct
type postQueryPostTagIDInt struct{}

// Set the required value of PostTagID
func (r postQueryPostTagIDInt) Set(value int) postSetParam {

	return postSetParam{
		data: builder.Field{
			Name:  "postTagId",
			Value: value,
		},
	}

}

// Set the optional value of PostTagID dynamically
func (r postQueryPostTagIDInt) SetIfPresent(value *Int) postSetParam {
	if value == nil {
		return postSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of PostTagID
func (r postQueryPostTagIDInt) Increment(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) IncrementIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of PostTagID
func (r postQueryPostTagIDInt) Decrement(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) DecrementIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of PostTagID
func (r postQueryPostTagIDInt) Multiply(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) MultiplyIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of PostTagID
func (r postQueryPostTagIDInt) Divide(value int) postSetParam {
	return postSetParam{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) DivideIfPresent(value *int) postSetParam {
	if value == nil {
		return postSetParam{}
	}
	return r.Divide(*value)
}

func (r postQueryPostTagIDInt) Equals(value int) postWithPrismaPostTagIDEqualsUniqueParam {

	return postWithPrismaPostTagIDEqualsUniqueParam{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) EqualsIfPresent(value *int) postWithPrismaPostTagIDEqualsUniqueParam {
	if value == nil {
		return postWithPrismaPostTagIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r postQueryPostTagIDInt) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "postTagId",
			Value: direction,
		},
	}
}

func (r postQueryPostTagIDInt) Cursor(cursor int) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "postTagId",
			Value: cursor,
		},
	}
}

func (r postQueryPostTagIDInt) In(value []int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) InIfPresent(value []int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.In(value)
}

func (r postQueryPostTagIDInt) NotIn(value []int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) NotInIfPresent(value []int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.NotIn(value)
}

func (r postQueryPostTagIDInt) Lt(value int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) LtIfPresent(value *int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Lt(*value)
}

func (r postQueryPostTagIDInt) Lte(value int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) LteIfPresent(value *int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Lte(*value)
}

func (r postQueryPostTagIDInt) Gt(value int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) GtIfPresent(value *int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Gt(*value)
}

func (r postQueryPostTagIDInt) Gte(value int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) GteIfPresent(value *int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Gte(*value)
}

func (r postQueryPostTagIDInt) Not(value int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPostTagIDInt) NotIfPresent(value *int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postQueryPostTagIDInt) LT(value int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postQueryPostTagIDInt) LTIfPresent(value *int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r postQueryPostTagIDInt) LTE(value int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postQueryPostTagIDInt) LTEIfPresent(value *int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r postQueryPostTagIDInt) GT(value int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postQueryPostTagIDInt) GTIfPresent(value *int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r postQueryPostTagIDInt) GTE(value int) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "postTagId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postQueryPostTagIDInt) GTEIfPresent(value *int) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.GTE(*value)
}

func (r postQueryPostTagIDInt) Field() postPrismaFields {
	return postFieldPostTagID
}

// base struct
type postQueryCommentsComment struct{}

type postQueryCommentsRelations struct{}

// Post -> Comments
//
// @relation
// @required
func (postQueryCommentsRelations) Some(
	params ...CommentWhereParam,
) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name: "comments",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Post -> Comments
//
// @relation
// @required
func (postQueryCommentsRelations) Every(
	params ...CommentWhereParam,
) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name: "comments",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Post -> Comments
//
// @relation
// @required
func (postQueryCommentsRelations) None(
	params ...CommentWhereParam,
) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name: "comments",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (postQueryCommentsRelations) Fetch(

	params ...CommentWhereParam,

) postToCommentsFindMany {
	var v postToCommentsFindMany

	v.query.Operation = "query"
	v.query.Method = "comments"
	v.query.Outputs = commentOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r postQueryCommentsRelations) Link(
	params ...CommentWhereParam,
) postSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postSetParam{
		data: builder.Field{
			Name: "comments",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r postQueryCommentsRelations) Unlink(
	params ...CommentWhereParam,
) postSetParam {
	var v postSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = postSetParam{
		data: builder.Field{
			Name: "comments",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r postQueryCommentsComment) Field() postPrismaFields {
	return postFieldComments
}

// base struct
type postQueryLikesLike struct{}

type postQueryLikesRelations struct{}

// Post -> Likes
//
// @relation
// @required
func (postQueryLikesRelations) Some(
	params ...LikeWhereParam,
) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name: "likes",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Post -> Likes
//
// @relation
// @required
func (postQueryLikesRelations) Every(
	params ...LikeWhereParam,
) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name: "likes",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Post -> Likes
//
// @relation
// @required
func (postQueryLikesRelations) None(
	params ...LikeWhereParam,
) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name: "likes",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (postQueryLikesRelations) Fetch(

	params ...LikeWhereParam,

) postToLikesFindMany {
	var v postToLikesFindMany

	v.query.Operation = "query"
	v.query.Method = "likes"
	v.query.Outputs = likeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r postQueryLikesRelations) Link(
	params ...LikeWhereParam,
) postSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postSetParam{
		data: builder.Field{
			Name: "likes",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r postQueryLikesRelations) Unlink(
	params ...LikeWhereParam,
) postSetParam {
	var v postSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = postSetParam{
		data: builder.Field{
			Name: "likes",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r postQueryLikesLike) Field() postPrismaFields {
	return postFieldLikes
}

// base struct
type postQueryPublicationPostPublicationPost struct{}

type postQueryPublicationPostRelations struct{}

// Post -> PublicationPost
//
// @relation
// @optional
func (postQueryPublicationPostRelations) Where(
	params ...PublicationPostWhereParam,
) postDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postDefaultParam{
		data: builder.Field{
			Name: "PublicationPost",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (postQueryPublicationPostRelations) Fetch() postToPublicationPostFindUnique {
	var v postToPublicationPostFindUnique

	v.query.Operation = "query"
	v.query.Method = "PublicationPost"
	v.query.Outputs = publicationPostOutput

	return v
}

func (r postQueryPublicationPostRelations) Link(
	params PublicationPostWhereParam,
) postSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return postSetParam{}
	}

	fields = append(fields, f)

	return postSetParam{
		data: builder.Field{
			Name: "PublicationPost",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r postQueryPublicationPostRelations) Unlink() postSetParam {
	var v postSetParam

	v = postSetParam{
		data: builder.Field{
			Name: "PublicationPost",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r postQueryPublicationPostPublicationPost) Field() postPrismaFields {
	return postFieldPublicationPost
}

// base struct
type postQueryPublishPostUUIDString struct{}

// Set the optional value of PublishPostUUID
func (r postQueryPublishPostUUIDString) Set(value string) postSetParam {

	return postSetParam{
		data: builder.Field{
			Name:  "publishPostUuid",
			Value: value,
		},
	}

}

// Set the optional value of PublishPostUUID dynamically
func (r postQueryPublishPostUUIDString) SetIfPresent(value *String) postSetParam {
	if value == nil {
		return postSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of PublishPostUUID dynamically
func (r postQueryPublishPostUUIDString) SetOptional(value *String) postSetParam {
	if value == nil {

		var v *string
		return postSetParam{
			data: builder.Field{
				Name:  "publishPostUuid",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r postQueryPublishPostUUIDString) Equals(value string) postWithPrismaPublishPostUUIDEqualsUniqueParam {

	return postWithPrismaPublishPostUUIDEqualsUniqueParam{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) EqualsIfPresent(value *string) postWithPrismaPublishPostUUIDEqualsUniqueParam {
	if value == nil {
		return postWithPrismaPublishPostUUIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r postQueryPublishPostUUIDString) EqualsOptional(value *String) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) IsNull() postParamUnique {
	var str *string = nil
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) Order(direction SortOrder) postDefaultParam {
	return postDefaultParam{
		data: builder.Field{
			Name:  "publishPostUuid",
			Value: direction,
		},
	}
}

func (r postQueryPublishPostUUIDString) Cursor(cursor string) postCursorParam {
	return postCursorParam{
		data: builder.Field{
			Name:  "publishPostUuid",
			Value: cursor,
		},
	}
}

func (r postQueryPublishPostUUIDString) In(value []string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) InIfPresent(value []string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.In(value)
}

func (r postQueryPublishPostUUIDString) NotIn(value []string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) NotInIfPresent(value []string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.NotIn(value)
}

func (r postQueryPublishPostUUIDString) Lt(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) LtIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Lt(*value)
}

func (r postQueryPublishPostUUIDString) Lte(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) LteIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Lte(*value)
}

func (r postQueryPublishPostUUIDString) Gt(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) GtIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Gt(*value)
}

func (r postQueryPublishPostUUIDString) Gte(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) GteIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Gte(*value)
}

func (r postQueryPublishPostUUIDString) Contains(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) ContainsIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Contains(*value)
}

func (r postQueryPublishPostUUIDString) StartsWith(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) StartsWithIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r postQueryPublishPostUUIDString) EndsWith(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) EndsWithIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r postQueryPublishPostUUIDString) Mode(value QueryMode) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) ModeIfPresent(value *QueryMode) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Mode(*value)
}

func (r postQueryPublishPostUUIDString) Not(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postQueryPublishPostUUIDString) NotIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r postQueryPublishPostUUIDString) HasPrefix(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r postQueryPublishPostUUIDString) HasPrefixIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r postQueryPublishPostUUIDString) HasSuffix(value string) postParamUnique {
	return postParamUnique{
		data: builder.Field{
			Name: "publishPostUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r postQueryPublishPostUUIDString) HasSuffixIfPresent(value *string) postParamUnique {
	if value == nil {
		return postParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r postQueryPublishPostUUIDString) Field() postPrismaFields {
	return postFieldPublishPostUUID
}

// PostTag acts as a namespaces to access query methods for the PostTag model
var PostTag = postTagQuery{}

// postTagQuery exposes query functions for the postTag model
type postTagQuery struct {

	// ID
	//
	// @required
	ID postTagQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt postTagQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt postTagQueryUpdatedAtDateTime

	Post postTagQueryPostRelations

	// Tags
	//
	// @required
	Tags postTagQueryTagsString
}

func (postTagQuery) Not(params ...PostTagWhereParam) postTagDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postTagDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (postTagQuery) Or(params ...PostTagWhereParam) postTagDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postTagDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (postTagQuery) And(params ...PostTagWhereParam) postTagDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postTagDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type postTagQueryIDInt struct{}

// Set the required value of ID
func (r postTagQueryIDInt) Set(value int) postTagSetParam {

	return postTagSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r postTagQueryIDInt) SetIfPresent(value *Int) postTagSetParam {
	if value == nil {
		return postTagSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r postTagQueryIDInt) Increment(value int) postTagSetParam {
	return postTagSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) IncrementIfPresent(value *int) postTagSetParam {
	if value == nil {
		return postTagSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r postTagQueryIDInt) Decrement(value int) postTagSetParam {
	return postTagSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) DecrementIfPresent(value *int) postTagSetParam {
	if value == nil {
		return postTagSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r postTagQueryIDInt) Multiply(value int) postTagSetParam {
	return postTagSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) MultiplyIfPresent(value *int) postTagSetParam {
	if value == nil {
		return postTagSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r postTagQueryIDInt) Divide(value int) postTagSetParam {
	return postTagSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) DivideIfPresent(value *int) postTagSetParam {
	if value == nil {
		return postTagSetParam{}
	}
	return r.Divide(*value)
}

func (r postTagQueryIDInt) Equals(value int) postTagWithPrismaIDEqualsUniqueParam {

	return postTagWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) EqualsIfPresent(value *int) postTagWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return postTagWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r postTagQueryIDInt) Order(direction SortOrder) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r postTagQueryIDInt) Cursor(cursor int) postTagCursorParam {
	return postTagCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r postTagQueryIDInt) In(value []int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) InIfPresent(value []int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.In(value)
}

func (r postTagQueryIDInt) NotIn(value []int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) NotInIfPresent(value []int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.NotIn(value)
}

func (r postTagQueryIDInt) Lt(value int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) LtIfPresent(value *int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.Lt(*value)
}

func (r postTagQueryIDInt) Lte(value int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) LteIfPresent(value *int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.Lte(*value)
}

func (r postTagQueryIDInt) Gt(value int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) GtIfPresent(value *int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.Gt(*value)
}

func (r postTagQueryIDInt) Gte(value int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) GteIfPresent(value *int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.Gte(*value)
}

func (r postTagQueryIDInt) Not(value int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryIDInt) NotIfPresent(value *int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postTagQueryIDInt) LT(value int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postTagQueryIDInt) LTIfPresent(value *int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r postTagQueryIDInt) LTE(value int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postTagQueryIDInt) LTEIfPresent(value *int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r postTagQueryIDInt) GT(value int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postTagQueryIDInt) GTIfPresent(value *int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r postTagQueryIDInt) GTE(value int) postTagParamUnique {
	return postTagParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postTagQueryIDInt) GTEIfPresent(value *int) postTagParamUnique {
	if value == nil {
		return postTagParamUnique{}
	}
	return r.GTE(*value)
}

func (r postTagQueryIDInt) Field() postTagPrismaFields {
	return postTagFieldID
}

// base struct
type postTagQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r postTagQueryCreatedAtDateTime) Set(value DateTime) postTagSetParam {

	return postTagSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r postTagQueryCreatedAtDateTime) SetIfPresent(value *DateTime) postTagSetParam {
	if value == nil {
		return postTagSetParam{}
	}

	return r.Set(*value)
}

func (r postTagQueryCreatedAtDateTime) Equals(value DateTime) postTagWithPrismaCreatedAtEqualsParam {

	return postTagWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) postTagWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return postTagWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postTagQueryCreatedAtDateTime) Order(direction SortOrder) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r postTagQueryCreatedAtDateTime) Cursor(cursor DateTime) postTagCursorParam {
	return postTagCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r postTagQueryCreatedAtDateTime) In(value []DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryCreatedAtDateTime) InIfPresent(value []DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.In(value)
}

func (r postTagQueryCreatedAtDateTime) NotIn(value []DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postTagQueryCreatedAtDateTime) Lt(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryCreatedAtDateTime) LtIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postTagQueryCreatedAtDateTime) Lte(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryCreatedAtDateTime) LteIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postTagQueryCreatedAtDateTime) Gt(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryCreatedAtDateTime) GtIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postTagQueryCreatedAtDateTime) Gte(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryCreatedAtDateTime) GteIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postTagQueryCreatedAtDateTime) Not(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryCreatedAtDateTime) NotIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postTagQueryCreatedAtDateTime) Before(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postTagQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r postTagQueryCreatedAtDateTime) After(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postTagQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r postTagQueryCreatedAtDateTime) BeforeEquals(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postTagQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r postTagQueryCreatedAtDateTime) AfterEquals(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postTagQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r postTagQueryCreatedAtDateTime) Field() postTagPrismaFields {
	return postTagFieldCreatedAt
}

// base struct
type postTagQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r postTagQueryUpdatedAtDateTime) Set(value DateTime) postTagSetParam {

	return postTagSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r postTagQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) postTagSetParam {
	if value == nil {
		return postTagSetParam{}
	}

	return r.Set(*value)
}

func (r postTagQueryUpdatedAtDateTime) Equals(value DateTime) postTagWithPrismaUpdatedAtEqualsParam {

	return postTagWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) postTagWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return postTagWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postTagQueryUpdatedAtDateTime) Order(direction SortOrder) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r postTagQueryUpdatedAtDateTime) Cursor(cursor DateTime) postTagCursorParam {
	return postTagCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r postTagQueryUpdatedAtDateTime) In(value []DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryUpdatedAtDateTime) InIfPresent(value []DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.In(value)
}

func (r postTagQueryUpdatedAtDateTime) NotIn(value []DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postTagQueryUpdatedAtDateTime) Lt(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postTagQueryUpdatedAtDateTime) Lte(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postTagQueryUpdatedAtDateTime) Gt(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postTagQueryUpdatedAtDateTime) Gte(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postTagQueryUpdatedAtDateTime) Not(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postTagQueryUpdatedAtDateTime) Before(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postTagQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r postTagQueryUpdatedAtDateTime) After(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postTagQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r postTagQueryUpdatedAtDateTime) BeforeEquals(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postTagQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r postTagQueryUpdatedAtDateTime) AfterEquals(value DateTime) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postTagQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r postTagQueryUpdatedAtDateTime) Field() postTagPrismaFields {
	return postTagFieldUpdatedAt
}

// base struct
type postTagQueryPostPost struct{}

type postTagQueryPostRelations struct{}

// PostTag -> Post
//
// @relation
// @optional
func (postTagQueryPostRelations) Where(
	params ...PostWhereParam,
) postTagDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postTagDefaultParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (postTagQueryPostRelations) Fetch() postTagToPostFindUnique {
	var v postTagToPostFindUnique

	v.query.Operation = "query"
	v.query.Method = "post"
	v.query.Outputs = postOutput

	return v
}

func (r postTagQueryPostRelations) Link(
	params PostWhereParam,
) postTagSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return postTagSetParam{}
	}

	fields = append(fields, f)

	return postTagSetParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r postTagQueryPostRelations) Unlink() postTagSetParam {
	var v postTagSetParam

	v = postTagSetParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r postTagQueryPostPost) Field() postTagPrismaFields {
	return postTagFieldPost
}

// base struct
type postTagQueryTagsString struct{}

// Set the required value of Tags
func (r postTagQueryTagsString) Set(value []string) postTagSetParam {

	if value == nil {
		value = []string{}
	}

	return postTagSetParam{
		data: builder.Field{
			Name: "tags",
			Fields: []builder.Field{
				builder.Field{
					Name:  "set",
					Value: value,
				},
			},
		},
	}

}

// Set the optional value of Tags dynamically
func (r postTagQueryTagsString) SetIfPresent(value *[]String) postTagSetParam {
	if value == nil {
		return postTagSetParam{}
	}

	return r.Set(*value)
}

// Push the required value of Tags
func (r postTagQueryTagsString) Push(value []string) postTagSetParam {
	return postTagSetParam{
		data: builder.Field{
			Name: "tags",
			Fields: []builder.Field{
				builder.Field{
					Name:  "push",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryTagsString) PushIfPresent(value []string) postTagSetParam {
	if value == nil {
		return postTagSetParam{}
	}
	return r.Push(value)
}

func (r postTagQueryTagsString) Equals(value []string) postTagWithPrismaTagsEqualsParam {

	if value == nil {
		value = []string{}
	}

	return postTagWithPrismaTagsEqualsParam{
		data: builder.Field{
			Name: "tags",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryTagsString) EqualsIfPresent(value []string) postTagWithPrismaTagsEqualsParam {
	if value == nil {
		return postTagWithPrismaTagsEqualsParam{}
	}
	return r.Equals(value)
}

func (r postTagQueryTagsString) Order(direction SortOrder) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name:  "tags",
			Value: direction,
		},
	}
}

func (r postTagQueryTagsString) Cursor(cursor string) postTagCursorParam {
	return postTagCursorParam{
		data: builder.Field{
			Name:  "tags",
			Value: cursor,
		},
	}
}

func (r postTagQueryTagsString) Has(value string) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "tags",
			Fields: []builder.Field{
				{
					Name:  "has",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryTagsString) HasIfPresent(value *string) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.Has(*value)
}

func (r postTagQueryTagsString) HasEvery(value []string) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "tags",
			Fields: []builder.Field{
				{
					Name:  "hasEvery",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryTagsString) HasEveryIfPresent(value []string) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.HasEvery(value)
}

func (r postTagQueryTagsString) HasSome(value []string) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "tags",
			Fields: []builder.Field{
				{
					Name:  "hasSome",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryTagsString) HasSomeIfPresent(value []string) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.HasSome(value)
}

func (r postTagQueryTagsString) IsEmpty(value bool) postTagDefaultParam {
	return postTagDefaultParam{
		data: builder.Field{
			Name: "tags",
			Fields: []builder.Field{
				{
					Name:  "isEmpty",
					Value: value,
				},
			},
		},
	}
}

func (r postTagQueryTagsString) IsEmptyIfPresent(value *bool) postTagDefaultParam {
	if value == nil {
		return postTagDefaultParam{}
	}
	return r.IsEmpty(*value)
}

func (r postTagQueryTagsString) Field() postTagPrismaFields {
	return postTagFieldTags
}

// PostCategory acts as a namespaces to access query methods for the PostCategory model
var PostCategory = postCategoryQuery{}

// postCategoryQuery exposes query functions for the postCategory model
type postCategoryQuery struct {

	// ID
	//
	// @required
	ID postCategoryQueryIDInt

	// Name
	//
	// @required
	// @unique
	Name postCategoryQueryNameString

	// CreatedAt
	//
	// @required
	CreatedAt postCategoryQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt postCategoryQueryUpdatedAtDateTime

	Post postCategoryQueryPostRelations
}

func (postCategoryQuery) Not(params ...PostCategoryWhereParam) postCategoryDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postCategoryDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (postCategoryQuery) Or(params ...PostCategoryWhereParam) postCategoryDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postCategoryDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (postCategoryQuery) And(params ...PostCategoryWhereParam) postCategoryDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postCategoryDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type postCategoryQueryIDInt struct{}

// Set the required value of ID
func (r postCategoryQueryIDInt) Set(value int) postCategorySetParam {

	return postCategorySetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r postCategoryQueryIDInt) SetIfPresent(value *Int) postCategorySetParam {
	if value == nil {
		return postCategorySetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r postCategoryQueryIDInt) Increment(value int) postCategorySetParam {
	return postCategorySetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) IncrementIfPresent(value *int) postCategorySetParam {
	if value == nil {
		return postCategorySetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r postCategoryQueryIDInt) Decrement(value int) postCategorySetParam {
	return postCategorySetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) DecrementIfPresent(value *int) postCategorySetParam {
	if value == nil {
		return postCategorySetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r postCategoryQueryIDInt) Multiply(value int) postCategorySetParam {
	return postCategorySetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) MultiplyIfPresent(value *int) postCategorySetParam {
	if value == nil {
		return postCategorySetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r postCategoryQueryIDInt) Divide(value int) postCategorySetParam {
	return postCategorySetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) DivideIfPresent(value *int) postCategorySetParam {
	if value == nil {
		return postCategorySetParam{}
	}
	return r.Divide(*value)
}

func (r postCategoryQueryIDInt) Equals(value int) postCategoryWithPrismaIDEqualsUniqueParam {

	return postCategoryWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) EqualsIfPresent(value *int) postCategoryWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return postCategoryWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r postCategoryQueryIDInt) Order(direction SortOrder) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r postCategoryQueryIDInt) Cursor(cursor int) postCategoryCursorParam {
	return postCategoryCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r postCategoryQueryIDInt) In(value []int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) InIfPresent(value []int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.In(value)
}

func (r postCategoryQueryIDInt) NotIn(value []int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) NotInIfPresent(value []int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.NotIn(value)
}

func (r postCategoryQueryIDInt) Lt(value int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) LtIfPresent(value *int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Lt(*value)
}

func (r postCategoryQueryIDInt) Lte(value int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) LteIfPresent(value *int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Lte(*value)
}

func (r postCategoryQueryIDInt) Gt(value int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) GtIfPresent(value *int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Gt(*value)
}

func (r postCategoryQueryIDInt) Gte(value int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) GteIfPresent(value *int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Gte(*value)
}

func (r postCategoryQueryIDInt) Not(value int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryIDInt) NotIfPresent(value *int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postCategoryQueryIDInt) LT(value int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postCategoryQueryIDInt) LTIfPresent(value *int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r postCategoryQueryIDInt) LTE(value int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postCategoryQueryIDInt) LTEIfPresent(value *int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r postCategoryQueryIDInt) GT(value int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postCategoryQueryIDInt) GTIfPresent(value *int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r postCategoryQueryIDInt) GTE(value int) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postCategoryQueryIDInt) GTEIfPresent(value *int) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.GTE(*value)
}

func (r postCategoryQueryIDInt) Field() postCategoryPrismaFields {
	return postCategoryFieldID
}

// base struct
type postCategoryQueryNameString struct{}

// Set the required value of Name
func (r postCategoryQueryNameString) Set(value string) postCategoryWithPrismaNameSetParam {

	return postCategoryWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r postCategoryQueryNameString) SetIfPresent(value *String) postCategoryWithPrismaNameSetParam {
	if value == nil {
		return postCategoryWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

func (r postCategoryQueryNameString) Equals(value string) postCategoryWithPrismaNameEqualsUniqueParam {

	return postCategoryWithPrismaNameEqualsUniqueParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) EqualsIfPresent(value *string) postCategoryWithPrismaNameEqualsUniqueParam {
	if value == nil {
		return postCategoryWithPrismaNameEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r postCategoryQueryNameString) Order(direction SortOrder) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r postCategoryQueryNameString) Cursor(cursor string) postCategoryCursorParam {
	return postCategoryCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r postCategoryQueryNameString) In(value []string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) InIfPresent(value []string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.In(value)
}

func (r postCategoryQueryNameString) NotIn(value []string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) NotInIfPresent(value []string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.NotIn(value)
}

func (r postCategoryQueryNameString) Lt(value string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) LtIfPresent(value *string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Lt(*value)
}

func (r postCategoryQueryNameString) Lte(value string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) LteIfPresent(value *string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Lte(*value)
}

func (r postCategoryQueryNameString) Gt(value string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) GtIfPresent(value *string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Gt(*value)
}

func (r postCategoryQueryNameString) Gte(value string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) GteIfPresent(value *string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Gte(*value)
}

func (r postCategoryQueryNameString) Contains(value string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) ContainsIfPresent(value *string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Contains(*value)
}

func (r postCategoryQueryNameString) StartsWith(value string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) StartsWithIfPresent(value *string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r postCategoryQueryNameString) EndsWith(value string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) EndsWithIfPresent(value *string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r postCategoryQueryNameString) Mode(value QueryMode) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) ModeIfPresent(value *QueryMode) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Mode(*value)
}

func (r postCategoryQueryNameString) Not(value string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryNameString) NotIfPresent(value *string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r postCategoryQueryNameString) HasPrefix(value string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r postCategoryQueryNameString) HasPrefixIfPresent(value *string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r postCategoryQueryNameString) HasSuffix(value string) postCategoryParamUnique {
	return postCategoryParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r postCategoryQueryNameString) HasSuffixIfPresent(value *string) postCategoryParamUnique {
	if value == nil {
		return postCategoryParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r postCategoryQueryNameString) Field() postCategoryPrismaFields {
	return postCategoryFieldName
}

// base struct
type postCategoryQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r postCategoryQueryCreatedAtDateTime) Set(value DateTime) postCategorySetParam {

	return postCategorySetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r postCategoryQueryCreatedAtDateTime) SetIfPresent(value *DateTime) postCategorySetParam {
	if value == nil {
		return postCategorySetParam{}
	}

	return r.Set(*value)
}

func (r postCategoryQueryCreatedAtDateTime) Equals(value DateTime) postCategoryWithPrismaCreatedAtEqualsParam {

	return postCategoryWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) postCategoryWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return postCategoryWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postCategoryQueryCreatedAtDateTime) Order(direction SortOrder) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r postCategoryQueryCreatedAtDateTime) Cursor(cursor DateTime) postCategoryCursorParam {
	return postCategoryCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r postCategoryQueryCreatedAtDateTime) In(value []DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryCreatedAtDateTime) InIfPresent(value []DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.In(value)
}

func (r postCategoryQueryCreatedAtDateTime) NotIn(value []DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postCategoryQueryCreatedAtDateTime) Lt(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryCreatedAtDateTime) LtIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postCategoryQueryCreatedAtDateTime) Lte(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryCreatedAtDateTime) LteIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postCategoryQueryCreatedAtDateTime) Gt(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryCreatedAtDateTime) GtIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postCategoryQueryCreatedAtDateTime) Gte(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryCreatedAtDateTime) GteIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postCategoryQueryCreatedAtDateTime) Not(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryCreatedAtDateTime) NotIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postCategoryQueryCreatedAtDateTime) Before(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postCategoryQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r postCategoryQueryCreatedAtDateTime) After(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postCategoryQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r postCategoryQueryCreatedAtDateTime) BeforeEquals(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postCategoryQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r postCategoryQueryCreatedAtDateTime) AfterEquals(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postCategoryQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r postCategoryQueryCreatedAtDateTime) Field() postCategoryPrismaFields {
	return postCategoryFieldCreatedAt
}

// base struct
type postCategoryQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r postCategoryQueryUpdatedAtDateTime) Set(value DateTime) postCategorySetParam {

	return postCategorySetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r postCategoryQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) postCategorySetParam {
	if value == nil {
		return postCategorySetParam{}
	}

	return r.Set(*value)
}

func (r postCategoryQueryUpdatedAtDateTime) Equals(value DateTime) postCategoryWithPrismaUpdatedAtEqualsParam {

	return postCategoryWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) postCategoryWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return postCategoryWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r postCategoryQueryUpdatedAtDateTime) Order(direction SortOrder) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r postCategoryQueryUpdatedAtDateTime) Cursor(cursor DateTime) postCategoryCursorParam {
	return postCategoryCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r postCategoryQueryUpdatedAtDateTime) In(value []DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryUpdatedAtDateTime) InIfPresent(value []DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.In(value)
}

func (r postCategoryQueryUpdatedAtDateTime) NotIn(value []DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.NotIn(value)
}

func (r postCategoryQueryUpdatedAtDateTime) Lt(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Lt(*value)
}

func (r postCategoryQueryUpdatedAtDateTime) Lte(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Lte(*value)
}

func (r postCategoryQueryUpdatedAtDateTime) Gt(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Gt(*value)
}

func (r postCategoryQueryUpdatedAtDateTime) Gte(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Gte(*value)
}

func (r postCategoryQueryUpdatedAtDateTime) Not(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r postCategoryQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r postCategoryQueryUpdatedAtDateTime) Before(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r postCategoryQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r postCategoryQueryUpdatedAtDateTime) After(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r postCategoryQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r postCategoryQueryUpdatedAtDateTime) BeforeEquals(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r postCategoryQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r postCategoryQueryUpdatedAtDateTime) AfterEquals(value DateTime) postCategoryDefaultParam {
	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r postCategoryQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) postCategoryDefaultParam {
	if value == nil {
		return postCategoryDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r postCategoryQueryUpdatedAtDateTime) Field() postCategoryPrismaFields {
	return postCategoryFieldUpdatedAt
}

// base struct
type postCategoryQueryPostPost struct{}

type postCategoryQueryPostRelations struct{}

// PostCategory -> Post
//
// @relation
// @required
func (postCategoryQueryPostRelations) Some(
	params ...PostWhereParam,
) postCategoryDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// PostCategory -> Post
//
// @relation
// @required
func (postCategoryQueryPostRelations) Every(
	params ...PostWhereParam,
) postCategoryDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// PostCategory -> Post
//
// @relation
// @required
func (postCategoryQueryPostRelations) None(
	params ...PostWhereParam,
) postCategoryDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postCategoryDefaultParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (postCategoryQueryPostRelations) Fetch(

	params ...PostWhereParam,

) postCategoryToPostFindMany {
	var v postCategoryToPostFindMany

	v.query.Operation = "query"
	v.query.Method = "post"
	v.query.Outputs = postOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r postCategoryQueryPostRelations) Link(
	params ...PostWhereParam,
) postCategorySetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return postCategorySetParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r postCategoryQueryPostRelations) Unlink(
	params ...PostWhereParam,
) postCategorySetParam {
	var v postCategorySetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = postCategorySetParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r postCategoryQueryPostPost) Field() postCategoryPrismaFields {
	return postCategoryFieldPost
}

// Comment acts as a namespaces to access query methods for the Comment model
var Comment = commentQuery{}

// commentQuery exposes query functions for the comment model
type commentQuery struct {

	// ID
	//
	// @required
	ID commentQueryIDInt

	// UUID
	//
	// @required
	UUID commentQueryUUIDString

	// CreatedAt
	//
	// @required
	CreatedAt commentQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt commentQueryUpdatedAtDateTime

	// Content
	//
	// @required
	Content commentQueryContentString

	// UserUUID
	//
	// @required
	UserUUID commentQueryUserUUIDString

	// PostUUID
	//
	// @required
	PostUUID commentQueryPostUUIDString

	User commentQueryUserRelations

	Post commentQueryPostRelations
}

func (commentQuery) Not(params ...CommentWhereParam) commentDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return commentDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (commentQuery) Or(params ...CommentWhereParam) commentDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return commentDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (commentQuery) And(params ...CommentWhereParam) commentDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return commentDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type commentQueryIDInt struct{}

// Set the required value of ID
func (r commentQueryIDInt) Set(value int) commentSetParam {

	return commentSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r commentQueryIDInt) SetIfPresent(value *Int) commentSetParam {
	if value == nil {
		return commentSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r commentQueryIDInt) Increment(value int) commentSetParam {
	return commentSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) IncrementIfPresent(value *int) commentSetParam {
	if value == nil {
		return commentSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r commentQueryIDInt) Decrement(value int) commentSetParam {
	return commentSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) DecrementIfPresent(value *int) commentSetParam {
	if value == nil {
		return commentSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r commentQueryIDInt) Multiply(value int) commentSetParam {
	return commentSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) MultiplyIfPresent(value *int) commentSetParam {
	if value == nil {
		return commentSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r commentQueryIDInt) Divide(value int) commentSetParam {
	return commentSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) DivideIfPresent(value *int) commentSetParam {
	if value == nil {
		return commentSetParam{}
	}
	return r.Divide(*value)
}

func (r commentQueryIDInt) Equals(value int) commentWithPrismaIDEqualsParam {

	return commentWithPrismaIDEqualsParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) EqualsIfPresent(value *int) commentWithPrismaIDEqualsParam {
	if value == nil {
		return commentWithPrismaIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r commentQueryIDInt) Order(direction SortOrder) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r commentQueryIDInt) Cursor(cursor int) commentCursorParam {
	return commentCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r commentQueryIDInt) In(value []int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) InIfPresent(value []int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.In(value)
}

func (r commentQueryIDInt) NotIn(value []int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) NotInIfPresent(value []int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.NotIn(value)
}

func (r commentQueryIDInt) Lt(value int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) LtIfPresent(value *int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lt(*value)
}

func (r commentQueryIDInt) Lte(value int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) LteIfPresent(value *int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lte(*value)
}

func (r commentQueryIDInt) Gt(value int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) GtIfPresent(value *int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gt(*value)
}

func (r commentQueryIDInt) Gte(value int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) GteIfPresent(value *int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gte(*value)
}

func (r commentQueryIDInt) Not(value int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryIDInt) NotIfPresent(value *int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r commentQueryIDInt) LT(value int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r commentQueryIDInt) LTIfPresent(value *int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r commentQueryIDInt) LTE(value int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r commentQueryIDInt) LTEIfPresent(value *int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r commentQueryIDInt) GT(value int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r commentQueryIDInt) GTIfPresent(value *int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r commentQueryIDInt) GTE(value int) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r commentQueryIDInt) GTEIfPresent(value *int) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.GTE(*value)
}

func (r commentQueryIDInt) Field() commentPrismaFields {
	return commentFieldID
}

// base struct
type commentQueryUUIDString struct{}

// Set the required value of UUID
func (r commentQueryUUIDString) Set(value string) commentSetParam {

	return commentSetParam{
		data: builder.Field{
			Name:  "uuid",
			Value: value,
		},
	}

}

// Set the optional value of UUID dynamically
func (r commentQueryUUIDString) SetIfPresent(value *String) commentSetParam {
	if value == nil {
		return commentSetParam{}
	}

	return r.Set(*value)
}

func (r commentQueryUUIDString) Equals(value string) commentWithPrismaUUIDEqualsUniqueParam {

	return commentWithPrismaUUIDEqualsUniqueParam{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) EqualsIfPresent(value *string) commentWithPrismaUUIDEqualsUniqueParam {
	if value == nil {
		return commentWithPrismaUUIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r commentQueryUUIDString) Order(direction SortOrder) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name:  "uuid",
			Value: direction,
		},
	}
}

func (r commentQueryUUIDString) Cursor(cursor string) commentCursorParam {
	return commentCursorParam{
		data: builder.Field{
			Name:  "uuid",
			Value: cursor,
		},
	}
}

func (r commentQueryUUIDString) In(value []string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) InIfPresent(value []string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.In(value)
}

func (r commentQueryUUIDString) NotIn(value []string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) NotInIfPresent(value []string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.NotIn(value)
}

func (r commentQueryUUIDString) Lt(value string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) LtIfPresent(value *string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.Lt(*value)
}

func (r commentQueryUUIDString) Lte(value string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) LteIfPresent(value *string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.Lte(*value)
}

func (r commentQueryUUIDString) Gt(value string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) GtIfPresent(value *string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.Gt(*value)
}

func (r commentQueryUUIDString) Gte(value string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) GteIfPresent(value *string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.Gte(*value)
}

func (r commentQueryUUIDString) Contains(value string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) ContainsIfPresent(value *string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.Contains(*value)
}

func (r commentQueryUUIDString) StartsWith(value string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) StartsWithIfPresent(value *string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r commentQueryUUIDString) EndsWith(value string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) EndsWithIfPresent(value *string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r commentQueryUUIDString) Mode(value QueryMode) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) ModeIfPresent(value *QueryMode) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.Mode(*value)
}

func (r commentQueryUUIDString) Not(value string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUUIDString) NotIfPresent(value *string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r commentQueryUUIDString) HasPrefix(value string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r commentQueryUUIDString) HasPrefixIfPresent(value *string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r commentQueryUUIDString) HasSuffix(value string) commentParamUnique {
	return commentParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r commentQueryUUIDString) HasSuffixIfPresent(value *string) commentParamUnique {
	if value == nil {
		return commentParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r commentQueryUUIDString) Field() commentPrismaFields {
	return commentFieldUUID
}

// base struct
type commentQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r commentQueryCreatedAtDateTime) Set(value DateTime) commentSetParam {

	return commentSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r commentQueryCreatedAtDateTime) SetIfPresent(value *DateTime) commentSetParam {
	if value == nil {
		return commentSetParam{}
	}

	return r.Set(*value)
}

func (r commentQueryCreatedAtDateTime) Equals(value DateTime) commentWithPrismaCreatedAtEqualsParam {

	return commentWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) commentWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return commentWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r commentQueryCreatedAtDateTime) Order(direction SortOrder) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r commentQueryCreatedAtDateTime) Cursor(cursor DateTime) commentCursorParam {
	return commentCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r commentQueryCreatedAtDateTime) In(value []DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryCreatedAtDateTime) InIfPresent(value []DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.In(value)
}

func (r commentQueryCreatedAtDateTime) NotIn(value []DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.NotIn(value)
}

func (r commentQueryCreatedAtDateTime) Lt(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryCreatedAtDateTime) LtIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lt(*value)
}

func (r commentQueryCreatedAtDateTime) Lte(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryCreatedAtDateTime) LteIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lte(*value)
}

func (r commentQueryCreatedAtDateTime) Gt(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryCreatedAtDateTime) GtIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gt(*value)
}

func (r commentQueryCreatedAtDateTime) Gte(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryCreatedAtDateTime) GteIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gte(*value)
}

func (r commentQueryCreatedAtDateTime) Not(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryCreatedAtDateTime) NotIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r commentQueryCreatedAtDateTime) Before(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r commentQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r commentQueryCreatedAtDateTime) After(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r commentQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r commentQueryCreatedAtDateTime) BeforeEquals(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r commentQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r commentQueryCreatedAtDateTime) AfterEquals(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r commentQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r commentQueryCreatedAtDateTime) Field() commentPrismaFields {
	return commentFieldCreatedAt
}

// base struct
type commentQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r commentQueryUpdatedAtDateTime) Set(value DateTime) commentSetParam {

	return commentSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r commentQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) commentSetParam {
	if value == nil {
		return commentSetParam{}
	}

	return r.Set(*value)
}

func (r commentQueryUpdatedAtDateTime) Equals(value DateTime) commentWithPrismaUpdatedAtEqualsParam {

	return commentWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) commentWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return commentWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r commentQueryUpdatedAtDateTime) Order(direction SortOrder) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r commentQueryUpdatedAtDateTime) Cursor(cursor DateTime) commentCursorParam {
	return commentCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r commentQueryUpdatedAtDateTime) In(value []DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUpdatedAtDateTime) InIfPresent(value []DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.In(value)
}

func (r commentQueryUpdatedAtDateTime) NotIn(value []DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.NotIn(value)
}

func (r commentQueryUpdatedAtDateTime) Lt(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lt(*value)
}

func (r commentQueryUpdatedAtDateTime) Lte(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lte(*value)
}

func (r commentQueryUpdatedAtDateTime) Gt(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gt(*value)
}

func (r commentQueryUpdatedAtDateTime) Gte(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gte(*value)
}

func (r commentQueryUpdatedAtDateTime) Not(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r commentQueryUpdatedAtDateTime) Before(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r commentQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r commentQueryUpdatedAtDateTime) After(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r commentQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r commentQueryUpdatedAtDateTime) BeforeEquals(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r commentQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r commentQueryUpdatedAtDateTime) AfterEquals(value DateTime) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r commentQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r commentQueryUpdatedAtDateTime) Field() commentPrismaFields {
	return commentFieldUpdatedAt
}

// base struct
type commentQueryContentString struct{}

// Set the required value of Content
func (r commentQueryContentString) Set(value string) commentWithPrismaContentSetParam {

	return commentWithPrismaContentSetParam{
		data: builder.Field{
			Name:  "content",
			Value: value,
		},
	}

}

// Set the optional value of Content dynamically
func (r commentQueryContentString) SetIfPresent(value *String) commentWithPrismaContentSetParam {
	if value == nil {
		return commentWithPrismaContentSetParam{}
	}

	return r.Set(*value)
}

func (r commentQueryContentString) Equals(value string) commentWithPrismaContentEqualsParam {

	return commentWithPrismaContentEqualsParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) EqualsIfPresent(value *string) commentWithPrismaContentEqualsParam {
	if value == nil {
		return commentWithPrismaContentEqualsParam{}
	}
	return r.Equals(*value)
}

func (r commentQueryContentString) Order(direction SortOrder) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name:  "content",
			Value: direction,
		},
	}
}

func (r commentQueryContentString) Cursor(cursor string) commentCursorParam {
	return commentCursorParam{
		data: builder.Field{
			Name:  "content",
			Value: cursor,
		},
	}
}

func (r commentQueryContentString) In(value []string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) InIfPresent(value []string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.In(value)
}

func (r commentQueryContentString) NotIn(value []string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) NotInIfPresent(value []string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.NotIn(value)
}

func (r commentQueryContentString) Lt(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) LtIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lt(*value)
}

func (r commentQueryContentString) Lte(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) LteIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lte(*value)
}

func (r commentQueryContentString) Gt(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) GtIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gt(*value)
}

func (r commentQueryContentString) Gte(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) GteIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gte(*value)
}

func (r commentQueryContentString) Contains(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) ContainsIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Contains(*value)
}

func (r commentQueryContentString) StartsWith(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) StartsWithIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r commentQueryContentString) EndsWith(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) EndsWithIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r commentQueryContentString) Mode(value QueryMode) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) ModeIfPresent(value *QueryMode) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Mode(*value)
}

func (r commentQueryContentString) Not(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryContentString) NotIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r commentQueryContentString) HasPrefix(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r commentQueryContentString) HasPrefixIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r commentQueryContentString) HasSuffix(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r commentQueryContentString) HasSuffixIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r commentQueryContentString) Field() commentPrismaFields {
	return commentFieldContent
}

// base struct
type commentQueryUserUUIDString struct{}

// Set the required value of UserUUID
func (r commentQueryUserUUIDString) Set(value string) commentSetParam {

	return commentSetParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: value,
		},
	}

}

// Set the optional value of UserUUID dynamically
func (r commentQueryUserUUIDString) SetIfPresent(value *String) commentSetParam {
	if value == nil {
		return commentSetParam{}
	}

	return r.Set(*value)
}

func (r commentQueryUserUUIDString) Equals(value string) commentWithPrismaUserUUIDEqualsParam {

	return commentWithPrismaUserUUIDEqualsParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) EqualsIfPresent(value *string) commentWithPrismaUserUUIDEqualsParam {
	if value == nil {
		return commentWithPrismaUserUUIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r commentQueryUserUUIDString) Order(direction SortOrder) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: direction,
		},
	}
}

func (r commentQueryUserUUIDString) Cursor(cursor string) commentCursorParam {
	return commentCursorParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: cursor,
		},
	}
}

func (r commentQueryUserUUIDString) In(value []string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) InIfPresent(value []string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.In(value)
}

func (r commentQueryUserUUIDString) NotIn(value []string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) NotInIfPresent(value []string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.NotIn(value)
}

func (r commentQueryUserUUIDString) Lt(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) LtIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lt(*value)
}

func (r commentQueryUserUUIDString) Lte(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) LteIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lte(*value)
}

func (r commentQueryUserUUIDString) Gt(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) GtIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gt(*value)
}

func (r commentQueryUserUUIDString) Gte(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) GteIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gte(*value)
}

func (r commentQueryUserUUIDString) Contains(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) ContainsIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Contains(*value)
}

func (r commentQueryUserUUIDString) StartsWith(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) StartsWithIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r commentQueryUserUUIDString) EndsWith(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) EndsWithIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r commentQueryUserUUIDString) Mode(value QueryMode) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) ModeIfPresent(value *QueryMode) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Mode(*value)
}

func (r commentQueryUserUUIDString) Not(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryUserUUIDString) NotIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r commentQueryUserUUIDString) HasPrefix(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r commentQueryUserUUIDString) HasPrefixIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r commentQueryUserUUIDString) HasSuffix(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r commentQueryUserUUIDString) HasSuffixIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r commentQueryUserUUIDString) Field() commentPrismaFields {
	return commentFieldUserUUID
}

// base struct
type commentQueryPostUUIDString struct{}

// Set the required value of PostUUID
func (r commentQueryPostUUIDString) Set(value string) commentSetParam {

	return commentSetParam{
		data: builder.Field{
			Name:  "postUuid",
			Value: value,
		},
	}

}

// Set the optional value of PostUUID dynamically
func (r commentQueryPostUUIDString) SetIfPresent(value *String) commentSetParam {
	if value == nil {
		return commentSetParam{}
	}

	return r.Set(*value)
}

func (r commentQueryPostUUIDString) Equals(value string) commentWithPrismaPostUUIDEqualsParam {

	return commentWithPrismaPostUUIDEqualsParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) EqualsIfPresent(value *string) commentWithPrismaPostUUIDEqualsParam {
	if value == nil {
		return commentWithPrismaPostUUIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r commentQueryPostUUIDString) Order(direction SortOrder) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name:  "postUuid",
			Value: direction,
		},
	}
}

func (r commentQueryPostUUIDString) Cursor(cursor string) commentCursorParam {
	return commentCursorParam{
		data: builder.Field{
			Name:  "postUuid",
			Value: cursor,
		},
	}
}

func (r commentQueryPostUUIDString) In(value []string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) InIfPresent(value []string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.In(value)
}

func (r commentQueryPostUUIDString) NotIn(value []string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) NotInIfPresent(value []string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.NotIn(value)
}

func (r commentQueryPostUUIDString) Lt(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) LtIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lt(*value)
}

func (r commentQueryPostUUIDString) Lte(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) LteIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Lte(*value)
}

func (r commentQueryPostUUIDString) Gt(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) GtIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gt(*value)
}

func (r commentQueryPostUUIDString) Gte(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) GteIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Gte(*value)
}

func (r commentQueryPostUUIDString) Contains(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) ContainsIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Contains(*value)
}

func (r commentQueryPostUUIDString) StartsWith(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) StartsWithIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r commentQueryPostUUIDString) EndsWith(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) EndsWithIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r commentQueryPostUUIDString) Mode(value QueryMode) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) ModeIfPresent(value *QueryMode) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Mode(*value)
}

func (r commentQueryPostUUIDString) Not(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r commentQueryPostUUIDString) NotIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r commentQueryPostUUIDString) HasPrefix(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r commentQueryPostUUIDString) HasPrefixIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r commentQueryPostUUIDString) HasSuffix(value string) commentDefaultParam {
	return commentDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r commentQueryPostUUIDString) HasSuffixIfPresent(value *string) commentDefaultParam {
	if value == nil {
		return commentDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r commentQueryPostUUIDString) Field() commentPrismaFields {
	return commentFieldPostUUID
}

// base struct
type commentQueryUserUser struct{}

type commentQueryUserRelations struct{}

// Comment -> User
//
// @relation
// @required
func (commentQueryUserRelations) Where(
	params ...UserWhereParam,
) commentDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return commentDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (commentQueryUserRelations) Fetch() commentToUserFindUnique {
	var v commentToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r commentQueryUserRelations) Link(
	params UserWhereParam,
) commentWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return commentWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return commentWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r commentQueryUserRelations) Unlink() commentWithPrismaUserSetParam {
	var v commentWithPrismaUserSetParam

	v = commentWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r commentQueryUserUser) Field() commentPrismaFields {
	return commentFieldUser
}

// base struct
type commentQueryPostPost struct{}

type commentQueryPostRelations struct{}

// Comment -> Post
//
// @relation
// @required
func (commentQueryPostRelations) Where(
	params ...PostWhereParam,
) commentDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return commentDefaultParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (commentQueryPostRelations) Fetch() commentToPostFindUnique {
	var v commentToPostFindUnique

	v.query.Operation = "query"
	v.query.Method = "post"
	v.query.Outputs = postOutput

	return v
}

func (r commentQueryPostRelations) Link(
	params PostWhereParam,
) commentWithPrismaPostSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return commentWithPrismaPostSetParam{}
	}

	fields = append(fields, f)

	return commentWithPrismaPostSetParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r commentQueryPostRelations) Unlink() commentWithPrismaPostSetParam {
	var v commentWithPrismaPostSetParam

	v = commentWithPrismaPostSetParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r commentQueryPostPost) Field() commentPrismaFields {
	return commentFieldPost
}

// Like acts as a namespaces to access query methods for the Like model
var Like = likeQuery{}

// likeQuery exposes query functions for the like model
type likeQuery struct {

	// ID
	//
	// @required
	ID likeQueryIDInt

	// UUID
	//
	// @required
	UUID likeQueryUUIDString

	// CreatedAt
	//
	// @required
	CreatedAt likeQueryCreatedAtDateTime

	// UserUUID
	//
	// @required
	UserUUID likeQueryUserUUIDString

	// PostUUID
	//
	// @required
	PostUUID likeQueryPostUUIDString

	User likeQueryUserRelations

	Post likeQueryPostRelations
}

func (likeQuery) Not(params ...LikeWhereParam) likeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return likeDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (likeQuery) Or(params ...LikeWhereParam) likeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return likeDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (likeQuery) And(params ...LikeWhereParam) likeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return likeDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (likeQuery) UserUUIDPostUUID(
	_userUUID LikeWithPrismaUserUUIDWhereParam,

	_postUUID LikeWithPrismaPostUUIDWhereParam,
) LikeEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _userUUID.field())
	fields = append(fields, _postUUID.field())

	return likeEqualsUniqueParam{
		data: builder.Field{
			Name:   "userUuid_postUuid",
			Fields: builder.TransformEquals(fields),
		},
	}
}

// base struct
type likeQueryIDInt struct{}

// Set the required value of ID
func (r likeQueryIDInt) Set(value int) likeSetParam {

	return likeSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r likeQueryIDInt) SetIfPresent(value *Int) likeSetParam {
	if value == nil {
		return likeSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r likeQueryIDInt) Increment(value int) likeSetParam {
	return likeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) IncrementIfPresent(value *int) likeSetParam {
	if value == nil {
		return likeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r likeQueryIDInt) Decrement(value int) likeSetParam {
	return likeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) DecrementIfPresent(value *int) likeSetParam {
	if value == nil {
		return likeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r likeQueryIDInt) Multiply(value int) likeSetParam {
	return likeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) MultiplyIfPresent(value *int) likeSetParam {
	if value == nil {
		return likeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r likeQueryIDInt) Divide(value int) likeSetParam {
	return likeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) DivideIfPresent(value *int) likeSetParam {
	if value == nil {
		return likeSetParam{}
	}
	return r.Divide(*value)
}

func (r likeQueryIDInt) Equals(value int) likeWithPrismaIDEqualsParam {

	return likeWithPrismaIDEqualsParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) EqualsIfPresent(value *int) likeWithPrismaIDEqualsParam {
	if value == nil {
		return likeWithPrismaIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r likeQueryIDInt) Order(direction SortOrder) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r likeQueryIDInt) Cursor(cursor int) likeCursorParam {
	return likeCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r likeQueryIDInt) In(value []int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) InIfPresent(value []int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.In(value)
}

func (r likeQueryIDInt) NotIn(value []int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) NotInIfPresent(value []int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r likeQueryIDInt) Lt(value int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) LtIfPresent(value *int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r likeQueryIDInt) Lte(value int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) LteIfPresent(value *int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r likeQueryIDInt) Gt(value int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) GtIfPresent(value *int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r likeQueryIDInt) Gte(value int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) GteIfPresent(value *int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r likeQueryIDInt) Not(value int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryIDInt) NotIfPresent(value *int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r likeQueryIDInt) LT(value int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r likeQueryIDInt) LTIfPresent(value *int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r likeQueryIDInt) LTE(value int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r likeQueryIDInt) LTEIfPresent(value *int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r likeQueryIDInt) GT(value int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r likeQueryIDInt) GTIfPresent(value *int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r likeQueryIDInt) GTE(value int) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r likeQueryIDInt) GTEIfPresent(value *int) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r likeQueryIDInt) Field() likePrismaFields {
	return likeFieldID
}

// base struct
type likeQueryUUIDString struct{}

// Set the required value of UUID
func (r likeQueryUUIDString) Set(value string) likeSetParam {

	return likeSetParam{
		data: builder.Field{
			Name:  "uuid",
			Value: value,
		},
	}

}

// Set the optional value of UUID dynamically
func (r likeQueryUUIDString) SetIfPresent(value *String) likeSetParam {
	if value == nil {
		return likeSetParam{}
	}

	return r.Set(*value)
}

func (r likeQueryUUIDString) Equals(value string) likeWithPrismaUUIDEqualsUniqueParam {

	return likeWithPrismaUUIDEqualsUniqueParam{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) EqualsIfPresent(value *string) likeWithPrismaUUIDEqualsUniqueParam {
	if value == nil {
		return likeWithPrismaUUIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r likeQueryUUIDString) Order(direction SortOrder) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name:  "uuid",
			Value: direction,
		},
	}
}

func (r likeQueryUUIDString) Cursor(cursor string) likeCursorParam {
	return likeCursorParam{
		data: builder.Field{
			Name:  "uuid",
			Value: cursor,
		},
	}
}

func (r likeQueryUUIDString) In(value []string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) InIfPresent(value []string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.In(value)
}

func (r likeQueryUUIDString) NotIn(value []string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) NotInIfPresent(value []string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.NotIn(value)
}

func (r likeQueryUUIDString) Lt(value string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) LtIfPresent(value *string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.Lt(*value)
}

func (r likeQueryUUIDString) Lte(value string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) LteIfPresent(value *string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.Lte(*value)
}

func (r likeQueryUUIDString) Gt(value string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) GtIfPresent(value *string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.Gt(*value)
}

func (r likeQueryUUIDString) Gte(value string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) GteIfPresent(value *string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.Gte(*value)
}

func (r likeQueryUUIDString) Contains(value string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) ContainsIfPresent(value *string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.Contains(*value)
}

func (r likeQueryUUIDString) StartsWith(value string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) StartsWithIfPresent(value *string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r likeQueryUUIDString) EndsWith(value string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) EndsWithIfPresent(value *string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r likeQueryUUIDString) Mode(value QueryMode) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) ModeIfPresent(value *QueryMode) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.Mode(*value)
}

func (r likeQueryUUIDString) Not(value string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUUIDString) NotIfPresent(value *string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r likeQueryUUIDString) HasPrefix(value string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r likeQueryUUIDString) HasPrefixIfPresent(value *string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r likeQueryUUIDString) HasSuffix(value string) likeParamUnique {
	return likeParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r likeQueryUUIDString) HasSuffixIfPresent(value *string) likeParamUnique {
	if value == nil {
		return likeParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r likeQueryUUIDString) Field() likePrismaFields {
	return likeFieldUUID
}

// base struct
type likeQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r likeQueryCreatedAtDateTime) Set(value DateTime) likeSetParam {

	return likeSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r likeQueryCreatedAtDateTime) SetIfPresent(value *DateTime) likeSetParam {
	if value == nil {
		return likeSetParam{}
	}

	return r.Set(*value)
}

func (r likeQueryCreatedAtDateTime) Equals(value DateTime) likeWithPrismaCreatedAtEqualsParam {

	return likeWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) likeWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return likeWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r likeQueryCreatedAtDateTime) Order(direction SortOrder) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r likeQueryCreatedAtDateTime) Cursor(cursor DateTime) likeCursorParam {
	return likeCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r likeQueryCreatedAtDateTime) In(value []DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryCreatedAtDateTime) InIfPresent(value []DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.In(value)
}

func (r likeQueryCreatedAtDateTime) NotIn(value []DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r likeQueryCreatedAtDateTime) Lt(value DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryCreatedAtDateTime) LtIfPresent(value *DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r likeQueryCreatedAtDateTime) Lte(value DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryCreatedAtDateTime) LteIfPresent(value *DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r likeQueryCreatedAtDateTime) Gt(value DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryCreatedAtDateTime) GtIfPresent(value *DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r likeQueryCreatedAtDateTime) Gte(value DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryCreatedAtDateTime) GteIfPresent(value *DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r likeQueryCreatedAtDateTime) Not(value DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryCreatedAtDateTime) NotIfPresent(value *DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r likeQueryCreatedAtDateTime) Before(value DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r likeQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r likeQueryCreatedAtDateTime) After(value DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r likeQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r likeQueryCreatedAtDateTime) BeforeEquals(value DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r likeQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r likeQueryCreatedAtDateTime) AfterEquals(value DateTime) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r likeQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r likeQueryCreatedAtDateTime) Field() likePrismaFields {
	return likeFieldCreatedAt
}

// base struct
type likeQueryUserUUIDString struct{}

// Set the required value of UserUUID
func (r likeQueryUserUUIDString) Set(value string) likeSetParam {

	return likeSetParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: value,
		},
	}

}

// Set the optional value of UserUUID dynamically
func (r likeQueryUserUUIDString) SetIfPresent(value *String) likeSetParam {
	if value == nil {
		return likeSetParam{}
	}

	return r.Set(*value)
}

func (r likeQueryUserUUIDString) Equals(value string) likeWithPrismaUserUUIDEqualsParam {

	return likeWithPrismaUserUUIDEqualsParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) EqualsIfPresent(value *string) likeWithPrismaUserUUIDEqualsParam {
	if value == nil {
		return likeWithPrismaUserUUIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r likeQueryUserUUIDString) Order(direction SortOrder) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: direction,
		},
	}
}

func (r likeQueryUserUUIDString) Cursor(cursor string) likeCursorParam {
	return likeCursorParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: cursor,
		},
	}
}

func (r likeQueryUserUUIDString) In(value []string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) InIfPresent(value []string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.In(value)
}

func (r likeQueryUserUUIDString) NotIn(value []string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) NotInIfPresent(value []string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r likeQueryUserUUIDString) Lt(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) LtIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r likeQueryUserUUIDString) Lte(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) LteIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r likeQueryUserUUIDString) Gt(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) GtIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r likeQueryUserUUIDString) Gte(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) GteIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r likeQueryUserUUIDString) Contains(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) ContainsIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Contains(*value)
}

func (r likeQueryUserUUIDString) StartsWith(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) StartsWithIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r likeQueryUserUUIDString) EndsWith(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) EndsWithIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r likeQueryUserUUIDString) Mode(value QueryMode) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) ModeIfPresent(value *QueryMode) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Mode(*value)
}

func (r likeQueryUserUUIDString) Not(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryUserUUIDString) NotIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r likeQueryUserUUIDString) HasPrefix(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r likeQueryUserUUIDString) HasPrefixIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r likeQueryUserUUIDString) HasSuffix(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r likeQueryUserUUIDString) HasSuffixIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r likeQueryUserUUIDString) Field() likePrismaFields {
	return likeFieldUserUUID
}

// base struct
type likeQueryPostUUIDString struct{}

// Set the required value of PostUUID
func (r likeQueryPostUUIDString) Set(value string) likeSetParam {

	return likeSetParam{
		data: builder.Field{
			Name:  "postUuid",
			Value: value,
		},
	}

}

// Set the optional value of PostUUID dynamically
func (r likeQueryPostUUIDString) SetIfPresent(value *String) likeSetParam {
	if value == nil {
		return likeSetParam{}
	}

	return r.Set(*value)
}

func (r likeQueryPostUUIDString) Equals(value string) likeWithPrismaPostUUIDEqualsParam {

	return likeWithPrismaPostUUIDEqualsParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) EqualsIfPresent(value *string) likeWithPrismaPostUUIDEqualsParam {
	if value == nil {
		return likeWithPrismaPostUUIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r likeQueryPostUUIDString) Order(direction SortOrder) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name:  "postUuid",
			Value: direction,
		},
	}
}

func (r likeQueryPostUUIDString) Cursor(cursor string) likeCursorParam {
	return likeCursorParam{
		data: builder.Field{
			Name:  "postUuid",
			Value: cursor,
		},
	}
}

func (r likeQueryPostUUIDString) In(value []string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) InIfPresent(value []string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.In(value)
}

func (r likeQueryPostUUIDString) NotIn(value []string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) NotInIfPresent(value []string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r likeQueryPostUUIDString) Lt(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) LtIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r likeQueryPostUUIDString) Lte(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) LteIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r likeQueryPostUUIDString) Gt(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) GtIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r likeQueryPostUUIDString) Gte(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) GteIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r likeQueryPostUUIDString) Contains(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) ContainsIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Contains(*value)
}

func (r likeQueryPostUUIDString) StartsWith(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) StartsWithIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r likeQueryPostUUIDString) EndsWith(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) EndsWithIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r likeQueryPostUUIDString) Mode(value QueryMode) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) ModeIfPresent(value *QueryMode) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Mode(*value)
}

func (r likeQueryPostUUIDString) Not(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r likeQueryPostUUIDString) NotIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r likeQueryPostUUIDString) HasPrefix(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r likeQueryPostUUIDString) HasPrefixIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r likeQueryPostUUIDString) HasSuffix(value string) likeDefaultParam {
	return likeDefaultParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r likeQueryPostUUIDString) HasSuffixIfPresent(value *string) likeDefaultParam {
	if value == nil {
		return likeDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r likeQueryPostUUIDString) Field() likePrismaFields {
	return likeFieldPostUUID
}

// base struct
type likeQueryUserUser struct{}

type likeQueryUserRelations struct{}

// Like -> User
//
// @relation
// @required
func (likeQueryUserRelations) Where(
	params ...UserWhereParam,
) likeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return likeDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (likeQueryUserRelations) Fetch() likeToUserFindUnique {
	var v likeToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r likeQueryUserRelations) Link(
	params UserWhereParam,
) likeWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return likeWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return likeWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r likeQueryUserRelations) Unlink() likeWithPrismaUserSetParam {
	var v likeWithPrismaUserSetParam

	v = likeWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r likeQueryUserUser) Field() likePrismaFields {
	return likeFieldUser
}

// base struct
type likeQueryPostPost struct{}

type likeQueryPostRelations struct{}

// Like -> Post
//
// @relation
// @required
func (likeQueryPostRelations) Where(
	params ...PostWhereParam,
) likeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return likeDefaultParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (likeQueryPostRelations) Fetch() likeToPostFindUnique {
	var v likeToPostFindUnique

	v.query.Operation = "query"
	v.query.Method = "post"
	v.query.Outputs = postOutput

	return v
}

func (r likeQueryPostRelations) Link(
	params PostWhereParam,
) likeWithPrismaPostSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return likeWithPrismaPostSetParam{}
	}

	fields = append(fields, f)

	return likeWithPrismaPostSetParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r likeQueryPostRelations) Unlink() likeWithPrismaPostSetParam {
	var v likeWithPrismaPostSetParam

	v = likeWithPrismaPostSetParam{
		data: builder.Field{
			Name: "post",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r likeQueryPostPost) Field() likePrismaFields {
	return likeFieldPost
}

// UserFollower acts as a namespaces to access query methods for the UserFollower model
var UserFollower = userFollowerQuery{}

// userFollowerQuery exposes query functions for the userFollower model
type userFollowerQuery struct {

	// ID
	//
	// @required
	ID userFollowerQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt userFollowerQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt userFollowerQueryUpdatedAtDateTime

	Follower userFollowerQueryFollowerRelations

	Followee userFollowerQueryFolloweeRelations

	// FollowerUUID
	//
	// @required
	FollowerUUID userFollowerQueryFollowerUUIDString

	// FolloweeUUID
	//
	// @required
	FolloweeUUID userFollowerQueryFolloweeUUIDString
}

func (userFollowerQuery) Not(params ...UserFollowerWhereParam) userFollowerDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userFollowerDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userFollowerQuery) Or(params ...UserFollowerWhereParam) userFollowerDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userFollowerDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userFollowerQuery) And(params ...UserFollowerWhereParam) userFollowerDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userFollowerDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userFollowerQuery) FollowerUUIDFolloweeUUID(
	_followerUUID UserFollowerWithPrismaFollowerUUIDWhereParam,

	_followeeUUID UserFollowerWithPrismaFolloweeUUIDWhereParam,
) UserFollowerEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _followerUUID.field())
	fields = append(fields, _followeeUUID.field())

	return userFollowerEqualsUniqueParam{
		data: builder.Field{
			Name:   "followerUuid_followeeUuid",
			Fields: builder.TransformEquals(fields),
		},
	}
}

// base struct
type userFollowerQueryIDInt struct{}

// Set the required value of ID
func (r userFollowerQueryIDInt) Set(value int) userFollowerSetParam {

	return userFollowerSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r userFollowerQueryIDInt) SetIfPresent(value *Int) userFollowerSetParam {
	if value == nil {
		return userFollowerSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r userFollowerQueryIDInt) Increment(value int) userFollowerSetParam {
	return userFollowerSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) IncrementIfPresent(value *int) userFollowerSetParam {
	if value == nil {
		return userFollowerSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r userFollowerQueryIDInt) Decrement(value int) userFollowerSetParam {
	return userFollowerSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) DecrementIfPresent(value *int) userFollowerSetParam {
	if value == nil {
		return userFollowerSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r userFollowerQueryIDInt) Multiply(value int) userFollowerSetParam {
	return userFollowerSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) MultiplyIfPresent(value *int) userFollowerSetParam {
	if value == nil {
		return userFollowerSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r userFollowerQueryIDInt) Divide(value int) userFollowerSetParam {
	return userFollowerSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) DivideIfPresent(value *int) userFollowerSetParam {
	if value == nil {
		return userFollowerSetParam{}
	}
	return r.Divide(*value)
}

func (r userFollowerQueryIDInt) Equals(value int) userFollowerWithPrismaIDEqualsUniqueParam {

	return userFollowerWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) EqualsIfPresent(value *int) userFollowerWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return userFollowerWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userFollowerQueryIDInt) Order(direction SortOrder) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userFollowerQueryIDInt) Cursor(cursor int) userFollowerCursorParam {
	return userFollowerCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userFollowerQueryIDInt) In(value []int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) InIfPresent(value []int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.In(value)
}

func (r userFollowerQueryIDInt) NotIn(value []int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) NotInIfPresent(value []int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.NotIn(value)
}

func (r userFollowerQueryIDInt) Lt(value int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) LtIfPresent(value *int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.Lt(*value)
}

func (r userFollowerQueryIDInt) Lte(value int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) LteIfPresent(value *int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.Lte(*value)
}

func (r userFollowerQueryIDInt) Gt(value int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) GtIfPresent(value *int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.Gt(*value)
}

func (r userFollowerQueryIDInt) Gte(value int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) GteIfPresent(value *int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.Gte(*value)
}

func (r userFollowerQueryIDInt) Not(value int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryIDInt) NotIfPresent(value *int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userFollowerQueryIDInt) LT(value int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userFollowerQueryIDInt) LTIfPresent(value *int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r userFollowerQueryIDInt) LTE(value int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userFollowerQueryIDInt) LTEIfPresent(value *int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r userFollowerQueryIDInt) GT(value int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userFollowerQueryIDInt) GTIfPresent(value *int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r userFollowerQueryIDInt) GTE(value int) userFollowerParamUnique {
	return userFollowerParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userFollowerQueryIDInt) GTEIfPresent(value *int) userFollowerParamUnique {
	if value == nil {
		return userFollowerParamUnique{}
	}
	return r.GTE(*value)
}

func (r userFollowerQueryIDInt) Field() userFollowerPrismaFields {
	return userFollowerFieldID
}

// base struct
type userFollowerQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r userFollowerQueryCreatedAtDateTime) Set(value DateTime) userFollowerSetParam {

	return userFollowerSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r userFollowerQueryCreatedAtDateTime) SetIfPresent(value *DateTime) userFollowerSetParam {
	if value == nil {
		return userFollowerSetParam{}
	}

	return r.Set(*value)
}

func (r userFollowerQueryCreatedAtDateTime) Equals(value DateTime) userFollowerWithPrismaCreatedAtEqualsParam {

	return userFollowerWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) userFollowerWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return userFollowerWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userFollowerQueryCreatedAtDateTime) Order(direction SortOrder) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r userFollowerQueryCreatedAtDateTime) Cursor(cursor DateTime) userFollowerCursorParam {
	return userFollowerCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r userFollowerQueryCreatedAtDateTime) In(value []DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryCreatedAtDateTime) InIfPresent(value []DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.In(value)
}

func (r userFollowerQueryCreatedAtDateTime) NotIn(value []DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userFollowerQueryCreatedAtDateTime) Lt(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryCreatedAtDateTime) LtIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userFollowerQueryCreatedAtDateTime) Lte(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryCreatedAtDateTime) LteIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userFollowerQueryCreatedAtDateTime) Gt(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryCreatedAtDateTime) GtIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userFollowerQueryCreatedAtDateTime) Gte(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryCreatedAtDateTime) GteIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userFollowerQueryCreatedAtDateTime) Not(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryCreatedAtDateTime) NotIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userFollowerQueryCreatedAtDateTime) Before(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userFollowerQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userFollowerQueryCreatedAtDateTime) After(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userFollowerQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userFollowerQueryCreatedAtDateTime) BeforeEquals(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userFollowerQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userFollowerQueryCreatedAtDateTime) AfterEquals(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userFollowerQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userFollowerQueryCreatedAtDateTime) Field() userFollowerPrismaFields {
	return userFollowerFieldCreatedAt
}

// base struct
type userFollowerQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r userFollowerQueryUpdatedAtDateTime) Set(value DateTime) userFollowerSetParam {

	return userFollowerSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r userFollowerQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) userFollowerSetParam {
	if value == nil {
		return userFollowerSetParam{}
	}

	return r.Set(*value)
}

func (r userFollowerQueryUpdatedAtDateTime) Equals(value DateTime) userFollowerWithPrismaUpdatedAtEqualsParam {

	return userFollowerWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) userFollowerWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return userFollowerWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userFollowerQueryUpdatedAtDateTime) Order(direction SortOrder) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r userFollowerQueryUpdatedAtDateTime) Cursor(cursor DateTime) userFollowerCursorParam {
	return userFollowerCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r userFollowerQueryUpdatedAtDateTime) In(value []DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryUpdatedAtDateTime) InIfPresent(value []DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.In(value)
}

func (r userFollowerQueryUpdatedAtDateTime) NotIn(value []DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userFollowerQueryUpdatedAtDateTime) Lt(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userFollowerQueryUpdatedAtDateTime) Lte(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userFollowerQueryUpdatedAtDateTime) Gt(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userFollowerQueryUpdatedAtDateTime) Gte(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userFollowerQueryUpdatedAtDateTime) Not(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userFollowerQueryUpdatedAtDateTime) Before(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userFollowerQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userFollowerQueryUpdatedAtDateTime) After(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userFollowerQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userFollowerQueryUpdatedAtDateTime) BeforeEquals(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userFollowerQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userFollowerQueryUpdatedAtDateTime) AfterEquals(value DateTime) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userFollowerQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userFollowerQueryUpdatedAtDateTime) Field() userFollowerPrismaFields {
	return userFollowerFieldUpdatedAt
}

// base struct
type userFollowerQueryFollowerUser struct{}

type userFollowerQueryFollowerRelations struct{}

// UserFollower -> Follower
//
// @relation
// @required
func (userFollowerQueryFollowerRelations) Where(
	params ...UserWhereParam,
) userFollowerDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "follower",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (userFollowerQueryFollowerRelations) Fetch() userFollowerToFollowerFindUnique {
	var v userFollowerToFollowerFindUnique

	v.query.Operation = "query"
	v.query.Method = "follower"
	v.query.Outputs = userOutput

	return v
}

func (r userFollowerQueryFollowerRelations) Link(
	params UserWhereParam,
) userFollowerWithPrismaFollowerSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return userFollowerWithPrismaFollowerSetParam{}
	}

	fields = append(fields, f)

	return userFollowerWithPrismaFollowerSetParam{
		data: builder.Field{
			Name: "follower",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerRelations) Unlink() userFollowerWithPrismaFollowerSetParam {
	var v userFollowerWithPrismaFollowerSetParam

	v = userFollowerWithPrismaFollowerSetParam{
		data: builder.Field{
			Name: "follower",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r userFollowerQueryFollowerUser) Field() userFollowerPrismaFields {
	return userFollowerFieldFollower
}

// base struct
type userFollowerQueryFolloweeUser struct{}

type userFollowerQueryFolloweeRelations struct{}

// UserFollower -> Followee
//
// @relation
// @required
func (userFollowerQueryFolloweeRelations) Where(
	params ...UserWhereParam,
) userFollowerDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followee",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (userFollowerQueryFolloweeRelations) Fetch() userFollowerToFolloweeFindUnique {
	var v userFollowerToFolloweeFindUnique

	v.query.Operation = "query"
	v.query.Method = "followee"
	v.query.Outputs = userOutput

	return v
}

func (r userFollowerQueryFolloweeRelations) Link(
	params UserWhereParam,
) userFollowerWithPrismaFolloweeSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return userFollowerWithPrismaFolloweeSetParam{}
	}

	fields = append(fields, f)

	return userFollowerWithPrismaFolloweeSetParam{
		data: builder.Field{
			Name: "followee",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeRelations) Unlink() userFollowerWithPrismaFolloweeSetParam {
	var v userFollowerWithPrismaFolloweeSetParam

	v = userFollowerWithPrismaFolloweeSetParam{
		data: builder.Field{
			Name: "followee",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r userFollowerQueryFolloweeUser) Field() userFollowerPrismaFields {
	return userFollowerFieldFollowee
}

// base struct
type userFollowerQueryFollowerUUIDString struct{}

// Set the required value of FollowerUUID
func (r userFollowerQueryFollowerUUIDString) Set(value string) userFollowerSetParam {

	return userFollowerSetParam{
		data: builder.Field{
			Name:  "followerUuid",
			Value: value,
		},
	}

}

// Set the optional value of FollowerUUID dynamically
func (r userFollowerQueryFollowerUUIDString) SetIfPresent(value *String) userFollowerSetParam {
	if value == nil {
		return userFollowerSetParam{}
	}

	return r.Set(*value)
}

func (r userFollowerQueryFollowerUUIDString) Equals(value string) userFollowerWithPrismaFollowerUUIDEqualsParam {

	return userFollowerWithPrismaFollowerUUIDEqualsParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) EqualsIfPresent(value *string) userFollowerWithPrismaFollowerUUIDEqualsParam {
	if value == nil {
		return userFollowerWithPrismaFollowerUUIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userFollowerQueryFollowerUUIDString) Order(direction SortOrder) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name:  "followerUuid",
			Value: direction,
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) Cursor(cursor string) userFollowerCursorParam {
	return userFollowerCursorParam{
		data: builder.Field{
			Name:  "followerUuid",
			Value: cursor,
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) In(value []string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) InIfPresent(value []string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.In(value)
}

func (r userFollowerQueryFollowerUUIDString) NotIn(value []string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) NotInIfPresent(value []string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userFollowerQueryFollowerUUIDString) Lt(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) LtIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userFollowerQueryFollowerUUIDString) Lte(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) LteIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userFollowerQueryFollowerUUIDString) Gt(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) GtIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userFollowerQueryFollowerUUIDString) Gte(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) GteIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userFollowerQueryFollowerUUIDString) Contains(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) ContainsIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userFollowerQueryFollowerUUIDString) StartsWith(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) StartsWithIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userFollowerQueryFollowerUUIDString) EndsWith(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) EndsWithIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userFollowerQueryFollowerUUIDString) Mode(value QueryMode) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) ModeIfPresent(value *QueryMode) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userFollowerQueryFollowerUUIDString) Not(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFollowerUUIDString) NotIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userFollowerQueryFollowerUUIDString) HasPrefix(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userFollowerQueryFollowerUUIDString) HasPrefixIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userFollowerQueryFollowerUUIDString) HasSuffix(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followerUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userFollowerQueryFollowerUUIDString) HasSuffixIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userFollowerQueryFollowerUUIDString) Field() userFollowerPrismaFields {
	return userFollowerFieldFollowerUUID
}

// base struct
type userFollowerQueryFolloweeUUIDString struct{}

// Set the required value of FolloweeUUID
func (r userFollowerQueryFolloweeUUIDString) Set(value string) userFollowerSetParam {

	return userFollowerSetParam{
		data: builder.Field{
			Name:  "followeeUuid",
			Value: value,
		},
	}

}

// Set the optional value of FolloweeUUID dynamically
func (r userFollowerQueryFolloweeUUIDString) SetIfPresent(value *String) userFollowerSetParam {
	if value == nil {
		return userFollowerSetParam{}
	}

	return r.Set(*value)
}

func (r userFollowerQueryFolloweeUUIDString) Equals(value string) userFollowerWithPrismaFolloweeUUIDEqualsParam {

	return userFollowerWithPrismaFolloweeUUIDEqualsParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) EqualsIfPresent(value *string) userFollowerWithPrismaFolloweeUUIDEqualsParam {
	if value == nil {
		return userFollowerWithPrismaFolloweeUUIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userFollowerQueryFolloweeUUIDString) Order(direction SortOrder) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name:  "followeeUuid",
			Value: direction,
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) Cursor(cursor string) userFollowerCursorParam {
	return userFollowerCursorParam{
		data: builder.Field{
			Name:  "followeeUuid",
			Value: cursor,
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) In(value []string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) InIfPresent(value []string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.In(value)
}

func (r userFollowerQueryFolloweeUUIDString) NotIn(value []string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) NotInIfPresent(value []string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userFollowerQueryFolloweeUUIDString) Lt(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) LtIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userFollowerQueryFolloweeUUIDString) Lte(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) LteIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userFollowerQueryFolloweeUUIDString) Gt(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) GtIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userFollowerQueryFolloweeUUIDString) Gte(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) GteIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userFollowerQueryFolloweeUUIDString) Contains(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) ContainsIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userFollowerQueryFolloweeUUIDString) StartsWith(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) StartsWithIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userFollowerQueryFolloweeUUIDString) EndsWith(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) EndsWithIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userFollowerQueryFolloweeUUIDString) Mode(value QueryMode) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) ModeIfPresent(value *QueryMode) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userFollowerQueryFolloweeUUIDString) Not(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userFollowerQueryFolloweeUUIDString) NotIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userFollowerQueryFolloweeUUIDString) HasPrefix(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userFollowerQueryFolloweeUUIDString) HasPrefixIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userFollowerQueryFolloweeUUIDString) HasSuffix(value string) userFollowerDefaultParam {
	return userFollowerDefaultParam{
		data: builder.Field{
			Name: "followeeUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userFollowerQueryFolloweeUUIDString) HasSuffixIfPresent(value *string) userFollowerDefaultParam {
	if value == nil {
		return userFollowerDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userFollowerQueryFolloweeUUIDString) Field() userFollowerPrismaFields {
	return userFollowerFieldFolloweeUUID
}

// PublicationPost acts as a namespaces to access query methods for the PublicationPost model
var PublicationPost = publicationPostQuery{}

// publicationPostQuery exposes query functions for the publicationPost model
type publicationPostQuery struct {

	// ID
	//
	// @required
	ID publicationPostQueryIDInt

	// UUID
	//
	// @required
	UUID publicationPostQueryUUIDString

	// CreatedAt
	//
	// @required
	CreatedAt publicationPostQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt publicationPostQueryUpdatedAtDateTime

	User publicationPostQueryUserRelations

	Post publicationPostQueryPostRelations

	// PostUUID
	//
	// @required
	// @unique
	PostUUID publicationPostQueryPostUUIDString

	// UserUUID
	//
	// @required
	UserUUID publicationPostQueryUserUUIDString
}

func (publicationPostQuery) Not(params ...PublicationPostWhereParam) publicationPostDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return publicationPostDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (publicationPostQuery) Or(params ...PublicationPostWhereParam) publicationPostDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return publicationPostDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (publicationPostQuery) And(params ...PublicationPostWhereParam) publicationPostDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return publicationPostDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type publicationPostQueryIDInt struct{}

// Set the required value of ID
func (r publicationPostQueryIDInt) Set(value int) publicationPostSetParam {

	return publicationPostSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r publicationPostQueryIDInt) SetIfPresent(value *Int) publicationPostSetParam {
	if value == nil {
		return publicationPostSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r publicationPostQueryIDInt) Increment(value int) publicationPostSetParam {
	return publicationPostSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) IncrementIfPresent(value *int) publicationPostSetParam {
	if value == nil {
		return publicationPostSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r publicationPostQueryIDInt) Decrement(value int) publicationPostSetParam {
	return publicationPostSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) DecrementIfPresent(value *int) publicationPostSetParam {
	if value == nil {
		return publicationPostSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r publicationPostQueryIDInt) Multiply(value int) publicationPostSetParam {
	return publicationPostSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) MultiplyIfPresent(value *int) publicationPostSetParam {
	if value == nil {
		return publicationPostSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r publicationPostQueryIDInt) Divide(value int) publicationPostSetParam {
	return publicationPostSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) DivideIfPresent(value *int) publicationPostSetParam {
	if value == nil {
		return publicationPostSetParam{}
	}
	return r.Divide(*value)
}

func (r publicationPostQueryIDInt) Equals(value int) publicationPostWithPrismaIDEqualsParam {

	return publicationPostWithPrismaIDEqualsParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) EqualsIfPresent(value *int) publicationPostWithPrismaIDEqualsParam {
	if value == nil {
		return publicationPostWithPrismaIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r publicationPostQueryIDInt) Order(direction SortOrder) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r publicationPostQueryIDInt) Cursor(cursor int) publicationPostCursorParam {
	return publicationPostCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r publicationPostQueryIDInt) In(value []int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) InIfPresent(value []int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.In(value)
}

func (r publicationPostQueryIDInt) NotIn(value []int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) NotInIfPresent(value []int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.NotIn(value)
}

func (r publicationPostQueryIDInt) Lt(value int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) LtIfPresent(value *int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Lt(*value)
}

func (r publicationPostQueryIDInt) Lte(value int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) LteIfPresent(value *int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Lte(*value)
}

func (r publicationPostQueryIDInt) Gt(value int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) GtIfPresent(value *int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Gt(*value)
}

func (r publicationPostQueryIDInt) Gte(value int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) GteIfPresent(value *int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Gte(*value)
}

func (r publicationPostQueryIDInt) Not(value int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryIDInt) NotIfPresent(value *int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r publicationPostQueryIDInt) LT(value int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r publicationPostQueryIDInt) LTIfPresent(value *int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r publicationPostQueryIDInt) LTE(value int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r publicationPostQueryIDInt) LTEIfPresent(value *int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r publicationPostQueryIDInt) GT(value int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r publicationPostQueryIDInt) GTIfPresent(value *int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r publicationPostQueryIDInt) GTE(value int) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r publicationPostQueryIDInt) GTEIfPresent(value *int) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.GTE(*value)
}

func (r publicationPostQueryIDInt) Field() publicationPostPrismaFields {
	return publicationPostFieldID
}

// base struct
type publicationPostQueryUUIDString struct{}

// Set the required value of UUID
func (r publicationPostQueryUUIDString) Set(value string) publicationPostSetParam {

	return publicationPostSetParam{
		data: builder.Field{
			Name:  "uuid",
			Value: value,
		},
	}

}

// Set the optional value of UUID dynamically
func (r publicationPostQueryUUIDString) SetIfPresent(value *String) publicationPostSetParam {
	if value == nil {
		return publicationPostSetParam{}
	}

	return r.Set(*value)
}

func (r publicationPostQueryUUIDString) Equals(value string) publicationPostWithPrismaUUIDEqualsUniqueParam {

	return publicationPostWithPrismaUUIDEqualsUniqueParam{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) EqualsIfPresent(value *string) publicationPostWithPrismaUUIDEqualsUniqueParam {
	if value == nil {
		return publicationPostWithPrismaUUIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r publicationPostQueryUUIDString) Order(direction SortOrder) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name:  "uuid",
			Value: direction,
		},
	}
}

func (r publicationPostQueryUUIDString) Cursor(cursor string) publicationPostCursorParam {
	return publicationPostCursorParam{
		data: builder.Field{
			Name:  "uuid",
			Value: cursor,
		},
	}
}

func (r publicationPostQueryUUIDString) In(value []string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) InIfPresent(value []string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.In(value)
}

func (r publicationPostQueryUUIDString) NotIn(value []string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) NotInIfPresent(value []string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.NotIn(value)
}

func (r publicationPostQueryUUIDString) Lt(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) LtIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Lt(*value)
}

func (r publicationPostQueryUUIDString) Lte(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) LteIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Lte(*value)
}

func (r publicationPostQueryUUIDString) Gt(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) GtIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Gt(*value)
}

func (r publicationPostQueryUUIDString) Gte(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) GteIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Gte(*value)
}

func (r publicationPostQueryUUIDString) Contains(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) ContainsIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Contains(*value)
}

func (r publicationPostQueryUUIDString) StartsWith(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) StartsWithIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r publicationPostQueryUUIDString) EndsWith(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) EndsWithIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r publicationPostQueryUUIDString) Mode(value QueryMode) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) ModeIfPresent(value *QueryMode) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Mode(*value)
}

func (r publicationPostQueryUUIDString) Not(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUUIDString) NotIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r publicationPostQueryUUIDString) HasPrefix(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r publicationPostQueryUUIDString) HasPrefixIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r publicationPostQueryUUIDString) HasSuffix(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "uuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r publicationPostQueryUUIDString) HasSuffixIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r publicationPostQueryUUIDString) Field() publicationPostPrismaFields {
	return publicationPostFieldUUID
}

// base struct
type publicationPostQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r publicationPostQueryCreatedAtDateTime) Set(value DateTime) publicationPostSetParam {

	return publicationPostSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r publicationPostQueryCreatedAtDateTime) SetIfPresent(value *DateTime) publicationPostSetParam {
	if value == nil {
		return publicationPostSetParam{}
	}

	return r.Set(*value)
}

func (r publicationPostQueryCreatedAtDateTime) Equals(value DateTime) publicationPostWithPrismaCreatedAtEqualsParam {

	return publicationPostWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) publicationPostWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return publicationPostWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r publicationPostQueryCreatedAtDateTime) Order(direction SortOrder) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r publicationPostQueryCreatedAtDateTime) Cursor(cursor DateTime) publicationPostCursorParam {
	return publicationPostCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r publicationPostQueryCreatedAtDateTime) In(value []DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryCreatedAtDateTime) InIfPresent(value []DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.In(value)
}

func (r publicationPostQueryCreatedAtDateTime) NotIn(value []DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.NotIn(value)
}

func (r publicationPostQueryCreatedAtDateTime) Lt(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryCreatedAtDateTime) LtIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Lt(*value)
}

func (r publicationPostQueryCreatedAtDateTime) Lte(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryCreatedAtDateTime) LteIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Lte(*value)
}

func (r publicationPostQueryCreatedAtDateTime) Gt(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryCreatedAtDateTime) GtIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Gt(*value)
}

func (r publicationPostQueryCreatedAtDateTime) Gte(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryCreatedAtDateTime) GteIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Gte(*value)
}

func (r publicationPostQueryCreatedAtDateTime) Not(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryCreatedAtDateTime) NotIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r publicationPostQueryCreatedAtDateTime) Before(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r publicationPostQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r publicationPostQueryCreatedAtDateTime) After(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r publicationPostQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r publicationPostQueryCreatedAtDateTime) BeforeEquals(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r publicationPostQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r publicationPostQueryCreatedAtDateTime) AfterEquals(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r publicationPostQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r publicationPostQueryCreatedAtDateTime) Field() publicationPostPrismaFields {
	return publicationPostFieldCreatedAt
}

// base struct
type publicationPostQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r publicationPostQueryUpdatedAtDateTime) Set(value DateTime) publicationPostSetParam {

	return publicationPostSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r publicationPostQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) publicationPostSetParam {
	if value == nil {
		return publicationPostSetParam{}
	}

	return r.Set(*value)
}

func (r publicationPostQueryUpdatedAtDateTime) Equals(value DateTime) publicationPostWithPrismaUpdatedAtEqualsParam {

	return publicationPostWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) publicationPostWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return publicationPostWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r publicationPostQueryUpdatedAtDateTime) Order(direction SortOrder) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r publicationPostQueryUpdatedAtDateTime) Cursor(cursor DateTime) publicationPostCursorParam {
	return publicationPostCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r publicationPostQueryUpdatedAtDateTime) In(value []DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUpdatedAtDateTime) InIfPresent(value []DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.In(value)
}

func (r publicationPostQueryUpdatedAtDateTime) NotIn(value []DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.NotIn(value)
}

func (r publicationPostQueryUpdatedAtDateTime) Lt(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Lt(*value)
}

func (r publicationPostQueryUpdatedAtDateTime) Lte(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Lte(*value)
}

func (r publicationPostQueryUpdatedAtDateTime) Gt(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Gt(*value)
}

func (r publicationPostQueryUpdatedAtDateTime) Gte(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Gte(*value)
}

func (r publicationPostQueryUpdatedAtDateTime) Not(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r publicationPostQueryUpdatedAtDateTime) Before(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r publicationPostQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r publicationPostQueryUpdatedAtDateTime) After(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r publicationPostQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r publicationPostQueryUpdatedAtDateTime) BeforeEquals(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r publicationPostQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r publicationPostQueryUpdatedAtDateTime) AfterEquals(value DateTime) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r publicationPostQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r publicationPostQueryUpdatedAtDateTime) Field() publicationPostPrismaFields {
	return publicationPostFieldUpdatedAt
}

// base struct
type publicationPostQueryUserUser struct{}

type publicationPostQueryUserRelations struct{}

// PublicationPost -> User
//
// @relation
// @required
func (publicationPostQueryUserRelations) Where(
	params ...UserWhereParam,
) publicationPostDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "User",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (publicationPostQueryUserRelations) Fetch() publicationPostToUserFindUnique {
	var v publicationPostToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "User"
	v.query.Outputs = userOutput

	return v
}

func (r publicationPostQueryUserRelations) Link(
	params UserWhereParam,
) publicationPostWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return publicationPostWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return publicationPostWithPrismaUserSetParam{
		data: builder.Field{
			Name: "User",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r publicationPostQueryUserRelations) Unlink() publicationPostWithPrismaUserSetParam {
	var v publicationPostWithPrismaUserSetParam

	v = publicationPostWithPrismaUserSetParam{
		data: builder.Field{
			Name: "User",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r publicationPostQueryUserUser) Field() publicationPostPrismaFields {
	return publicationPostFieldUser
}

// base struct
type publicationPostQueryPostPost struct{}

type publicationPostQueryPostRelations struct{}

// PublicationPost -> Post
//
// @relation
// @required
func (publicationPostQueryPostRelations) Where(
	params ...PostWhereParam,
) publicationPostDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "Post",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (publicationPostQueryPostRelations) Fetch() publicationPostToPostFindUnique {
	var v publicationPostToPostFindUnique

	v.query.Operation = "query"
	v.query.Method = "Post"
	v.query.Outputs = postOutput

	return v
}

func (r publicationPostQueryPostRelations) Link(
	params PostWhereParam,
) publicationPostWithPrismaPostSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return publicationPostWithPrismaPostSetParam{}
	}

	fields = append(fields, f)

	return publicationPostWithPrismaPostSetParam{
		data: builder.Field{
			Name: "Post",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r publicationPostQueryPostRelations) Unlink() publicationPostWithPrismaPostSetParam {
	var v publicationPostWithPrismaPostSetParam

	v = publicationPostWithPrismaPostSetParam{
		data: builder.Field{
			Name: "Post",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r publicationPostQueryPostPost) Field() publicationPostPrismaFields {
	return publicationPostFieldPost
}

// base struct
type publicationPostQueryPostUUIDString struct{}

// Set the required value of PostUUID
func (r publicationPostQueryPostUUIDString) Set(value string) publicationPostSetParam {

	return publicationPostSetParam{
		data: builder.Field{
			Name:  "postUuid",
			Value: value,
		},
	}

}

// Set the optional value of PostUUID dynamically
func (r publicationPostQueryPostUUIDString) SetIfPresent(value *String) publicationPostSetParam {
	if value == nil {
		return publicationPostSetParam{}
	}

	return r.Set(*value)
}

func (r publicationPostQueryPostUUIDString) Equals(value string) publicationPostWithPrismaPostUUIDEqualsUniqueParam {

	return publicationPostWithPrismaPostUUIDEqualsUniqueParam{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) EqualsIfPresent(value *string) publicationPostWithPrismaPostUUIDEqualsUniqueParam {
	if value == nil {
		return publicationPostWithPrismaPostUUIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r publicationPostQueryPostUUIDString) Order(direction SortOrder) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name:  "postUuid",
			Value: direction,
		},
	}
}

func (r publicationPostQueryPostUUIDString) Cursor(cursor string) publicationPostCursorParam {
	return publicationPostCursorParam{
		data: builder.Field{
			Name:  "postUuid",
			Value: cursor,
		},
	}
}

func (r publicationPostQueryPostUUIDString) In(value []string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) InIfPresent(value []string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.In(value)
}

func (r publicationPostQueryPostUUIDString) NotIn(value []string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) NotInIfPresent(value []string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.NotIn(value)
}

func (r publicationPostQueryPostUUIDString) Lt(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) LtIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Lt(*value)
}

func (r publicationPostQueryPostUUIDString) Lte(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) LteIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Lte(*value)
}

func (r publicationPostQueryPostUUIDString) Gt(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) GtIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Gt(*value)
}

func (r publicationPostQueryPostUUIDString) Gte(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) GteIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Gte(*value)
}

func (r publicationPostQueryPostUUIDString) Contains(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) ContainsIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Contains(*value)
}

func (r publicationPostQueryPostUUIDString) StartsWith(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) StartsWithIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r publicationPostQueryPostUUIDString) EndsWith(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) EndsWithIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r publicationPostQueryPostUUIDString) Mode(value QueryMode) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) ModeIfPresent(value *QueryMode) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Mode(*value)
}

func (r publicationPostQueryPostUUIDString) Not(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryPostUUIDString) NotIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r publicationPostQueryPostUUIDString) HasPrefix(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r publicationPostQueryPostUUIDString) HasPrefixIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r publicationPostQueryPostUUIDString) HasSuffix(value string) publicationPostParamUnique {
	return publicationPostParamUnique{
		data: builder.Field{
			Name: "postUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r publicationPostQueryPostUUIDString) HasSuffixIfPresent(value *string) publicationPostParamUnique {
	if value == nil {
		return publicationPostParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r publicationPostQueryPostUUIDString) Field() publicationPostPrismaFields {
	return publicationPostFieldPostUUID
}

// base struct
type publicationPostQueryUserUUIDString struct{}

// Set the required value of UserUUID
func (r publicationPostQueryUserUUIDString) Set(value string) publicationPostSetParam {

	return publicationPostSetParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: value,
		},
	}

}

// Set the optional value of UserUUID dynamically
func (r publicationPostQueryUserUUIDString) SetIfPresent(value *String) publicationPostSetParam {
	if value == nil {
		return publicationPostSetParam{}
	}

	return r.Set(*value)
}

func (r publicationPostQueryUserUUIDString) Equals(value string) publicationPostWithPrismaUserUUIDEqualsParam {

	return publicationPostWithPrismaUserUUIDEqualsParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) EqualsIfPresent(value *string) publicationPostWithPrismaUserUUIDEqualsParam {
	if value == nil {
		return publicationPostWithPrismaUserUUIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r publicationPostQueryUserUUIDString) Order(direction SortOrder) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: direction,
		},
	}
}

func (r publicationPostQueryUserUUIDString) Cursor(cursor string) publicationPostCursorParam {
	return publicationPostCursorParam{
		data: builder.Field{
			Name:  "userUuid",
			Value: cursor,
		},
	}
}

func (r publicationPostQueryUserUUIDString) In(value []string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) InIfPresent(value []string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.In(value)
}

func (r publicationPostQueryUserUUIDString) NotIn(value []string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) NotInIfPresent(value []string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.NotIn(value)
}

func (r publicationPostQueryUserUUIDString) Lt(value string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) LtIfPresent(value *string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Lt(*value)
}

func (r publicationPostQueryUserUUIDString) Lte(value string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) LteIfPresent(value *string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Lte(*value)
}

func (r publicationPostQueryUserUUIDString) Gt(value string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) GtIfPresent(value *string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Gt(*value)
}

func (r publicationPostQueryUserUUIDString) Gte(value string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) GteIfPresent(value *string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Gte(*value)
}

func (r publicationPostQueryUserUUIDString) Contains(value string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) ContainsIfPresent(value *string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Contains(*value)
}

func (r publicationPostQueryUserUUIDString) StartsWith(value string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) StartsWithIfPresent(value *string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r publicationPostQueryUserUUIDString) EndsWith(value string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) EndsWithIfPresent(value *string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r publicationPostQueryUserUUIDString) Mode(value QueryMode) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) ModeIfPresent(value *QueryMode) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Mode(*value)
}

func (r publicationPostQueryUserUUIDString) Not(value string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r publicationPostQueryUserUUIDString) NotIfPresent(value *string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r publicationPostQueryUserUUIDString) HasPrefix(value string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r publicationPostQueryUserUUIDString) HasPrefixIfPresent(value *string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r publicationPostQueryUserUUIDString) HasSuffix(value string) publicationPostDefaultParam {
	return publicationPostDefaultParam{
		data: builder.Field{
			Name: "userUuid",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r publicationPostQueryUserUUIDString) HasSuffixIfPresent(value *string) publicationPostDefaultParam {
	if value == nil {
		return publicationPostDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r publicationPostQueryUserUUIDString) Field() publicationPostPrismaFields {
	return publicationPostFieldUserUUID
}

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type userActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userOutput = []builder.Output{
	{Name: "id"},
	{Name: "uuid"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
	{Name: "email"},
	{Name: "password"},
}

type UserRelationWith interface {
	getQuery() builder.Query
	with()
	userRelation()
}

type UserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userDefaultParam) field() builder.Field {
	return p.data
}

func (p userDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userDefaultParam) userModel() {}

type UserOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userOrderByParam) field() builder.Field {
	return p.data
}

func (p userOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userOrderByParam) userModel() {}

type UserCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isCursor()
}

type userCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userCursorParam) field() builder.Field {
	return p.data
}

func (p userCursorParam) isCursor() {}

func (p userCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userCursorParam) userModel() {}

type UserParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userModel()
}

type userParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userParamUnique) userModel() {}

func (userParamUnique) unique() {}

func (p userParamUnique) field() builder.Field {
	return p.data
}

func (p userParamUnique) getQuery() builder.Query {
	return p.query
}

type UserEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
}

type userEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParam) userModel() {}

func (userEqualsParam) equals() {}

func (p userEqualsParam) field() builder.Field {
	return p.data
}

func (p userEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userModel()
}

type userEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsUniqueParam) userModel() {}

func (userEqualsUniqueParam) unique() {}
func (userEqualsUniqueParam) equals() {}

func (p userEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserSetParam interface {
	field() builder.Field
	settable()
	userModel()
}

type userSetParam struct {
	data builder.Field
}

func (userSetParam) settable() {}

func (p userSetParam) field() builder.Field {
	return p.data
}

func (p userSetParam) userModel() {}

type UserWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	idField()
}

type UserWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDSetParam) userModel() {}

func (p userWithPrismaIDSetParam) idField() {}

type UserWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParam) userModel() {}

func (p userWithPrismaIDEqualsParam) idField() {}

func (userWithPrismaIDSetParam) settable()  {}
func (userWithPrismaIDEqualsParam) equals() {}

type userWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsUniqueParam) userModel() {}
func (p userWithPrismaIDEqualsUniqueParam) idField()   {}

func (userWithPrismaIDEqualsUniqueParam) unique() {}
func (userWithPrismaIDEqualsUniqueParam) equals() {}

type UserWithPrismaUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	uuidField()
}

type UserWithPrismaUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	uuidField()
}

type userWithPrismaUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUUIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUUIDSetParam) userModel() {}

func (p userWithPrismaUUIDSetParam) uuidField() {}

type UserWithPrismaUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	uuidField()
}

type userWithPrismaUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUUIDEqualsParam) userModel() {}

func (p userWithPrismaUUIDEqualsParam) uuidField() {}

func (userWithPrismaUUIDSetParam) settable()  {}
func (userWithPrismaUUIDEqualsParam) equals() {}

type userWithPrismaUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUUIDEqualsUniqueParam) userModel() {}
func (p userWithPrismaUUIDEqualsUniqueParam) uuidField() {}

func (userWithPrismaUUIDEqualsUniqueParam) unique() {}
func (userWithPrismaUUIDEqualsUniqueParam) equals() {}

type UserWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	createdAtField()
}

type UserWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtSetParam) userModel() {}

func (p userWithPrismaCreatedAtSetParam) createdAtField() {}

type UserWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsParam) userModel() {}

func (p userWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (userWithPrismaCreatedAtSetParam) settable()  {}
func (userWithPrismaCreatedAtEqualsParam) equals() {}

type userWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (userWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type UserWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	updatedAtField()
}

type UserWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtSetParam) userModel() {}

func (p userWithPrismaUpdatedAtSetParam) updatedAtField() {}

type UserWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsParam) userModel() {}

func (p userWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (userWithPrismaUpdatedAtSetParam) settable()  {}
func (userWithPrismaUpdatedAtEqualsParam) equals() {}

type userWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (userWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type UserWithPrismaEmailEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	emailField()
}

type UserWithPrismaEmailSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	emailField()
}

type userWithPrismaEmailSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailSetParam) userModel() {}

func (p userWithPrismaEmailSetParam) emailField() {}

type UserWithPrismaEmailWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	emailField()
}

type userWithPrismaEmailEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsParam) userModel() {}

func (p userWithPrismaEmailEqualsParam) emailField() {}

func (userWithPrismaEmailSetParam) settable()  {}
func (userWithPrismaEmailEqualsParam) equals() {}

type userWithPrismaEmailEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsUniqueParam) userModel()  {}
func (p userWithPrismaEmailEqualsUniqueParam) emailField() {}

func (userWithPrismaEmailEqualsUniqueParam) unique() {}
func (userWithPrismaEmailEqualsUniqueParam) equals() {}

type UserWithPrismaPasswordEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	passwordField()
}

type UserWithPrismaPasswordSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	passwordField()
}

type userWithPrismaPasswordSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordSetParam) userModel() {}

func (p userWithPrismaPasswordSetParam) passwordField() {}

type UserWithPrismaPasswordWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	passwordField()
}

type userWithPrismaPasswordEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordEqualsParam) userModel() {}

func (p userWithPrismaPasswordEqualsParam) passwordField() {}

func (userWithPrismaPasswordSetParam) settable()  {}
func (userWithPrismaPasswordEqualsParam) equals() {}

type userWithPrismaPasswordEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordEqualsUniqueParam) userModel()     {}
func (p userWithPrismaPasswordEqualsUniqueParam) passwordField() {}

func (userWithPrismaPasswordEqualsUniqueParam) unique() {}
func (userWithPrismaPasswordEqualsUniqueParam) equals() {}

type UserWithPrismaPostsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	postsField()
}

type UserWithPrismaPostsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	postsField()
}

type userWithPrismaPostsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPostsSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPostsSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPostsSetParam) userModel() {}

func (p userWithPrismaPostsSetParam) postsField() {}

type UserWithPrismaPostsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	postsField()
}

type userWithPrismaPostsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPostsEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPostsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPostsEqualsParam) userModel() {}

func (p userWithPrismaPostsEqualsParam) postsField() {}

func (userWithPrismaPostsSetParam) settable()  {}
func (userWithPrismaPostsEqualsParam) equals() {}

type userWithPrismaPostsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPostsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPostsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPostsEqualsUniqueParam) userModel()  {}
func (p userWithPrismaPostsEqualsUniqueParam) postsField() {}

func (userWithPrismaPostsEqualsUniqueParam) unique() {}
func (userWithPrismaPostsEqualsUniqueParam) equals() {}

type UserWithPrismaCommentsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	commentsField()
}

type UserWithPrismaCommentsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	commentsField()
}

type userWithPrismaCommentsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCommentsSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCommentsSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCommentsSetParam) userModel() {}

func (p userWithPrismaCommentsSetParam) commentsField() {}

type UserWithPrismaCommentsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	commentsField()
}

type userWithPrismaCommentsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCommentsEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCommentsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCommentsEqualsParam) userModel() {}

func (p userWithPrismaCommentsEqualsParam) commentsField() {}

func (userWithPrismaCommentsSetParam) settable()  {}
func (userWithPrismaCommentsEqualsParam) equals() {}

type userWithPrismaCommentsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCommentsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCommentsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCommentsEqualsUniqueParam) userModel()     {}
func (p userWithPrismaCommentsEqualsUniqueParam) commentsField() {}

func (userWithPrismaCommentsEqualsUniqueParam) unique() {}
func (userWithPrismaCommentsEqualsUniqueParam) equals() {}

type UserWithPrismaLikesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	likesField()
}

type UserWithPrismaLikesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	likesField()
}

type userWithPrismaLikesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaLikesSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaLikesSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaLikesSetParam) userModel() {}

func (p userWithPrismaLikesSetParam) likesField() {}

type UserWithPrismaLikesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	likesField()
}

type userWithPrismaLikesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaLikesEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaLikesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaLikesEqualsParam) userModel() {}

func (p userWithPrismaLikesEqualsParam) likesField() {}

func (userWithPrismaLikesSetParam) settable()  {}
func (userWithPrismaLikesEqualsParam) equals() {}

type userWithPrismaLikesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaLikesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaLikesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaLikesEqualsUniqueParam) userModel()  {}
func (p userWithPrismaLikesEqualsUniqueParam) likesField() {}

func (userWithPrismaLikesEqualsUniqueParam) unique() {}
func (userWithPrismaLikesEqualsUniqueParam) equals() {}

type UserWithPrismaUserProfileEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	userProfileField()
}

type UserWithPrismaUserProfileSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	userProfileField()
}

type userWithPrismaUserProfileSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserProfileSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserProfileSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserProfileSetParam) userModel() {}

func (p userWithPrismaUserProfileSetParam) userProfileField() {}

type UserWithPrismaUserProfileWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	userProfileField()
}

type userWithPrismaUserProfileEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserProfileEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserProfileEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserProfileEqualsParam) userModel() {}

func (p userWithPrismaUserProfileEqualsParam) userProfileField() {}

func (userWithPrismaUserProfileSetParam) settable()  {}
func (userWithPrismaUserProfileEqualsParam) equals() {}

type userWithPrismaUserProfileEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserProfileEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserProfileEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserProfileEqualsUniqueParam) userModel()        {}
func (p userWithPrismaUserProfileEqualsUniqueParam) userProfileField() {}

func (userWithPrismaUserProfileEqualsUniqueParam) unique() {}
func (userWithPrismaUserProfileEqualsUniqueParam) equals() {}

type UserWithPrismaPublicationPostEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	publicationPostField()
}

type UserWithPrismaPublicationPostSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	publicationPostField()
}

type userWithPrismaPublicationPostSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPublicationPostSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPublicationPostSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPublicationPostSetParam) userModel() {}

func (p userWithPrismaPublicationPostSetParam) publicationPostField() {}

type UserWithPrismaPublicationPostWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	publicationPostField()
}

type userWithPrismaPublicationPostEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPublicationPostEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPublicationPostEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPublicationPostEqualsParam) userModel() {}

func (p userWithPrismaPublicationPostEqualsParam) publicationPostField() {}

func (userWithPrismaPublicationPostSetParam) settable()  {}
func (userWithPrismaPublicationPostEqualsParam) equals() {}

type userWithPrismaPublicationPostEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPublicationPostEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPublicationPostEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPublicationPostEqualsUniqueParam) userModel()            {}
func (p userWithPrismaPublicationPostEqualsUniqueParam) publicationPostField() {}

func (userWithPrismaPublicationPostEqualsUniqueParam) unique() {}
func (userWithPrismaPublicationPostEqualsUniqueParam) equals() {}

type UserWithPrismaUserFollowerEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	userFollowerField()
}

type UserWithPrismaUserFollowerSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	userFollowerField()
}

type userWithPrismaUserFollowerSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserFollowerSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserFollowerSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserFollowerSetParam) userModel() {}

func (p userWithPrismaUserFollowerSetParam) userFollowerField() {}

type UserWithPrismaUserFollowerWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	userFollowerField()
}

type userWithPrismaUserFollowerEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserFollowerEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserFollowerEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserFollowerEqualsParam) userModel() {}

func (p userWithPrismaUserFollowerEqualsParam) userFollowerField() {}

func (userWithPrismaUserFollowerSetParam) settable()  {}
func (userWithPrismaUserFollowerEqualsParam) equals() {}

type userWithPrismaUserFollowerEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserFollowerEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserFollowerEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserFollowerEqualsUniqueParam) userModel()         {}
func (p userWithPrismaUserFollowerEqualsUniqueParam) userFollowerField() {}

func (userWithPrismaUserFollowerEqualsUniqueParam) unique() {}
func (userWithPrismaUserFollowerEqualsUniqueParam) equals() {}

type UserWithPrismaUserFolloweeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	userFolloweeField()
}

type UserWithPrismaUserFolloweeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	userFolloweeField()
}

type userWithPrismaUserFolloweeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserFolloweeSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserFolloweeSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserFolloweeSetParam) userModel() {}

func (p userWithPrismaUserFolloweeSetParam) userFolloweeField() {}

type UserWithPrismaUserFolloweeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	userFolloweeField()
}

type userWithPrismaUserFolloweeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserFolloweeEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserFolloweeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserFolloweeEqualsParam) userModel() {}

func (p userWithPrismaUserFolloweeEqualsParam) userFolloweeField() {}

func (userWithPrismaUserFolloweeSetParam) settable()  {}
func (userWithPrismaUserFolloweeEqualsParam) equals() {}

type userWithPrismaUserFolloweeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserFolloweeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserFolloweeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserFolloweeEqualsUniqueParam) userModel()         {}
func (p userWithPrismaUserFolloweeEqualsUniqueParam) userFolloweeField() {}

func (userWithPrismaUserFolloweeEqualsUniqueParam) unique() {}
func (userWithPrismaUserFolloweeEqualsUniqueParam) equals() {}

type userProfileActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userProfileOutput = []builder.Output{
	{Name: "id"},
	{Name: "uuid"},
	{Name: "firstName"},
	{Name: "lastName"},
	{Name: "bio"},
	{Name: "profilePicture"},
	{Name: "userUuid"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type UserProfileRelationWith interface {
	getQuery() builder.Query
	with()
	userProfileRelation()
}

type UserProfileWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
}

type userProfileDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileDefaultParam) field() builder.Field {
	return p.data
}

func (p userProfileDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileDefaultParam) userProfileModel() {}

type UserProfileOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
}

type userProfileOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileOrderByParam) field() builder.Field {
	return p.data
}

func (p userProfileOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileOrderByParam) userProfileModel() {}

type UserProfileCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	isCursor()
}

type userProfileCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileCursorParam) field() builder.Field {
	return p.data
}

func (p userProfileCursorParam) isCursor() {}

func (p userProfileCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileCursorParam) userProfileModel() {}

type UserProfileParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userProfileModel()
}

type userProfileParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileParamUnique) userProfileModel() {}

func (userProfileParamUnique) unique() {}

func (p userProfileParamUnique) field() builder.Field {
	return p.data
}

func (p userProfileParamUnique) getQuery() builder.Query {
	return p.query
}

type UserProfileEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
}

type userProfileEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileEqualsParam) userProfileModel() {}

func (userProfileEqualsParam) equals() {}

func (p userProfileEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserProfileEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userProfileModel()
}

type userProfileEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileEqualsUniqueParam) userProfileModel() {}

func (userProfileEqualsUniqueParam) unique() {}
func (userProfileEqualsUniqueParam) equals() {}

func (p userProfileEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserProfileSetParam interface {
	field() builder.Field
	settable()
	userProfileModel()
}

type userProfileSetParam struct {
	data builder.Field
}

func (userProfileSetParam) settable() {}

func (p userProfileSetParam) field() builder.Field {
	return p.data
}

func (p userProfileSetParam) userProfileModel() {}

type UserProfileWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
	idField()
}

type UserProfileWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	idField()
}

type userProfileWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaIDSetParam) userProfileModel() {}

func (p userProfileWithPrismaIDSetParam) idField() {}

type UserProfileWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	idField()
}

type userProfileWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaIDEqualsParam) userProfileModel() {}

func (p userProfileWithPrismaIDEqualsParam) idField() {}

func (userProfileWithPrismaIDSetParam) settable()  {}
func (userProfileWithPrismaIDEqualsParam) equals() {}

type userProfileWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaIDEqualsUniqueParam) userProfileModel() {}
func (p userProfileWithPrismaIDEqualsUniqueParam) idField()          {}

func (userProfileWithPrismaIDEqualsUniqueParam) unique() {}
func (userProfileWithPrismaIDEqualsUniqueParam) equals() {}

type UserProfileWithPrismaUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
	uuidField()
}

type UserProfileWithPrismaUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	uuidField()
}

type userProfileWithPrismaUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUUIDSetParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUUIDSetParam) userProfileModel() {}

func (p userProfileWithPrismaUUIDSetParam) uuidField() {}

type UserProfileWithPrismaUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	uuidField()
}

type userProfileWithPrismaUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUUIDEqualsParam) userProfileModel() {}

func (p userProfileWithPrismaUUIDEqualsParam) uuidField() {}

func (userProfileWithPrismaUUIDSetParam) settable()  {}
func (userProfileWithPrismaUUIDEqualsParam) equals() {}

type userProfileWithPrismaUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUUIDEqualsUniqueParam) userProfileModel() {}
func (p userProfileWithPrismaUUIDEqualsUniqueParam) uuidField()        {}

func (userProfileWithPrismaUUIDEqualsUniqueParam) unique() {}
func (userProfileWithPrismaUUIDEqualsUniqueParam) equals() {}

type UserProfileWithPrismaFirstNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
	firstNameField()
}

type UserProfileWithPrismaFirstNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	firstNameField()
}

type userProfileWithPrismaFirstNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaFirstNameSetParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaFirstNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaFirstNameSetParam) userProfileModel() {}

func (p userProfileWithPrismaFirstNameSetParam) firstNameField() {}

type UserProfileWithPrismaFirstNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	firstNameField()
}

type userProfileWithPrismaFirstNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaFirstNameEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaFirstNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaFirstNameEqualsParam) userProfileModel() {}

func (p userProfileWithPrismaFirstNameEqualsParam) firstNameField() {}

func (userProfileWithPrismaFirstNameSetParam) settable()  {}
func (userProfileWithPrismaFirstNameEqualsParam) equals() {}

type userProfileWithPrismaFirstNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaFirstNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaFirstNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaFirstNameEqualsUniqueParam) userProfileModel() {}
func (p userProfileWithPrismaFirstNameEqualsUniqueParam) firstNameField()   {}

func (userProfileWithPrismaFirstNameEqualsUniqueParam) unique() {}
func (userProfileWithPrismaFirstNameEqualsUniqueParam) equals() {}

type UserProfileWithPrismaLastNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
	lastNameField()
}

type UserProfileWithPrismaLastNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	lastNameField()
}

type userProfileWithPrismaLastNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaLastNameSetParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaLastNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaLastNameSetParam) userProfileModel() {}

func (p userProfileWithPrismaLastNameSetParam) lastNameField() {}

type UserProfileWithPrismaLastNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	lastNameField()
}

type userProfileWithPrismaLastNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaLastNameEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaLastNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaLastNameEqualsParam) userProfileModel() {}

func (p userProfileWithPrismaLastNameEqualsParam) lastNameField() {}

func (userProfileWithPrismaLastNameSetParam) settable()  {}
func (userProfileWithPrismaLastNameEqualsParam) equals() {}

type userProfileWithPrismaLastNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaLastNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaLastNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaLastNameEqualsUniqueParam) userProfileModel() {}
func (p userProfileWithPrismaLastNameEqualsUniqueParam) lastNameField()    {}

func (userProfileWithPrismaLastNameEqualsUniqueParam) unique() {}
func (userProfileWithPrismaLastNameEqualsUniqueParam) equals() {}

type UserProfileWithPrismaBioEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
	bioField()
}

type UserProfileWithPrismaBioSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	bioField()
}

type userProfileWithPrismaBioSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaBioSetParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaBioSetParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaBioSetParam) userProfileModel() {}

func (p userProfileWithPrismaBioSetParam) bioField() {}

type UserProfileWithPrismaBioWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	bioField()
}

type userProfileWithPrismaBioEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaBioEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaBioEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaBioEqualsParam) userProfileModel() {}

func (p userProfileWithPrismaBioEqualsParam) bioField() {}

func (userProfileWithPrismaBioSetParam) settable()  {}
func (userProfileWithPrismaBioEqualsParam) equals() {}

type userProfileWithPrismaBioEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaBioEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaBioEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaBioEqualsUniqueParam) userProfileModel() {}
func (p userProfileWithPrismaBioEqualsUniqueParam) bioField()         {}

func (userProfileWithPrismaBioEqualsUniqueParam) unique() {}
func (userProfileWithPrismaBioEqualsUniqueParam) equals() {}

type UserProfileWithPrismaProfilePictureEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
	profilePictureField()
}

type UserProfileWithPrismaProfilePictureSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	profilePictureField()
}

type userProfileWithPrismaProfilePictureSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaProfilePictureSetParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaProfilePictureSetParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaProfilePictureSetParam) userProfileModel() {}

func (p userProfileWithPrismaProfilePictureSetParam) profilePictureField() {}

type UserProfileWithPrismaProfilePictureWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	profilePictureField()
}

type userProfileWithPrismaProfilePictureEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaProfilePictureEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaProfilePictureEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaProfilePictureEqualsParam) userProfileModel() {}

func (p userProfileWithPrismaProfilePictureEqualsParam) profilePictureField() {}

func (userProfileWithPrismaProfilePictureSetParam) settable()  {}
func (userProfileWithPrismaProfilePictureEqualsParam) equals() {}

type userProfileWithPrismaProfilePictureEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaProfilePictureEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaProfilePictureEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaProfilePictureEqualsUniqueParam) userProfileModel()    {}
func (p userProfileWithPrismaProfilePictureEqualsUniqueParam) profilePictureField() {}

func (userProfileWithPrismaProfilePictureEqualsUniqueParam) unique() {}
func (userProfileWithPrismaProfilePictureEqualsUniqueParam) equals() {}

type UserProfileWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
	userField()
}

type UserProfileWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	userField()
}

type userProfileWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUserSetParam) userProfileModel() {}

func (p userProfileWithPrismaUserSetParam) userField() {}

type UserProfileWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	userField()
}

type userProfileWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUserEqualsParam) userProfileModel() {}

func (p userProfileWithPrismaUserEqualsParam) userField() {}

func (userProfileWithPrismaUserSetParam) settable()  {}
func (userProfileWithPrismaUserEqualsParam) equals() {}

type userProfileWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUserEqualsUniqueParam) userProfileModel() {}
func (p userProfileWithPrismaUserEqualsUniqueParam) userField()        {}

func (userProfileWithPrismaUserEqualsUniqueParam) unique() {}
func (userProfileWithPrismaUserEqualsUniqueParam) equals() {}

type UserProfileWithPrismaUserUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
	userUUIDField()
}

type UserProfileWithPrismaUserUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	userUUIDField()
}

type userProfileWithPrismaUserUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUserUUIDSetParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUserUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUserUUIDSetParam) userProfileModel() {}

func (p userProfileWithPrismaUserUUIDSetParam) userUUIDField() {}

type UserProfileWithPrismaUserUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	userUUIDField()
}

type userProfileWithPrismaUserUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUserUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUserUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUserUUIDEqualsParam) userProfileModel() {}

func (p userProfileWithPrismaUserUUIDEqualsParam) userUUIDField() {}

func (userProfileWithPrismaUserUUIDSetParam) settable()  {}
func (userProfileWithPrismaUserUUIDEqualsParam) equals() {}

type userProfileWithPrismaUserUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUserUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUserUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUserUUIDEqualsUniqueParam) userProfileModel() {}
func (p userProfileWithPrismaUserUUIDEqualsUniqueParam) userUUIDField()    {}

func (userProfileWithPrismaUserUUIDEqualsUniqueParam) unique() {}
func (userProfileWithPrismaUserUUIDEqualsUniqueParam) equals() {}

type UserProfileWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
	createdAtField()
}

type UserProfileWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	createdAtField()
}

type userProfileWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaCreatedAtSetParam) userProfileModel() {}

func (p userProfileWithPrismaCreatedAtSetParam) createdAtField() {}

type UserProfileWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	createdAtField()
}

type userProfileWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaCreatedAtEqualsParam) userProfileModel() {}

func (p userProfileWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (userProfileWithPrismaCreatedAtSetParam) settable()  {}
func (userProfileWithPrismaCreatedAtEqualsParam) equals() {}

type userProfileWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaCreatedAtEqualsUniqueParam) userProfileModel() {}
func (p userProfileWithPrismaCreatedAtEqualsUniqueParam) createdAtField()   {}

func (userProfileWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (userProfileWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type UserProfileWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userProfileModel()
	updatedAtField()
}

type UserProfileWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	updatedAtField()
}

type userProfileWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUpdatedAtSetParam) userProfileModel() {}

func (p userProfileWithPrismaUpdatedAtSetParam) updatedAtField() {}

type UserProfileWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userProfileModel()
	updatedAtField()
}

type userProfileWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUpdatedAtEqualsParam) userProfileModel() {}

func (p userProfileWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (userProfileWithPrismaUpdatedAtSetParam) settable()  {}
func (userProfileWithPrismaUpdatedAtEqualsParam) equals() {}

type userProfileWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userProfileWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userProfileWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userProfileWithPrismaUpdatedAtEqualsUniqueParam) userProfileModel() {}
func (p userProfileWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField()   {}

func (userProfileWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (userProfileWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type postActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var postOutput = []builder.Output{
	{Name: "id"},
	{Name: "uuid"},
	{Name: "title"},
	{Name: "source"},
	{Name: "srcType"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
	{Name: "published"},
	{Name: "userUuid"},
	{Name: "postCategoryId"},
	{Name: "postTagId"},
	{Name: "publishPostUuid"},
}

type PostRelationWith interface {
	getQuery() builder.Query
	with()
	postRelation()
}

type PostWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
}

type postDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p postDefaultParam) field() builder.Field {
	return p.data
}

func (p postDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p postDefaultParam) postModel() {}

type PostOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
}

type postOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p postOrderByParam) field() builder.Field {
	return p.data
}

func (p postOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p postOrderByParam) postModel() {}

type PostCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	isCursor()
}

type postCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCursorParam) field() builder.Field {
	return p.data
}

func (p postCursorParam) isCursor() {}

func (p postCursorParam) getQuery() builder.Query {
	return p.query
}

func (p postCursorParam) postModel() {}

type PostParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	postModel()
}

type postParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p postParamUnique) postModel() {}

func (postParamUnique) unique() {}

func (p postParamUnique) field() builder.Field {
	return p.data
}

func (p postParamUnique) getQuery() builder.Query {
	return p.query
}

type PostEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
}

type postEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postEqualsParam) postModel() {}

func (postEqualsParam) equals() {}

func (p postEqualsParam) field() builder.Field {
	return p.data
}

func (p postEqualsParam) getQuery() builder.Query {
	return p.query
}

type PostEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	postModel()
}

type postEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postEqualsUniqueParam) postModel() {}

func (postEqualsUniqueParam) unique() {}
func (postEqualsUniqueParam) equals() {}

func (p postEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type PostSetParam interface {
	field() builder.Field
	settable()
	postModel()
}

type postSetParam struct {
	data builder.Field
}

func (postSetParam) settable() {}

func (p postSetParam) field() builder.Field {
	return p.data
}

func (p postSetParam) postModel() {}

type PostWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	idField()
}

type PostWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	idField()
}

type postWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaIDSetParam) postModel() {}

func (p postWithPrismaIDSetParam) idField() {}

type PostWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	idField()
}

type postWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaIDEqualsParam) postModel() {}

func (p postWithPrismaIDEqualsParam) idField() {}

func (postWithPrismaIDSetParam) settable()  {}
func (postWithPrismaIDEqualsParam) equals() {}

type postWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaIDEqualsUniqueParam) postModel() {}
func (p postWithPrismaIDEqualsUniqueParam) idField()   {}

func (postWithPrismaIDEqualsUniqueParam) unique() {}
func (postWithPrismaIDEqualsUniqueParam) equals() {}

type PostWithPrismaUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	uuidField()
}

type PostWithPrismaUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	uuidField()
}

type postWithPrismaUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUUIDSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUUIDSetParam) postModel() {}

func (p postWithPrismaUUIDSetParam) uuidField() {}

type PostWithPrismaUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	uuidField()
}

type postWithPrismaUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUUIDEqualsParam) postModel() {}

func (p postWithPrismaUUIDEqualsParam) uuidField() {}

func (postWithPrismaUUIDSetParam) settable()  {}
func (postWithPrismaUUIDEqualsParam) equals() {}

type postWithPrismaUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUUIDEqualsUniqueParam) postModel() {}
func (p postWithPrismaUUIDEqualsUniqueParam) uuidField() {}

func (postWithPrismaUUIDEqualsUniqueParam) unique() {}
func (postWithPrismaUUIDEqualsUniqueParam) equals() {}

type PostWithPrismaTitleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	titleField()
}

type PostWithPrismaTitleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	titleField()
}

type postWithPrismaTitleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaTitleSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaTitleSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaTitleSetParam) postModel() {}

func (p postWithPrismaTitleSetParam) titleField() {}

type PostWithPrismaTitleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	titleField()
}

type postWithPrismaTitleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaTitleEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaTitleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaTitleEqualsParam) postModel() {}

func (p postWithPrismaTitleEqualsParam) titleField() {}

func (postWithPrismaTitleSetParam) settable()  {}
func (postWithPrismaTitleEqualsParam) equals() {}

type postWithPrismaTitleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaTitleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaTitleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaTitleEqualsUniqueParam) postModel()  {}
func (p postWithPrismaTitleEqualsUniqueParam) titleField() {}

func (postWithPrismaTitleEqualsUniqueParam) unique() {}
func (postWithPrismaTitleEqualsUniqueParam) equals() {}

type PostWithPrismaSourceEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	sourceField()
}

type PostWithPrismaSourceSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	sourceField()
}

type postWithPrismaSourceSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaSourceSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaSourceSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaSourceSetParam) postModel() {}

func (p postWithPrismaSourceSetParam) sourceField() {}

type PostWithPrismaSourceWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	sourceField()
}

type postWithPrismaSourceEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaSourceEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaSourceEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaSourceEqualsParam) postModel() {}

func (p postWithPrismaSourceEqualsParam) sourceField() {}

func (postWithPrismaSourceSetParam) settable()  {}
func (postWithPrismaSourceEqualsParam) equals() {}

type postWithPrismaSourceEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaSourceEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaSourceEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaSourceEqualsUniqueParam) postModel()   {}
func (p postWithPrismaSourceEqualsUniqueParam) sourceField() {}

func (postWithPrismaSourceEqualsUniqueParam) unique() {}
func (postWithPrismaSourceEqualsUniqueParam) equals() {}

type PostWithPrismaSrcTypeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	srcTypeField()
}

type PostWithPrismaSrcTypeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	srcTypeField()
}

type postWithPrismaSrcTypeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaSrcTypeSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaSrcTypeSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaSrcTypeSetParam) postModel() {}

func (p postWithPrismaSrcTypeSetParam) srcTypeField() {}

type PostWithPrismaSrcTypeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	srcTypeField()
}

type postWithPrismaSrcTypeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaSrcTypeEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaSrcTypeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaSrcTypeEqualsParam) postModel() {}

func (p postWithPrismaSrcTypeEqualsParam) srcTypeField() {}

func (postWithPrismaSrcTypeSetParam) settable()  {}
func (postWithPrismaSrcTypeEqualsParam) equals() {}

type postWithPrismaSrcTypeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaSrcTypeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaSrcTypeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaSrcTypeEqualsUniqueParam) postModel()    {}
func (p postWithPrismaSrcTypeEqualsUniqueParam) srcTypeField() {}

func (postWithPrismaSrcTypeEqualsUniqueParam) unique() {}
func (postWithPrismaSrcTypeEqualsUniqueParam) equals() {}

type PostWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	createdAtField()
}

type PostWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	createdAtField()
}

type postWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaCreatedAtSetParam) postModel() {}

func (p postWithPrismaCreatedAtSetParam) createdAtField() {}

type PostWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	createdAtField()
}

type postWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaCreatedAtEqualsParam) postModel() {}

func (p postWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (postWithPrismaCreatedAtSetParam) settable()  {}
func (postWithPrismaCreatedAtEqualsParam) equals() {}

type postWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaCreatedAtEqualsUniqueParam) postModel()      {}
func (p postWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (postWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (postWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type PostWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	updatedAtField()
}

type PostWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	updatedAtField()
}

type postWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUpdatedAtSetParam) postModel() {}

func (p postWithPrismaUpdatedAtSetParam) updatedAtField() {}

type PostWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	updatedAtField()
}

type postWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUpdatedAtEqualsParam) postModel() {}

func (p postWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (postWithPrismaUpdatedAtSetParam) settable()  {}
func (postWithPrismaUpdatedAtEqualsParam) equals() {}

type postWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUpdatedAtEqualsUniqueParam) postModel()      {}
func (p postWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (postWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (postWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type PostWithPrismaPublishedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	publishedField()
}

type PostWithPrismaPublishedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	publishedField()
}

type postWithPrismaPublishedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPublishedSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPublishedSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPublishedSetParam) postModel() {}

func (p postWithPrismaPublishedSetParam) publishedField() {}

type PostWithPrismaPublishedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	publishedField()
}

type postWithPrismaPublishedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPublishedEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPublishedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPublishedEqualsParam) postModel() {}

func (p postWithPrismaPublishedEqualsParam) publishedField() {}

func (postWithPrismaPublishedSetParam) settable()  {}
func (postWithPrismaPublishedEqualsParam) equals() {}

type postWithPrismaPublishedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPublishedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPublishedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPublishedEqualsUniqueParam) postModel()      {}
func (p postWithPrismaPublishedEqualsUniqueParam) publishedField() {}

func (postWithPrismaPublishedEqualsUniqueParam) unique() {}
func (postWithPrismaPublishedEqualsUniqueParam) equals() {}

type PostWithPrismaUserUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	userUUIDField()
}

type PostWithPrismaUserUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	userUUIDField()
}

type postWithPrismaUserUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUserUUIDSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUserUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUserUUIDSetParam) postModel() {}

func (p postWithPrismaUserUUIDSetParam) userUUIDField() {}

type PostWithPrismaUserUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	userUUIDField()
}

type postWithPrismaUserUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUserUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUserUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUserUUIDEqualsParam) postModel() {}

func (p postWithPrismaUserUUIDEqualsParam) userUUIDField() {}

func (postWithPrismaUserUUIDSetParam) settable()  {}
func (postWithPrismaUserUUIDEqualsParam) equals() {}

type postWithPrismaUserUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUserUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUserUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUserUUIDEqualsUniqueParam) postModel()     {}
func (p postWithPrismaUserUUIDEqualsUniqueParam) userUUIDField() {}

func (postWithPrismaUserUUIDEqualsUniqueParam) unique() {}
func (postWithPrismaUserUUIDEqualsUniqueParam) equals() {}

type PostWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	userField()
}

type PostWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	userField()
}

type postWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUserSetParam) postModel() {}

func (p postWithPrismaUserSetParam) userField() {}

type PostWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	userField()
}

type postWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUserEqualsParam) postModel() {}

func (p postWithPrismaUserEqualsParam) userField() {}

func (postWithPrismaUserSetParam) settable()  {}
func (postWithPrismaUserEqualsParam) equals() {}

type postWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaUserEqualsUniqueParam) postModel() {}
func (p postWithPrismaUserEqualsUniqueParam) userField() {}

func (postWithPrismaUserEqualsUniqueParam) unique() {}
func (postWithPrismaUserEqualsUniqueParam) equals() {}

type PostWithPrismaTagsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	tagsField()
}

type PostWithPrismaTagsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	tagsField()
}

type postWithPrismaTagsSetParam struct {
	data  builder.Field
	query builder.Query
}

// categoryField implements PostWithPrismaCategorySetParam.
func (p postWithPrismaTagsSetParam) categoryField() {
	panic("unimplemented")
}

func (p postWithPrismaTagsSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaTagsSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaTagsSetParam) postModel() {}

func (p postWithPrismaTagsSetParam) tagsField() {}

type PostWithPrismaTagsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	tagsField()
}

type postWithPrismaTagsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaTagsEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaTagsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaTagsEqualsParam) postModel() {}

func (p postWithPrismaTagsEqualsParam) tagsField() {}

func (postWithPrismaTagsSetParam) settable()  {}
func (postWithPrismaTagsEqualsParam) equals() {}

type postWithPrismaTagsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaTagsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaTagsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaTagsEqualsUniqueParam) postModel() {}
func (p postWithPrismaTagsEqualsUniqueParam) tagsField() {}

func (postWithPrismaTagsEqualsUniqueParam) unique() {}
func (postWithPrismaTagsEqualsUniqueParam) equals() {}

type PostWithPrismaCategoryEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	categoryField()
}

type PostWithPrismaCategorySetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	categoryField()
}

type postWithPrismaCategorySetParam struct {
	data  builder.Field
	query builder.Query
}

// tagsField implements PostWithPrismaTagsSetParam.
func (p postWithPrismaCategorySetParam) tagsField() {
	panic("unimplemented")
}

func (p postWithPrismaCategorySetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaCategorySetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaCategorySetParam) postModel() {}

func (p postWithPrismaCategorySetParam) categoryField() {}

type PostWithPrismaCategoryWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	categoryField()
}

type postWithPrismaCategoryEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaCategoryEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaCategoryEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaCategoryEqualsParam) postModel() {}

func (p postWithPrismaCategoryEqualsParam) categoryField() {}

func (postWithPrismaCategorySetParam) settable()  {}
func (postWithPrismaCategoryEqualsParam) equals() {}

type postWithPrismaCategoryEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaCategoryEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaCategoryEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaCategoryEqualsUniqueParam) postModel()     {}
func (p postWithPrismaCategoryEqualsUniqueParam) categoryField() {}

func (postWithPrismaCategoryEqualsUniqueParam) unique() {}
func (postWithPrismaCategoryEqualsUniqueParam) equals() {}

type PostWithPrismaPostCategoryIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	postCategoryIDField()
}

type PostWithPrismaPostCategoryIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	postCategoryIDField()
}

type postWithPrismaPostCategoryIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPostCategoryIDSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPostCategoryIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPostCategoryIDSetParam) postModel() {}

func (p postWithPrismaPostCategoryIDSetParam) postCategoryIDField() {}

type PostWithPrismaPostCategoryIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	postCategoryIDField()
}

type postWithPrismaPostCategoryIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPostCategoryIDEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPostCategoryIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPostCategoryIDEqualsParam) postModel() {}

func (p postWithPrismaPostCategoryIDEqualsParam) postCategoryIDField() {}

func (postWithPrismaPostCategoryIDSetParam) settable()  {}
func (postWithPrismaPostCategoryIDEqualsParam) equals() {}

type postWithPrismaPostCategoryIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPostCategoryIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPostCategoryIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPostCategoryIDEqualsUniqueParam) postModel()           {}
func (p postWithPrismaPostCategoryIDEqualsUniqueParam) postCategoryIDField() {}

func (postWithPrismaPostCategoryIDEqualsUniqueParam) unique() {}
func (postWithPrismaPostCategoryIDEqualsUniqueParam) equals() {}

type PostWithPrismaPostTagIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	postTagIDField()
}

type PostWithPrismaPostTagIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	postTagIDField()
}

type postWithPrismaPostTagIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPostTagIDSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPostTagIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPostTagIDSetParam) postModel() {}

func (p postWithPrismaPostTagIDSetParam) postTagIDField() {}

type PostWithPrismaPostTagIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	postTagIDField()
}

type postWithPrismaPostTagIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPostTagIDEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPostTagIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPostTagIDEqualsParam) postModel() {}

func (p postWithPrismaPostTagIDEqualsParam) postTagIDField() {}

func (postWithPrismaPostTagIDSetParam) settable()  {}
func (postWithPrismaPostTagIDEqualsParam) equals() {}

type postWithPrismaPostTagIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPostTagIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPostTagIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPostTagIDEqualsUniqueParam) postModel()      {}
func (p postWithPrismaPostTagIDEqualsUniqueParam) postTagIDField() {}

func (postWithPrismaPostTagIDEqualsUniqueParam) unique() {}
func (postWithPrismaPostTagIDEqualsUniqueParam) equals() {}

type PostWithPrismaCommentsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	commentsField()
}

type PostWithPrismaCommentsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	commentsField()
}

type postWithPrismaCommentsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaCommentsSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaCommentsSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaCommentsSetParam) postModel() {}

func (p postWithPrismaCommentsSetParam) commentsField() {}

type PostWithPrismaCommentsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	commentsField()
}

type postWithPrismaCommentsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaCommentsEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaCommentsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaCommentsEqualsParam) postModel() {}

func (p postWithPrismaCommentsEqualsParam) commentsField() {}

func (postWithPrismaCommentsSetParam) settable()  {}
func (postWithPrismaCommentsEqualsParam) equals() {}

type postWithPrismaCommentsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaCommentsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaCommentsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaCommentsEqualsUniqueParam) postModel()     {}
func (p postWithPrismaCommentsEqualsUniqueParam) commentsField() {}

func (postWithPrismaCommentsEqualsUniqueParam) unique() {}
func (postWithPrismaCommentsEqualsUniqueParam) equals() {}

type PostWithPrismaLikesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	likesField()
}

type PostWithPrismaLikesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	likesField()
}

type postWithPrismaLikesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaLikesSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaLikesSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaLikesSetParam) postModel() {}

func (p postWithPrismaLikesSetParam) likesField() {}

type PostWithPrismaLikesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	likesField()
}

type postWithPrismaLikesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaLikesEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaLikesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaLikesEqualsParam) postModel() {}

func (p postWithPrismaLikesEqualsParam) likesField() {}

func (postWithPrismaLikesSetParam) settable()  {}
func (postWithPrismaLikesEqualsParam) equals() {}

type postWithPrismaLikesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaLikesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaLikesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaLikesEqualsUniqueParam) postModel()  {}
func (p postWithPrismaLikesEqualsUniqueParam) likesField() {}

func (postWithPrismaLikesEqualsUniqueParam) unique() {}
func (postWithPrismaLikesEqualsUniqueParam) equals() {}

type PostWithPrismaPublicationPostEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	publicationPostField()
}

type PostWithPrismaPublicationPostSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	publicationPostField()
}

type postWithPrismaPublicationPostSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPublicationPostSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPublicationPostSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPublicationPostSetParam) postModel() {}

func (p postWithPrismaPublicationPostSetParam) publicationPostField() {}

type PostWithPrismaPublicationPostWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	publicationPostField()
}

type postWithPrismaPublicationPostEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPublicationPostEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPublicationPostEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPublicationPostEqualsParam) postModel() {}

func (p postWithPrismaPublicationPostEqualsParam) publicationPostField() {}

func (postWithPrismaPublicationPostSetParam) settable()  {}
func (postWithPrismaPublicationPostEqualsParam) equals() {}

type postWithPrismaPublicationPostEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPublicationPostEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPublicationPostEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPublicationPostEqualsUniqueParam) postModel()            {}
func (p postWithPrismaPublicationPostEqualsUniqueParam) publicationPostField() {}

func (postWithPrismaPublicationPostEqualsUniqueParam) unique() {}
func (postWithPrismaPublicationPostEqualsUniqueParam) equals() {}

type PostWithPrismaPublishPostUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postModel()
	publishPostUUIDField()
}

type PostWithPrismaPublishPostUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	publishPostUUIDField()
}

type postWithPrismaPublishPostUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPublishPostUUIDSetParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPublishPostUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPublishPostUUIDSetParam) postModel() {}

func (p postWithPrismaPublishPostUUIDSetParam) publishPostUUIDField() {}

type PostWithPrismaPublishPostUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postModel()
	publishPostUUIDField()
}

type postWithPrismaPublishPostUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPublishPostUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPublishPostUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPublishPostUUIDEqualsParam) postModel() {}

func (p postWithPrismaPublishPostUUIDEqualsParam) publishPostUUIDField() {}

func (postWithPrismaPublishPostUUIDSetParam) settable()  {}
func (postWithPrismaPublishPostUUIDEqualsParam) equals() {}

type postWithPrismaPublishPostUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postWithPrismaPublishPostUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postWithPrismaPublishPostUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postWithPrismaPublishPostUUIDEqualsUniqueParam) postModel()            {}
func (p postWithPrismaPublishPostUUIDEqualsUniqueParam) publishPostUUIDField() {}

func (postWithPrismaPublishPostUUIDEqualsUniqueParam) unique() {}
func (postWithPrismaPublishPostUUIDEqualsUniqueParam) equals() {}

type postTagActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var postTagOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
	{Name: "tags"},
}

type PostTagRelationWith interface {
	getQuery() builder.Query
	with()
	postTagRelation()
}

type PostTagWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
}

type postTagDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagDefaultParam) field() builder.Field {
	return p.data
}

func (p postTagDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p postTagDefaultParam) postTagModel() {}

type PostTagOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
}

type postTagOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagOrderByParam) field() builder.Field {
	return p.data
}

func (p postTagOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p postTagOrderByParam) postTagModel() {}

type PostTagCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	isCursor()
}

type postTagCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagCursorParam) field() builder.Field {
	return p.data
}

func (p postTagCursorParam) isCursor() {}

func (p postTagCursorParam) getQuery() builder.Query {
	return p.query
}

func (p postTagCursorParam) postTagModel() {}

type PostTagParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	postTagModel()
}

type postTagParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p postTagParamUnique) postTagModel() {}

func (postTagParamUnique) unique() {}

func (p postTagParamUnique) field() builder.Field {
	return p.data
}

func (p postTagParamUnique) getQuery() builder.Query {
	return p.query
}

type PostTagEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postTagModel()
}

type postTagEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagEqualsParam) postTagModel() {}

func (postTagEqualsParam) equals() {}

func (p postTagEqualsParam) field() builder.Field {
	return p.data
}

func (p postTagEqualsParam) getQuery() builder.Query {
	return p.query
}

type PostTagEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	postTagModel()
}

type postTagEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagEqualsUniqueParam) postTagModel() {}

func (postTagEqualsUniqueParam) unique() {}
func (postTagEqualsUniqueParam) equals() {}

func (p postTagEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postTagEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type PostTagSetParam interface {
	field() builder.Field
	settable()
	postTagModel()
}

type postTagSetParam struct {
	data builder.Field
}

func (postTagSetParam) settable() {}

func (p postTagSetParam) field() builder.Field {
	return p.data
}

func (p postTagSetParam) postTagModel() {}

type PostTagWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postTagModel()
	idField()
}

type PostTagWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	idField()
}

type postTagWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaIDSetParam) postTagModel() {}

func (p postTagWithPrismaIDSetParam) idField() {}

type PostTagWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	idField()
}

type postTagWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaIDEqualsParam) postTagModel() {}

func (p postTagWithPrismaIDEqualsParam) idField() {}

func (postTagWithPrismaIDSetParam) settable()  {}
func (postTagWithPrismaIDEqualsParam) equals() {}

type postTagWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaIDEqualsUniqueParam) postTagModel() {}
func (p postTagWithPrismaIDEqualsUniqueParam) idField()      {}

func (postTagWithPrismaIDEqualsUniqueParam) unique() {}
func (postTagWithPrismaIDEqualsUniqueParam) equals() {}

type PostTagWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postTagModel()
	createdAtField()
}

type PostTagWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	createdAtField()
}

type postTagWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaCreatedAtSetParam) postTagModel() {}

func (p postTagWithPrismaCreatedAtSetParam) createdAtField() {}

type PostTagWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	createdAtField()
}

type postTagWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaCreatedAtEqualsParam) postTagModel() {}

func (p postTagWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (postTagWithPrismaCreatedAtSetParam) settable()  {}
func (postTagWithPrismaCreatedAtEqualsParam) equals() {}

type postTagWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaCreatedAtEqualsUniqueParam) postTagModel()   {}
func (p postTagWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (postTagWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (postTagWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type PostTagWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postTagModel()
	updatedAtField()
}

type PostTagWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	updatedAtField()
}

type postTagWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaUpdatedAtSetParam) postTagModel() {}

func (p postTagWithPrismaUpdatedAtSetParam) updatedAtField() {}

type PostTagWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	updatedAtField()
}

type postTagWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaUpdatedAtEqualsParam) postTagModel() {}

func (p postTagWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (postTagWithPrismaUpdatedAtSetParam) settable()  {}
func (postTagWithPrismaUpdatedAtEqualsParam) equals() {}

type postTagWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaUpdatedAtEqualsUniqueParam) postTagModel()   {}
func (p postTagWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (postTagWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (postTagWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type PostTagWithPrismaPostEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postTagModel()
	postField()
}

type PostTagWithPrismaPostSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	postField()
}

type postTagWithPrismaPostSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaPostSetParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaPostSetParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaPostSetParam) postTagModel() {}

func (p postTagWithPrismaPostSetParam) postField() {}

type PostTagWithPrismaPostWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	postField()
}

type postTagWithPrismaPostEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaPostEqualsParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaPostEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaPostEqualsParam) postTagModel() {}

func (p postTagWithPrismaPostEqualsParam) postField() {}

func (postTagWithPrismaPostSetParam) settable()  {}
func (postTagWithPrismaPostEqualsParam) equals() {}

type postTagWithPrismaPostEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaPostEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaPostEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaPostEqualsUniqueParam) postTagModel() {}
func (p postTagWithPrismaPostEqualsUniqueParam) postField()    {}

func (postTagWithPrismaPostEqualsUniqueParam) unique() {}
func (postTagWithPrismaPostEqualsUniqueParam) equals() {}

type PostTagWithPrismaTagsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postTagModel()
	tagsField()
}

type PostTagWithPrismaTagsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	tagsField()
}

type postTagWithPrismaTagsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaTagsSetParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaTagsSetParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaTagsSetParam) postTagModel() {}

func (p postTagWithPrismaTagsSetParam) tagsField() {}

type PostTagWithPrismaTagsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postTagModel()
	tagsField()
}

type postTagWithPrismaTagsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaTagsEqualsParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaTagsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaTagsEqualsParam) postTagModel() {}

func (p postTagWithPrismaTagsEqualsParam) tagsField() {}

func (postTagWithPrismaTagsSetParam) settable()  {}
func (postTagWithPrismaTagsEqualsParam) equals() {}

type postTagWithPrismaTagsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postTagWithPrismaTagsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postTagWithPrismaTagsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postTagWithPrismaTagsEqualsUniqueParam) postTagModel() {}
func (p postTagWithPrismaTagsEqualsUniqueParam) tagsField()    {}

func (postTagWithPrismaTagsEqualsUniqueParam) unique() {}
func (postTagWithPrismaTagsEqualsUniqueParam) equals() {}

type postCategoryActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var postCategoryOutput = []builder.Output{
	{Name: "id"},
	{Name: "name"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type PostCategoryRelationWith interface {
	getQuery() builder.Query
	with()
	postCategoryRelation()
}

type PostCategoryWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
}

type postCategoryDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryDefaultParam) field() builder.Field {
	return p.data
}

func (p postCategoryDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryDefaultParam) postCategoryModel() {}

type PostCategoryOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
}

type postCategoryOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryOrderByParam) field() builder.Field {
	return p.data
}

func (p postCategoryOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryOrderByParam) postCategoryModel() {}

type PostCategoryCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	isCursor()
}

type postCategoryCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryCursorParam) field() builder.Field {
	return p.data
}

func (p postCategoryCursorParam) isCursor() {}

func (p postCategoryCursorParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryCursorParam) postCategoryModel() {}

type PostCategoryParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	postCategoryModel()
}

type postCategoryParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryParamUnique) postCategoryModel() {}

func (postCategoryParamUnique) unique() {}

func (p postCategoryParamUnique) field() builder.Field {
	return p.data
}

func (p postCategoryParamUnique) getQuery() builder.Query {
	return p.query
}

type PostCategoryEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postCategoryModel()
}

type postCategoryEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryEqualsParam) postCategoryModel() {}

func (postCategoryEqualsParam) equals() {}

func (p postCategoryEqualsParam) field() builder.Field {
	return p.data
}

func (p postCategoryEqualsParam) getQuery() builder.Query {
	return p.query
}

type PostCategoryEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	postCategoryModel()
}

type postCategoryEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryEqualsUniqueParam) postCategoryModel() {}

func (postCategoryEqualsUniqueParam) unique() {}
func (postCategoryEqualsUniqueParam) equals() {}

func (p postCategoryEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postCategoryEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type PostCategorySetParam interface {
	field() builder.Field
	settable()
	postCategoryModel()
}

type postCategorySetParam struct {
	data builder.Field
}

func (postCategorySetParam) settable() {}

func (p postCategorySetParam) field() builder.Field {
	return p.data
}

func (p postCategorySetParam) postCategoryModel() {}

type PostCategoryWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postCategoryModel()
	idField()
}

type PostCategoryWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	idField()
}

type postCategoryWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaIDSetParam) postCategoryModel() {}

func (p postCategoryWithPrismaIDSetParam) idField() {}

type PostCategoryWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	idField()
}

type postCategoryWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaIDEqualsParam) postCategoryModel() {}

func (p postCategoryWithPrismaIDEqualsParam) idField() {}

func (postCategoryWithPrismaIDSetParam) settable()  {}
func (postCategoryWithPrismaIDEqualsParam) equals() {}

type postCategoryWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaIDEqualsUniqueParam) postCategoryModel() {}
func (p postCategoryWithPrismaIDEqualsUniqueParam) idField()           {}

func (postCategoryWithPrismaIDEqualsUniqueParam) unique() {}
func (postCategoryWithPrismaIDEqualsUniqueParam) equals() {}

type PostCategoryWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postCategoryModel()
	nameField()
}

type PostCategoryWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	nameField()
}

type postCategoryWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaNameSetParam) postCategoryModel() {}

func (p postCategoryWithPrismaNameSetParam) nameField() {}

type PostCategoryWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	nameField()
}

type postCategoryWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaNameEqualsParam) postCategoryModel() {}

func (p postCategoryWithPrismaNameEqualsParam) nameField() {}

func (postCategoryWithPrismaNameSetParam) settable()  {}
func (postCategoryWithPrismaNameEqualsParam) equals() {}

type postCategoryWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaNameEqualsUniqueParam) postCategoryModel() {}
func (p postCategoryWithPrismaNameEqualsUniqueParam) nameField()         {}

func (postCategoryWithPrismaNameEqualsUniqueParam) unique() {}
func (postCategoryWithPrismaNameEqualsUniqueParam) equals() {}

type PostCategoryWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postCategoryModel()
	createdAtField()
}

type PostCategoryWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	createdAtField()
}

type postCategoryWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaCreatedAtSetParam) postCategoryModel() {}

func (p postCategoryWithPrismaCreatedAtSetParam) createdAtField() {}

type PostCategoryWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	createdAtField()
}

type postCategoryWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaCreatedAtEqualsParam) postCategoryModel() {}

func (p postCategoryWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (postCategoryWithPrismaCreatedAtSetParam) settable()  {}
func (postCategoryWithPrismaCreatedAtEqualsParam) equals() {}

type postCategoryWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaCreatedAtEqualsUniqueParam) postCategoryModel() {}
func (p postCategoryWithPrismaCreatedAtEqualsUniqueParam) createdAtField()    {}

func (postCategoryWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (postCategoryWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type PostCategoryWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postCategoryModel()
	updatedAtField()
}

type PostCategoryWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	updatedAtField()
}

type postCategoryWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaUpdatedAtSetParam) postCategoryModel() {}

func (p postCategoryWithPrismaUpdatedAtSetParam) updatedAtField() {}

type PostCategoryWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	updatedAtField()
}

type postCategoryWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaUpdatedAtEqualsParam) postCategoryModel() {}

func (p postCategoryWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (postCategoryWithPrismaUpdatedAtSetParam) settable()  {}
func (postCategoryWithPrismaUpdatedAtEqualsParam) equals() {}

type postCategoryWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaUpdatedAtEqualsUniqueParam) postCategoryModel() {}
func (p postCategoryWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField()    {}

func (postCategoryWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (postCategoryWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type PostCategoryWithPrismaPostEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	postCategoryModel()
	postField()
}

type PostCategoryWithPrismaPostSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	postField()
}

type postCategoryWithPrismaPostSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaPostSetParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaPostSetParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaPostSetParam) postCategoryModel() {}

func (p postCategoryWithPrismaPostSetParam) postField() {}

type PostCategoryWithPrismaPostWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	postCategoryModel()
	postField()
}

type postCategoryWithPrismaPostEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaPostEqualsParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaPostEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaPostEqualsParam) postCategoryModel() {}

func (p postCategoryWithPrismaPostEqualsParam) postField() {}

func (postCategoryWithPrismaPostSetParam) settable()  {}
func (postCategoryWithPrismaPostEqualsParam) equals() {}

type postCategoryWithPrismaPostEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p postCategoryWithPrismaPostEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p postCategoryWithPrismaPostEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p postCategoryWithPrismaPostEqualsUniqueParam) postCategoryModel() {}
func (p postCategoryWithPrismaPostEqualsUniqueParam) postField()         {}

func (postCategoryWithPrismaPostEqualsUniqueParam) unique() {}
func (postCategoryWithPrismaPostEqualsUniqueParam) equals() {}

type commentActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var commentOutput = []builder.Output{
	{Name: "id"},
	{Name: "uuid"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
	{Name: "content"},
	{Name: "userUuid"},
	{Name: "postUuid"},
}

type CommentRelationWith interface {
	getQuery() builder.Query
	with()
	commentRelation()
}

type CommentWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
}

type commentDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentDefaultParam) field() builder.Field {
	return p.data
}

func (p commentDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p commentDefaultParam) commentModel() {}

type CommentOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
}

type commentOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentOrderByParam) field() builder.Field {
	return p.data
}

func (p commentOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p commentOrderByParam) commentModel() {}

type CommentCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	isCursor()
}

type commentCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentCursorParam) field() builder.Field {
	return p.data
}

func (p commentCursorParam) isCursor() {}

func (p commentCursorParam) getQuery() builder.Query {
	return p.query
}

func (p commentCursorParam) commentModel() {}

type CommentParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	commentModel()
}

type commentParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p commentParamUnique) commentModel() {}

func (commentParamUnique) unique() {}

func (p commentParamUnique) field() builder.Field {
	return p.data
}

func (p commentParamUnique) getQuery() builder.Query {
	return p.query
}

type CommentEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	commentModel()
}

type commentEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentEqualsParam) commentModel() {}

func (commentEqualsParam) equals() {}

func (p commentEqualsParam) field() builder.Field {
	return p.data
}

func (p commentEqualsParam) getQuery() builder.Query {
	return p.query
}

type CommentEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	commentModel()
}

type commentEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentEqualsUniqueParam) commentModel() {}

func (commentEqualsUniqueParam) unique() {}
func (commentEqualsUniqueParam) equals() {}

func (p commentEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p commentEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type CommentSetParam interface {
	field() builder.Field
	settable()
	commentModel()
}

type commentSetParam struct {
	data builder.Field
}

func (commentSetParam) settable() {}

func (p commentSetParam) field() builder.Field {
	return p.data
}

func (p commentSetParam) commentModel() {}

type CommentWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	commentModel()
	idField()
}

type CommentWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	idField()
}

type commentWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaIDSetParam) commentModel() {}

func (p commentWithPrismaIDSetParam) idField() {}

type CommentWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	idField()
}

type commentWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaIDEqualsParam) commentModel() {}

func (p commentWithPrismaIDEqualsParam) idField() {}

func (commentWithPrismaIDSetParam) settable()  {}
func (commentWithPrismaIDEqualsParam) equals() {}

type commentWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaIDEqualsUniqueParam) commentModel() {}
func (p commentWithPrismaIDEqualsUniqueParam) idField()      {}

func (commentWithPrismaIDEqualsUniqueParam) unique() {}
func (commentWithPrismaIDEqualsUniqueParam) equals() {}

type CommentWithPrismaUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	commentModel()
	uuidField()
}

type CommentWithPrismaUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	uuidField()
}

type commentWithPrismaUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUUIDSetParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUUIDSetParam) commentModel() {}

func (p commentWithPrismaUUIDSetParam) uuidField() {}

type CommentWithPrismaUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	uuidField()
}

type commentWithPrismaUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUUIDEqualsParam) commentModel() {}

func (p commentWithPrismaUUIDEqualsParam) uuidField() {}

func (commentWithPrismaUUIDSetParam) settable()  {}
func (commentWithPrismaUUIDEqualsParam) equals() {}

type commentWithPrismaUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUUIDEqualsUniqueParam) commentModel() {}
func (p commentWithPrismaUUIDEqualsUniqueParam) uuidField()    {}

func (commentWithPrismaUUIDEqualsUniqueParam) unique() {}
func (commentWithPrismaUUIDEqualsUniqueParam) equals() {}

type CommentWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	commentModel()
	createdAtField()
}

type CommentWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	createdAtField()
}

type commentWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaCreatedAtSetParam) commentModel() {}

func (p commentWithPrismaCreatedAtSetParam) createdAtField() {}

type CommentWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	createdAtField()
}

type commentWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaCreatedAtEqualsParam) commentModel() {}

func (p commentWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (commentWithPrismaCreatedAtSetParam) settable()  {}
func (commentWithPrismaCreatedAtEqualsParam) equals() {}

type commentWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaCreatedAtEqualsUniqueParam) commentModel()   {}
func (p commentWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (commentWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (commentWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type CommentWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	commentModel()
	updatedAtField()
}

type CommentWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	updatedAtField()
}

type commentWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUpdatedAtSetParam) commentModel() {}

func (p commentWithPrismaUpdatedAtSetParam) updatedAtField() {}

type CommentWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	updatedAtField()
}

type commentWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUpdatedAtEqualsParam) commentModel() {}

func (p commentWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (commentWithPrismaUpdatedAtSetParam) settable()  {}
func (commentWithPrismaUpdatedAtEqualsParam) equals() {}

type commentWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUpdatedAtEqualsUniqueParam) commentModel()   {}
func (p commentWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (commentWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (commentWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type CommentWithPrismaContentEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	commentModel()
	contentField()
}

type CommentWithPrismaContentSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	contentField()
}

type commentWithPrismaContentSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaContentSetParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaContentSetParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaContentSetParam) commentModel() {}

func (p commentWithPrismaContentSetParam) contentField() {}

type CommentWithPrismaContentWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	contentField()
}

type commentWithPrismaContentEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaContentEqualsParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaContentEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaContentEqualsParam) commentModel() {}

func (p commentWithPrismaContentEqualsParam) contentField() {}

func (commentWithPrismaContentSetParam) settable()  {}
func (commentWithPrismaContentEqualsParam) equals() {}

type commentWithPrismaContentEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaContentEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaContentEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaContentEqualsUniqueParam) commentModel() {}
func (p commentWithPrismaContentEqualsUniqueParam) contentField() {}

func (commentWithPrismaContentEqualsUniqueParam) unique() {}
func (commentWithPrismaContentEqualsUniqueParam) equals() {}

type CommentWithPrismaUserUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	commentModel()
	userUUIDField()
}

type CommentWithPrismaUserUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	userUUIDField()
}

type commentWithPrismaUserUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUserUUIDSetParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUserUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUserUUIDSetParam) commentModel() {}

func (p commentWithPrismaUserUUIDSetParam) userUUIDField() {}

type CommentWithPrismaUserUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	userUUIDField()
}

type commentWithPrismaUserUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUserUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUserUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUserUUIDEqualsParam) commentModel() {}

func (p commentWithPrismaUserUUIDEqualsParam) userUUIDField() {}

func (commentWithPrismaUserUUIDSetParam) settable()  {}
func (commentWithPrismaUserUUIDEqualsParam) equals() {}

type commentWithPrismaUserUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUserUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUserUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUserUUIDEqualsUniqueParam) commentModel()  {}
func (p commentWithPrismaUserUUIDEqualsUniqueParam) userUUIDField() {}

func (commentWithPrismaUserUUIDEqualsUniqueParam) unique() {}
func (commentWithPrismaUserUUIDEqualsUniqueParam) equals() {}

type CommentWithPrismaPostUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	commentModel()
	postUUIDField()
}

type CommentWithPrismaPostUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	postUUIDField()
}

type commentWithPrismaPostUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaPostUUIDSetParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaPostUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaPostUUIDSetParam) commentModel() {}

func (p commentWithPrismaPostUUIDSetParam) postUUIDField() {}

type CommentWithPrismaPostUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	postUUIDField()
}

type commentWithPrismaPostUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaPostUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaPostUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaPostUUIDEqualsParam) commentModel() {}

func (p commentWithPrismaPostUUIDEqualsParam) postUUIDField() {}

func (commentWithPrismaPostUUIDSetParam) settable()  {}
func (commentWithPrismaPostUUIDEqualsParam) equals() {}

type commentWithPrismaPostUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaPostUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaPostUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaPostUUIDEqualsUniqueParam) commentModel()  {}
func (p commentWithPrismaPostUUIDEqualsUniqueParam) postUUIDField() {}

func (commentWithPrismaPostUUIDEqualsUniqueParam) unique() {}
func (commentWithPrismaPostUUIDEqualsUniqueParam) equals() {}

type CommentWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	commentModel()
	userField()
}

type CommentWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	userField()
}

type commentWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUserSetParam) commentModel() {}

func (p commentWithPrismaUserSetParam) userField() {}

type CommentWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	userField()
}

type commentWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUserEqualsParam) commentModel() {}

func (p commentWithPrismaUserEqualsParam) userField() {}

func (commentWithPrismaUserSetParam) settable()  {}
func (commentWithPrismaUserEqualsParam) equals() {}

type commentWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaUserEqualsUniqueParam) commentModel() {}
func (p commentWithPrismaUserEqualsUniqueParam) userField()    {}

func (commentWithPrismaUserEqualsUniqueParam) unique() {}
func (commentWithPrismaUserEqualsUniqueParam) equals() {}

type CommentWithPrismaPostEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	commentModel()
	postField()
}

type CommentWithPrismaPostSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	postField()
}

type commentWithPrismaPostSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaPostSetParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaPostSetParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaPostSetParam) commentModel() {}

func (p commentWithPrismaPostSetParam) postField() {}

type CommentWithPrismaPostWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	commentModel()
	postField()
}

type commentWithPrismaPostEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaPostEqualsParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaPostEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaPostEqualsParam) commentModel() {}

func (p commentWithPrismaPostEqualsParam) postField() {}

func (commentWithPrismaPostSetParam) settable()  {}
func (commentWithPrismaPostEqualsParam) equals() {}

type commentWithPrismaPostEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p commentWithPrismaPostEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p commentWithPrismaPostEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p commentWithPrismaPostEqualsUniqueParam) commentModel() {}
func (p commentWithPrismaPostEqualsUniqueParam) postField()    {}

func (commentWithPrismaPostEqualsUniqueParam) unique() {}
func (commentWithPrismaPostEqualsUniqueParam) equals() {}

type likeActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var likeOutput = []builder.Output{
	{Name: "id"},
	{Name: "uuid"},
	{Name: "createdAt"},
	{Name: "userUuid"},
	{Name: "postUuid"},
}

type LikeRelationWith interface {
	getQuery() builder.Query
	with()
	likeRelation()
}

type LikeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
}

type likeDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeDefaultParam) field() builder.Field {
	return p.data
}

func (p likeDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p likeDefaultParam) likeModel() {}

type LikeOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
}

type likeOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeOrderByParam) field() builder.Field {
	return p.data
}

func (p likeOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p likeOrderByParam) likeModel() {}

type LikeCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	isCursor()
}

type likeCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeCursorParam) field() builder.Field {
	return p.data
}

func (p likeCursorParam) isCursor() {}

func (p likeCursorParam) getQuery() builder.Query {
	return p.query
}

func (p likeCursorParam) likeModel() {}

type LikeParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	likeModel()
}

type likeParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p likeParamUnique) likeModel() {}

func (likeParamUnique) unique() {}

func (p likeParamUnique) field() builder.Field {
	return p.data
}

func (p likeParamUnique) getQuery() builder.Query {
	return p.query
}

type LikeEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	likeModel()
}

type likeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeEqualsParam) likeModel() {}

func (likeEqualsParam) equals() {}

func (p likeEqualsParam) field() builder.Field {
	return p.data
}

func (p likeEqualsParam) getQuery() builder.Query {
	return p.query
}

type LikeEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	likeModel()
}

type likeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeEqualsUniqueParam) likeModel() {}

func (likeEqualsUniqueParam) unique() {}
func (likeEqualsUniqueParam) equals() {}

func (p likeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p likeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type LikeSetParam interface {
	field() builder.Field
	settable()
	likeModel()
}

type likeSetParam struct {
	data builder.Field
}

func (likeSetParam) settable() {}

func (p likeSetParam) field() builder.Field {
	return p.data
}

func (p likeSetParam) likeModel() {}

type LikeWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	likeModel()
	idField()
}

type LikeWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	idField()
}

type likeWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaIDSetParam) likeModel() {}

func (p likeWithPrismaIDSetParam) idField() {}

type LikeWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	idField()
}

type likeWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaIDEqualsParam) likeModel() {}

func (p likeWithPrismaIDEqualsParam) idField() {}

func (likeWithPrismaIDSetParam) settable()  {}
func (likeWithPrismaIDEqualsParam) equals() {}

type likeWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaIDEqualsUniqueParam) likeModel() {}
func (p likeWithPrismaIDEqualsUniqueParam) idField()   {}

func (likeWithPrismaIDEqualsUniqueParam) unique() {}
func (likeWithPrismaIDEqualsUniqueParam) equals() {}

type LikeWithPrismaUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	likeModel()
	uuidField()
}

type LikeWithPrismaUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	uuidField()
}

type likeWithPrismaUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaUUIDSetParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaUUIDSetParam) likeModel() {}

func (p likeWithPrismaUUIDSetParam) uuidField() {}

type LikeWithPrismaUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	uuidField()
}

type likeWithPrismaUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaUUIDEqualsParam) likeModel() {}

func (p likeWithPrismaUUIDEqualsParam) uuidField() {}

func (likeWithPrismaUUIDSetParam) settable()  {}
func (likeWithPrismaUUIDEqualsParam) equals() {}

type likeWithPrismaUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaUUIDEqualsUniqueParam) likeModel() {}
func (p likeWithPrismaUUIDEqualsUniqueParam) uuidField() {}

func (likeWithPrismaUUIDEqualsUniqueParam) unique() {}
func (likeWithPrismaUUIDEqualsUniqueParam) equals() {}

type LikeWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	likeModel()
	createdAtField()
}

type LikeWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	createdAtField()
}

type likeWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaCreatedAtSetParam) likeModel() {}

func (p likeWithPrismaCreatedAtSetParam) createdAtField() {}

type LikeWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	createdAtField()
}

type likeWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaCreatedAtEqualsParam) likeModel() {}

func (p likeWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (likeWithPrismaCreatedAtSetParam) settable()  {}
func (likeWithPrismaCreatedAtEqualsParam) equals() {}

type likeWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaCreatedAtEqualsUniqueParam) likeModel()      {}
func (p likeWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (likeWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (likeWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type LikeWithPrismaUserUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	likeModel()
	userUUIDField()
}

type LikeWithPrismaUserUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	userUUIDField()
}

type likeWithPrismaUserUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaUserUUIDSetParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaUserUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaUserUUIDSetParam) likeModel() {}

func (p likeWithPrismaUserUUIDSetParam) userUUIDField() {}

type LikeWithPrismaUserUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	userUUIDField()
}

type likeWithPrismaUserUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaUserUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaUserUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaUserUUIDEqualsParam) likeModel() {}

func (p likeWithPrismaUserUUIDEqualsParam) userUUIDField() {}

func (likeWithPrismaUserUUIDSetParam) settable()  {}
func (likeWithPrismaUserUUIDEqualsParam) equals() {}

type likeWithPrismaUserUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaUserUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaUserUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaUserUUIDEqualsUniqueParam) likeModel()     {}
func (p likeWithPrismaUserUUIDEqualsUniqueParam) userUUIDField() {}

func (likeWithPrismaUserUUIDEqualsUniqueParam) unique() {}
func (likeWithPrismaUserUUIDEqualsUniqueParam) equals() {}

type LikeWithPrismaPostUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	likeModel()
	postUUIDField()
}

type LikeWithPrismaPostUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	postUUIDField()
}

type likeWithPrismaPostUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaPostUUIDSetParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaPostUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaPostUUIDSetParam) likeModel() {}

func (p likeWithPrismaPostUUIDSetParam) postUUIDField() {}

type LikeWithPrismaPostUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	postUUIDField()
}

type likeWithPrismaPostUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaPostUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaPostUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaPostUUIDEqualsParam) likeModel() {}

func (p likeWithPrismaPostUUIDEqualsParam) postUUIDField() {}

func (likeWithPrismaPostUUIDSetParam) settable()  {}
func (likeWithPrismaPostUUIDEqualsParam) equals() {}

type likeWithPrismaPostUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaPostUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaPostUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaPostUUIDEqualsUniqueParam) likeModel()     {}
func (p likeWithPrismaPostUUIDEqualsUniqueParam) postUUIDField() {}

func (likeWithPrismaPostUUIDEqualsUniqueParam) unique() {}
func (likeWithPrismaPostUUIDEqualsUniqueParam) equals() {}

type LikeWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	likeModel()
	userField()
}

type LikeWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	userField()
}

type likeWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaUserSetParam) likeModel() {}

func (p likeWithPrismaUserSetParam) userField() {}

type LikeWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	userField()
}

type likeWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaUserEqualsParam) likeModel() {}

func (p likeWithPrismaUserEqualsParam) userField() {}

func (likeWithPrismaUserSetParam) settable()  {}
func (likeWithPrismaUserEqualsParam) equals() {}

type likeWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaUserEqualsUniqueParam) likeModel() {}
func (p likeWithPrismaUserEqualsUniqueParam) userField() {}

func (likeWithPrismaUserEqualsUniqueParam) unique() {}
func (likeWithPrismaUserEqualsUniqueParam) equals() {}

type LikeWithPrismaPostEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	likeModel()
	postField()
}

type LikeWithPrismaPostSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	postField()
}

type likeWithPrismaPostSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaPostSetParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaPostSetParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaPostSetParam) likeModel() {}

func (p likeWithPrismaPostSetParam) postField() {}

type LikeWithPrismaPostWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	likeModel()
	postField()
}

type likeWithPrismaPostEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaPostEqualsParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaPostEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaPostEqualsParam) likeModel() {}

func (p likeWithPrismaPostEqualsParam) postField() {}

func (likeWithPrismaPostSetParam) settable()  {}
func (likeWithPrismaPostEqualsParam) equals() {}

type likeWithPrismaPostEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p likeWithPrismaPostEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p likeWithPrismaPostEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p likeWithPrismaPostEqualsUniqueParam) likeModel() {}
func (p likeWithPrismaPostEqualsUniqueParam) postField() {}

func (likeWithPrismaPostEqualsUniqueParam) unique() {}
func (likeWithPrismaPostEqualsUniqueParam) equals() {}

type userFollowerActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userFollowerOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
	{Name: "followerUuid"},
	{Name: "followeeUuid"},
}

type UserFollowerRelationWith interface {
	getQuery() builder.Query
	with()
	userFollowerRelation()
}

type UserFollowerWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
}

type userFollowerDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerDefaultParam) field() builder.Field {
	return p.data
}

func (p userFollowerDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerDefaultParam) userFollowerModel() {}

type UserFollowerOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
}

type userFollowerOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerOrderByParam) field() builder.Field {
	return p.data
}

func (p userFollowerOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerOrderByParam) userFollowerModel() {}

type UserFollowerCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	isCursor()
}

type userFollowerCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerCursorParam) field() builder.Field {
	return p.data
}

func (p userFollowerCursorParam) isCursor() {}

func (p userFollowerCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerCursorParam) userFollowerModel() {}

type UserFollowerParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userFollowerModel()
}

type userFollowerParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerParamUnique) userFollowerModel() {}

func (userFollowerParamUnique) unique() {}

func (p userFollowerParamUnique) field() builder.Field {
	return p.data
}

func (p userFollowerParamUnique) getQuery() builder.Query {
	return p.query
}

type UserFollowerEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userFollowerModel()
}

type userFollowerEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerEqualsParam) userFollowerModel() {}

func (userFollowerEqualsParam) equals() {}

func (p userFollowerEqualsParam) field() builder.Field {
	return p.data
}

func (p userFollowerEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserFollowerEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userFollowerModel()
}

type userFollowerEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerEqualsUniqueParam) userFollowerModel() {}

func (userFollowerEqualsUniqueParam) unique() {}
func (userFollowerEqualsUniqueParam) equals() {}

func (p userFollowerEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userFollowerEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserFollowerSetParam interface {
	field() builder.Field
	settable()
	userFollowerModel()
}

type userFollowerSetParam struct {
	data builder.Field
}

func (userFollowerSetParam) settable() {}

func (p userFollowerSetParam) field() builder.Field {
	return p.data
}

func (p userFollowerSetParam) userFollowerModel() {}

type UserFollowerWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userFollowerModel()
	idField()
}

type UserFollowerWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	idField()
}

type userFollowerWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaIDSetParam) userFollowerModel() {}

func (p userFollowerWithPrismaIDSetParam) idField() {}

type UserFollowerWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	idField()
}

type userFollowerWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaIDEqualsParam) userFollowerModel() {}

func (p userFollowerWithPrismaIDEqualsParam) idField() {}

func (userFollowerWithPrismaIDSetParam) settable()  {}
func (userFollowerWithPrismaIDEqualsParam) equals() {}

type userFollowerWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaIDEqualsUniqueParam) userFollowerModel() {}
func (p userFollowerWithPrismaIDEqualsUniqueParam) idField()           {}

func (userFollowerWithPrismaIDEqualsUniqueParam) unique() {}
func (userFollowerWithPrismaIDEqualsUniqueParam) equals() {}

type UserFollowerWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userFollowerModel()
	createdAtField()
}

type UserFollowerWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	createdAtField()
}

type userFollowerWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaCreatedAtSetParam) userFollowerModel() {}

func (p userFollowerWithPrismaCreatedAtSetParam) createdAtField() {}

type UserFollowerWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	createdAtField()
}

type userFollowerWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaCreatedAtEqualsParam) userFollowerModel() {}

func (p userFollowerWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (userFollowerWithPrismaCreatedAtSetParam) settable()  {}
func (userFollowerWithPrismaCreatedAtEqualsParam) equals() {}

type userFollowerWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaCreatedAtEqualsUniqueParam) userFollowerModel() {}
func (p userFollowerWithPrismaCreatedAtEqualsUniqueParam) createdAtField()    {}

func (userFollowerWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (userFollowerWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type UserFollowerWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userFollowerModel()
	updatedAtField()
}

type UserFollowerWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	updatedAtField()
}

type userFollowerWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaUpdatedAtSetParam) userFollowerModel() {}

func (p userFollowerWithPrismaUpdatedAtSetParam) updatedAtField() {}

type UserFollowerWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	updatedAtField()
}

type userFollowerWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaUpdatedAtEqualsParam) userFollowerModel() {}

func (p userFollowerWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (userFollowerWithPrismaUpdatedAtSetParam) settable()  {}
func (userFollowerWithPrismaUpdatedAtEqualsParam) equals() {}

type userFollowerWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaUpdatedAtEqualsUniqueParam) userFollowerModel() {}
func (p userFollowerWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField()    {}

func (userFollowerWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (userFollowerWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type UserFollowerWithPrismaFollowerEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userFollowerModel()
	followerField()
}

type UserFollowerWithPrismaFollowerSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	followerField()
}

type userFollowerWithPrismaFollowerSetParam struct {
	data  builder.Field
	query builder.Query
}

// followeeField implements UserFollowerWithPrismaFolloweeSetParam.
func (p userFollowerWithPrismaFollowerSetParam) followeeField() {
	panic("unimplemented")
}

func (p userFollowerWithPrismaFollowerSetParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFollowerSetParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFollowerSetParam) userFollowerModel() {}

func (p userFollowerWithPrismaFollowerSetParam) followerField() {}

type UserFollowerWithPrismaFollowerWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	followerField()
}

type userFollowerWithPrismaFollowerEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaFollowerEqualsParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFollowerEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFollowerEqualsParam) userFollowerModel() {}

func (p userFollowerWithPrismaFollowerEqualsParam) followerField() {}

func (userFollowerWithPrismaFollowerSetParam) settable()  {}
func (userFollowerWithPrismaFollowerEqualsParam) equals() {}

type userFollowerWithPrismaFollowerEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaFollowerEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFollowerEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFollowerEqualsUniqueParam) userFollowerModel() {}
func (p userFollowerWithPrismaFollowerEqualsUniqueParam) followerField()     {}

func (userFollowerWithPrismaFollowerEqualsUniqueParam) unique() {}
func (userFollowerWithPrismaFollowerEqualsUniqueParam) equals() {}

type UserFollowerWithPrismaFolloweeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userFollowerModel()
	followeeField()
}

type UserFollowerWithPrismaFolloweeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	followeeField()
}

type userFollowerWithPrismaFolloweeSetParam struct {
	data  builder.Field
	query builder.Query
}

// followerField implements UserFollowerWithPrismaFollowerSetParam.
func (p userFollowerWithPrismaFolloweeSetParam) followerField() {
	panic("unimplemented")
}

func (p userFollowerWithPrismaFolloweeSetParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFolloweeSetParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFolloweeSetParam) userFollowerModel() {}

func (p userFollowerWithPrismaFolloweeSetParam) followeeField() {}

type UserFollowerWithPrismaFolloweeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	followeeField()
}

type userFollowerWithPrismaFolloweeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaFolloweeEqualsParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFolloweeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFolloweeEqualsParam) userFollowerModel() {}

func (p userFollowerWithPrismaFolloweeEqualsParam) followeeField() {}

func (userFollowerWithPrismaFolloweeSetParam) settable()  {}
func (userFollowerWithPrismaFolloweeEqualsParam) equals() {}

type userFollowerWithPrismaFolloweeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaFolloweeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFolloweeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFolloweeEqualsUniqueParam) userFollowerModel() {}
func (p userFollowerWithPrismaFolloweeEqualsUniqueParam) followeeField()     {}

func (userFollowerWithPrismaFolloweeEqualsUniqueParam) unique() {}
func (userFollowerWithPrismaFolloweeEqualsUniqueParam) equals() {}

type UserFollowerWithPrismaFollowerUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userFollowerModel()
	followerUUIDField()
}

type UserFollowerWithPrismaFollowerUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	followerUUIDField()
}

type userFollowerWithPrismaFollowerUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaFollowerUUIDSetParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFollowerUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFollowerUUIDSetParam) userFollowerModel() {}

func (p userFollowerWithPrismaFollowerUUIDSetParam) followerUUIDField() {}

type UserFollowerWithPrismaFollowerUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	followerUUIDField()
}

type userFollowerWithPrismaFollowerUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaFollowerUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFollowerUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFollowerUUIDEqualsParam) userFollowerModel() {}

func (p userFollowerWithPrismaFollowerUUIDEqualsParam) followerUUIDField() {}

func (userFollowerWithPrismaFollowerUUIDSetParam) settable()  {}
func (userFollowerWithPrismaFollowerUUIDEqualsParam) equals() {}

type userFollowerWithPrismaFollowerUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaFollowerUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFollowerUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFollowerUUIDEqualsUniqueParam) userFollowerModel() {}
func (p userFollowerWithPrismaFollowerUUIDEqualsUniqueParam) followerUUIDField() {}

func (userFollowerWithPrismaFollowerUUIDEqualsUniqueParam) unique() {}
func (userFollowerWithPrismaFollowerUUIDEqualsUniqueParam) equals() {}

type UserFollowerWithPrismaFolloweeUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userFollowerModel()
	followeeUUIDField()
}

type UserFollowerWithPrismaFolloweeUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	followeeUUIDField()
}

type userFollowerWithPrismaFolloweeUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaFolloweeUUIDSetParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFolloweeUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFolloweeUUIDSetParam) userFollowerModel() {}

func (p userFollowerWithPrismaFolloweeUUIDSetParam) followeeUUIDField() {}

type UserFollowerWithPrismaFolloweeUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userFollowerModel()
	followeeUUIDField()
}

type userFollowerWithPrismaFolloweeUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaFolloweeUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFolloweeUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFolloweeUUIDEqualsParam) userFollowerModel() {}

func (p userFollowerWithPrismaFolloweeUUIDEqualsParam) followeeUUIDField() {}

func (userFollowerWithPrismaFolloweeUUIDSetParam) settable()  {}
func (userFollowerWithPrismaFolloweeUUIDEqualsParam) equals() {}

type userFollowerWithPrismaFolloweeUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userFollowerWithPrismaFolloweeUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userFollowerWithPrismaFolloweeUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userFollowerWithPrismaFolloweeUUIDEqualsUniqueParam) userFollowerModel() {}
func (p userFollowerWithPrismaFolloweeUUIDEqualsUniqueParam) followeeUUIDField() {}

func (userFollowerWithPrismaFolloweeUUIDEqualsUniqueParam) unique() {}
func (userFollowerWithPrismaFolloweeUUIDEqualsUniqueParam) equals() {}

type publicationPostActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var publicationPostOutput = []builder.Output{
	{Name: "id"},
	{Name: "uuid"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
	{Name: "postUuid"},
	{Name: "userUuid"},
}

type PublicationPostRelationWith interface {
	getQuery() builder.Query
	with()
	publicationPostRelation()
}

type PublicationPostWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
}

type publicationPostDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostDefaultParam) field() builder.Field {
	return p.data
}

func (p publicationPostDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostDefaultParam) publicationPostModel() {}

type PublicationPostOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
}

type publicationPostOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostOrderByParam) field() builder.Field {
	return p.data
}

func (p publicationPostOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostOrderByParam) publicationPostModel() {}

type PublicationPostCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	isCursor()
}

type publicationPostCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostCursorParam) field() builder.Field {
	return p.data
}

func (p publicationPostCursorParam) isCursor() {}

func (p publicationPostCursorParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostCursorParam) publicationPostModel() {}

type PublicationPostParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	publicationPostModel()
}

type publicationPostParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostParamUnique) publicationPostModel() {}

func (publicationPostParamUnique) unique() {}

func (p publicationPostParamUnique) field() builder.Field {
	return p.data
}

func (p publicationPostParamUnique) getQuery() builder.Query {
	return p.query
}

type PublicationPostEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicationPostModel()
}

type publicationPostEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostEqualsParam) publicationPostModel() {}

func (publicationPostEqualsParam) equals() {}

func (p publicationPostEqualsParam) field() builder.Field {
	return p.data
}

func (p publicationPostEqualsParam) getQuery() builder.Query {
	return p.query
}

type PublicationPostEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	publicationPostModel()
}

type publicationPostEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostEqualsUniqueParam) publicationPostModel() {}

func (publicationPostEqualsUniqueParam) unique() {}
func (publicationPostEqualsUniqueParam) equals() {}

func (p publicationPostEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicationPostEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type PublicationPostSetParam interface {
	field() builder.Field
	settable()
	publicationPostModel()
}

type publicationPostSetParam struct {
	data builder.Field
}

func (publicationPostSetParam) settable() {}

func (p publicationPostSetParam) field() builder.Field {
	return p.data
}

func (p publicationPostSetParam) publicationPostModel() {}

type PublicationPostWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicationPostModel()
	idField()
}

type PublicationPostWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	idField()
}

type publicationPostWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaIDSetParam) publicationPostModel() {}

func (p publicationPostWithPrismaIDSetParam) idField() {}

type PublicationPostWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	idField()
}

type publicationPostWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaIDEqualsParam) publicationPostModel() {}

func (p publicationPostWithPrismaIDEqualsParam) idField() {}

func (publicationPostWithPrismaIDSetParam) settable()  {}
func (publicationPostWithPrismaIDEqualsParam) equals() {}

type publicationPostWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaIDEqualsUniqueParam) publicationPostModel() {}
func (p publicationPostWithPrismaIDEqualsUniqueParam) idField()              {}

func (publicationPostWithPrismaIDEqualsUniqueParam) unique() {}
func (publicationPostWithPrismaIDEqualsUniqueParam) equals() {}

type PublicationPostWithPrismaUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicationPostModel()
	uuidField()
}

type PublicationPostWithPrismaUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	uuidField()
}

type publicationPostWithPrismaUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUUIDSetParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUUIDSetParam) publicationPostModel() {}

func (p publicationPostWithPrismaUUIDSetParam) uuidField() {}

type PublicationPostWithPrismaUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	uuidField()
}

type publicationPostWithPrismaUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUUIDEqualsParam) publicationPostModel() {}

func (p publicationPostWithPrismaUUIDEqualsParam) uuidField() {}

func (publicationPostWithPrismaUUIDSetParam) settable()  {}
func (publicationPostWithPrismaUUIDEqualsParam) equals() {}

type publicationPostWithPrismaUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUUIDEqualsUniqueParam) publicationPostModel() {}
func (p publicationPostWithPrismaUUIDEqualsUniqueParam) uuidField()            {}

func (publicationPostWithPrismaUUIDEqualsUniqueParam) unique() {}
func (publicationPostWithPrismaUUIDEqualsUniqueParam) equals() {}

type PublicationPostWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicationPostModel()
	createdAtField()
}

type PublicationPostWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	createdAtField()
}

type publicationPostWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaCreatedAtSetParam) publicationPostModel() {}

func (p publicationPostWithPrismaCreatedAtSetParam) createdAtField() {}

type PublicationPostWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	createdAtField()
}

type publicationPostWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaCreatedAtEqualsParam) publicationPostModel() {}

func (p publicationPostWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (publicationPostWithPrismaCreatedAtSetParam) settable()  {}
func (publicationPostWithPrismaCreatedAtEqualsParam) equals() {}

type publicationPostWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaCreatedAtEqualsUniqueParam) publicationPostModel() {}
func (p publicationPostWithPrismaCreatedAtEqualsUniqueParam) createdAtField()       {}

func (publicationPostWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (publicationPostWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type PublicationPostWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicationPostModel()
	updatedAtField()
}

type PublicationPostWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	updatedAtField()
}

type publicationPostWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUpdatedAtSetParam) publicationPostModel() {}

func (p publicationPostWithPrismaUpdatedAtSetParam) updatedAtField() {}

type PublicationPostWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	updatedAtField()
}

type publicationPostWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUpdatedAtEqualsParam) publicationPostModel() {}

func (p publicationPostWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (publicationPostWithPrismaUpdatedAtSetParam) settable()  {}
func (publicationPostWithPrismaUpdatedAtEqualsParam) equals() {}

type publicationPostWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUpdatedAtEqualsUniqueParam) publicationPostModel() {}
func (p publicationPostWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField()       {}

func (publicationPostWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (publicationPostWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type PublicationPostWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicationPostModel()
	userField()
}

type PublicationPostWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	userField()
}

type publicationPostWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUserSetParam) publicationPostModel() {}

func (p publicationPostWithPrismaUserSetParam) userField() {}

type PublicationPostWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	userField()
}

type publicationPostWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUserEqualsParam) publicationPostModel() {}

func (p publicationPostWithPrismaUserEqualsParam) userField() {}

func (publicationPostWithPrismaUserSetParam) settable()  {}
func (publicationPostWithPrismaUserEqualsParam) equals() {}

type publicationPostWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUserEqualsUniqueParam) publicationPostModel() {}
func (p publicationPostWithPrismaUserEqualsUniqueParam) userField()            {}

func (publicationPostWithPrismaUserEqualsUniqueParam) unique() {}
func (publicationPostWithPrismaUserEqualsUniqueParam) equals() {}

type PublicationPostWithPrismaPostEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicationPostModel()
	postField()
}

type PublicationPostWithPrismaPostSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	postField()
}

type publicationPostWithPrismaPostSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaPostSetParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaPostSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaPostSetParam) publicationPostModel() {}

func (p publicationPostWithPrismaPostSetParam) postField() {}

type PublicationPostWithPrismaPostWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	postField()
}

type publicationPostWithPrismaPostEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaPostEqualsParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaPostEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaPostEqualsParam) publicationPostModel() {}

func (p publicationPostWithPrismaPostEqualsParam) postField() {}

func (publicationPostWithPrismaPostSetParam) settable()  {}
func (publicationPostWithPrismaPostEqualsParam) equals() {}

type publicationPostWithPrismaPostEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaPostEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaPostEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaPostEqualsUniqueParam) publicationPostModel() {}
func (p publicationPostWithPrismaPostEqualsUniqueParam) postField()            {}

func (publicationPostWithPrismaPostEqualsUniqueParam) unique() {}
func (publicationPostWithPrismaPostEqualsUniqueParam) equals() {}

type PublicationPostWithPrismaPostUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicationPostModel()
	postUUIDField()
}

type PublicationPostWithPrismaPostUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	postUUIDField()
}

type publicationPostWithPrismaPostUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaPostUUIDSetParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaPostUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaPostUUIDSetParam) publicationPostModel() {}

func (p publicationPostWithPrismaPostUUIDSetParam) postUUIDField() {}

type PublicationPostWithPrismaPostUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	postUUIDField()
}

type publicationPostWithPrismaPostUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaPostUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaPostUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaPostUUIDEqualsParam) publicationPostModel() {}

func (p publicationPostWithPrismaPostUUIDEqualsParam) postUUIDField() {}

func (publicationPostWithPrismaPostUUIDSetParam) settable()  {}
func (publicationPostWithPrismaPostUUIDEqualsParam) equals() {}

type publicationPostWithPrismaPostUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaPostUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaPostUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaPostUUIDEqualsUniqueParam) publicationPostModel() {}
func (p publicationPostWithPrismaPostUUIDEqualsUniqueParam) postUUIDField()        {}

func (publicationPostWithPrismaPostUUIDEqualsUniqueParam) unique() {}
func (publicationPostWithPrismaPostUUIDEqualsUniqueParam) equals() {}

type PublicationPostWithPrismaUserUUIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	publicationPostModel()
	userUUIDField()
}

type PublicationPostWithPrismaUserUUIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	userUUIDField()
}

type publicationPostWithPrismaUserUUIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUserUUIDSetParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUserUUIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUserUUIDSetParam) publicationPostModel() {}

func (p publicationPostWithPrismaUserUUIDSetParam) userUUIDField() {}

type PublicationPostWithPrismaUserUUIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	publicationPostModel()
	userUUIDField()
}

type publicationPostWithPrismaUserUUIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUserUUIDEqualsParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUserUUIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUserUUIDEqualsParam) publicationPostModel() {}

func (p publicationPostWithPrismaUserUUIDEqualsParam) userUUIDField() {}

func (publicationPostWithPrismaUserUUIDSetParam) settable()  {}
func (publicationPostWithPrismaUserUUIDEqualsParam) equals() {}

type publicationPostWithPrismaUserUUIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p publicationPostWithPrismaUserUUIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p publicationPostWithPrismaUserUUIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p publicationPostWithPrismaUserUUIDEqualsUniqueParam) publicationPostModel() {}
func (p publicationPostWithPrismaUserUUIDEqualsUniqueParam) userUUIDField()        {}

func (publicationPostWithPrismaUserUUIDEqualsUniqueParam) unique() {}
func (publicationPostWithPrismaUserUUIDEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single user.
func (r userActions) CreateOne(
	_email UserWithPrismaEmailSetParam,
	_password UserWithPrismaPasswordSetParam,

	optional ...UserSetParam,
) userCreateOne {
	var v userCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var fields []builder.Field

	fields = append(fields, _email.field())
	fields = append(fields, _password.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userCreateOne) With(params ...UserRelationWith) userCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userCreateOne struct {
	query builder.Query
}

func (p userCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userCreateOne) userModel() {}

func (r userCreateOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userCreateOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single userProfile.
func (r userProfileActions) CreateOne(
	_firstName UserProfileWithPrismaFirstNameSetParam,
	_lastName UserProfileWithPrismaLastNameSetParam,
	_bio UserProfileWithPrismaBioSetParam,
	_profilePicture UserProfileWithPrismaProfilePictureSetParam,
	_user UserProfileWithPrismaUserSetParam,

	optional ...UserProfileSetParam,
) userProfileCreateOne {
	var v userProfileCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "UserProfile"
	v.query.Outputs = userProfileOutput

	var fields []builder.Field

	fields = append(fields, _firstName.field())
	fields = append(fields, _lastName.field())
	fields = append(fields, _bio.field())
	fields = append(fields, _profilePicture.field())
	fields = append(fields, _user.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userProfileCreateOne) With(params ...UserProfileRelationWith) userProfileCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userProfileCreateOne struct {
	query builder.Query
}

func (p userProfileCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userProfileCreateOne) userProfileModel() {}

func (r userProfileCreateOne) Exec(ctx context.Context) (*UserProfileModel, error) {
	var v UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userProfileCreateOne) Tx() UserProfileUniqueTxResult {
	v := newUserProfileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single post.
func (r postActions) CreateOne(
	_title PostWithPrismaTitleSetParam,
	_source PostWithPrismaSourceSetParam,
	_srcType PostWithPrismaSrcTypeSetParam,
	_published PostWithPrismaPublishedSetParam,
	_user PostWithPrismaUserSetParam,
	_tags PostWithPrismaTagsSetParam,
	_category PostWithPrismaCategorySetParam,

	optional ...PostSetParam,
) postCreateOne {
	var v postCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Post"
	v.query.Outputs = postOutput

	var fields []builder.Field

	fields = append(fields, _title.field())
	fields = append(fields, _source.field())
	fields = append(fields, _srcType.field())
	fields = append(fields, _published.field())
	fields = append(fields, _user.field())
	fields = append(fields, _tags.field())
	fields = append(fields, _category.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r postCreateOne) With(params ...PostRelationWith) postCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type postCreateOne struct {
	query builder.Query
}

func (p postCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p postCreateOne) postModel() {}

func (r postCreateOne) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCreateOne) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single postTag.
func (r postTagActions) CreateOne(

	optional ...PostTagSetParam,
) postTagCreateOne {
	var v postTagCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "PostTag"
	v.query.Outputs = postTagOutput

	var fields []builder.Field

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r postTagCreateOne) With(params ...PostTagRelationWith) postTagCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type postTagCreateOne struct {
	query builder.Query
}

func (p postTagCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p postTagCreateOne) postTagModel() {}

func (r postTagCreateOne) Exec(ctx context.Context) (*PostTagModel, error) {
	var v PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postTagCreateOne) Tx() PostTagUniqueTxResult {
	v := newPostTagUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single postCategory.
func (r postCategoryActions) CreateOne(
	_name PostCategoryWithPrismaNameSetParam,

	optional ...PostCategorySetParam,
) postCategoryCreateOne {
	var v postCategoryCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "PostCategory"
	v.query.Outputs = postCategoryOutput

	var fields []builder.Field

	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r postCategoryCreateOne) With(params ...PostCategoryRelationWith) postCategoryCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type postCategoryCreateOne struct {
	query builder.Query
}

func (p postCategoryCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p postCategoryCreateOne) postCategoryModel() {}

func (r postCategoryCreateOne) Exec(ctx context.Context) (*PostCategoryModel, error) {
	var v PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCategoryCreateOne) Tx() PostCategoryUniqueTxResult {
	v := newPostCategoryUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single comment.
func (r commentActions) CreateOne(
	_content CommentWithPrismaContentSetParam,
	_user CommentWithPrismaUserSetParam,
	_post CommentWithPrismaPostSetParam,

	optional ...CommentSetParam,
) commentCreateOne {
	var v commentCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Comment"
	v.query.Outputs = commentOutput

	var fields []builder.Field

	fields = append(fields, _content.field())
	fields = append(fields, _user.field())
	fields = append(fields, _post.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r commentCreateOne) With(params ...CommentRelationWith) commentCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type commentCreateOne struct {
	query builder.Query
}

func (p commentCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p commentCreateOne) commentModel() {}

func (r commentCreateOne) Exec(ctx context.Context) (*CommentModel, error) {
	var v CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentCreateOne) Tx() CommentUniqueTxResult {
	v := newCommentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single like.
func (r likeActions) CreateOne(
	_user LikeWithPrismaUserSetParam,
	_post LikeWithPrismaPostSetParam,

	optional ...LikeSetParam,
) likeCreateOne {
	var v likeCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Like"
	v.query.Outputs = likeOutput

	var fields []builder.Field

	fields = append(fields, _user.field())
	fields = append(fields, _post.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r likeCreateOne) With(params ...LikeRelationWith) likeCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type likeCreateOne struct {
	query builder.Query
}

func (p likeCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p likeCreateOne) likeModel() {}

func (r likeCreateOne) Exec(ctx context.Context) (*LikeModel, error) {
	var v LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeCreateOne) Tx() LikeUniqueTxResult {
	v := newLikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single userFollower.
func (r userFollowerActions) CreateOne(
	_follower UserFollowerWithPrismaFollowerSetParam,
	_followee UserFollowerWithPrismaFolloweeSetParam,

	optional ...UserFollowerSetParam,
) userFollowerCreateOne {
	var v userFollowerCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "UserFollower"
	v.query.Outputs = userFollowerOutput

	var fields []builder.Field

	fields = append(fields, _follower.field())
	fields = append(fields, _followee.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userFollowerCreateOne) With(params ...UserFollowerRelationWith) userFollowerCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userFollowerCreateOne struct {
	query builder.Query
}

func (p userFollowerCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userFollowerCreateOne) userFollowerModel() {}

func (r userFollowerCreateOne) Exec(ctx context.Context) (*UserFollowerModel, error) {
	var v UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerCreateOne) Tx() UserFollowerUniqueTxResult {
	v := newUserFollowerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single publicationPost.
func (r publicationPostActions) CreateOne(
	_user PublicationPostWithPrismaUserSetParam,
	_post PublicationPostWithPrismaPostSetParam,

	optional ...PublicationPostSetParam,
) publicationPostCreateOne {
	var v publicationPostCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "PublicationPost"
	v.query.Outputs = publicationPostOutput

	var fields []builder.Field

	fields = append(fields, _user.field())
	fields = append(fields, _post.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r publicationPostCreateOne) With(params ...PublicationPostRelationWith) publicationPostCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type publicationPostCreateOne struct {
	query builder.Query
}

func (p publicationPostCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p publicationPostCreateOne) publicationPostModel() {}

func (r publicationPostCreateOne) Exec(ctx context.Context) (*PublicationPostModel, error) {
	var v PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostCreateOne) Tx() PublicationPostUniqueTxResult {
	v := newPublicationPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type userToPostsFindUnique struct {
	query builder.Query
}

func (r userToPostsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToPostsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPostsFindUnique) with()         {}
func (r userToPostsFindUnique) userModel()    {}
func (r userToPostsFindUnique) userRelation() {}

func (r userToPostsFindUnique) With(params ...PostRelationWith) userToPostsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToPostsFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToPostsFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToPostsFindUnique) Update(params ...UserSetParam) userToPostsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToPostsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToPostsUpdateUnique struct {
	query builder.Query
}

func (r userToPostsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPostsUpdateUnique) userModel() {}

func (r userToPostsUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPostsUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToPostsFindUnique) Delete() userToPostsDeleteUnique {
	var v userToPostsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToPostsDeleteUnique struct {
	query builder.Query
}

func (r userToPostsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToPostsDeleteUnique) userModel() {}

func (r userToPostsDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPostsDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToPostsFindFirst struct {
	query builder.Query
}

func (r userToPostsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToPostsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPostsFindFirst) with()         {}
func (r userToPostsFindFirst) userModel()    {}
func (r userToPostsFindFirst) userRelation() {}

func (r userToPostsFindFirst) With(params ...PostRelationWith) userToPostsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToPostsFindFirst) OrderBy(params ...PostOrderByParam) userToPostsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToPostsFindFirst) Skip(count int) userToPostsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToPostsFindFirst) Take(count int) userToPostsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToPostsFindFirst) Cursor(cursor UserCursorParam) userToPostsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToPostsFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToPostsFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToPostsFindMany struct {
	query builder.Query
}

func (r userToPostsFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToPostsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPostsFindMany) with()         {}
func (r userToPostsFindMany) userModel()    {}
func (r userToPostsFindMany) userRelation() {}

func (r userToPostsFindMany) With(params ...PostRelationWith) userToPostsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToPostsFindMany) OrderBy(params ...PostOrderByParam) userToPostsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToPostsFindMany) Skip(count int) userToPostsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToPostsFindMany) Take(count int) userToPostsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToPostsFindMany) Cursor(cursor UserCursorParam) userToPostsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToPostsFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToPostsFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToPostsFindMany) Update(params ...UserSetParam) userToPostsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToPostsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToPostsUpdateMany struct {
	query builder.Query
}

func (r userToPostsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPostsUpdateMany) userModel() {}

func (r userToPostsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPostsUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToPostsFindMany) Delete() userToPostsDeleteMany {
	var v userToPostsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToPostsDeleteMany struct {
	query builder.Query
}

func (r userToPostsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToPostsDeleteMany) userModel() {}

func (r userToPostsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPostsDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToCommentsFindUnique struct {
	query builder.Query
}

func (r userToCommentsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToCommentsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToCommentsFindUnique) with()         {}
func (r userToCommentsFindUnique) userModel()    {}
func (r userToCommentsFindUnique) userRelation() {}

func (r userToCommentsFindUnique) With(params ...CommentRelationWith) userToCommentsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToCommentsFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToCommentsFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToCommentsFindUnique) Update(params ...UserSetParam) userToCommentsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToCommentsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToCommentsUpdateUnique struct {
	query builder.Query
}

func (r userToCommentsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToCommentsUpdateUnique) userModel() {}

func (r userToCommentsUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToCommentsUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToCommentsFindUnique) Delete() userToCommentsDeleteUnique {
	var v userToCommentsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToCommentsDeleteUnique struct {
	query builder.Query
}

func (r userToCommentsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToCommentsDeleteUnique) userModel() {}

func (r userToCommentsDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToCommentsDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToCommentsFindFirst struct {
	query builder.Query
}

func (r userToCommentsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToCommentsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToCommentsFindFirst) with()         {}
func (r userToCommentsFindFirst) userModel()    {}
func (r userToCommentsFindFirst) userRelation() {}

func (r userToCommentsFindFirst) With(params ...CommentRelationWith) userToCommentsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToCommentsFindFirst) OrderBy(params ...CommentOrderByParam) userToCommentsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToCommentsFindFirst) Skip(count int) userToCommentsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToCommentsFindFirst) Take(count int) userToCommentsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToCommentsFindFirst) Cursor(cursor UserCursorParam) userToCommentsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToCommentsFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToCommentsFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToCommentsFindMany struct {
	query builder.Query
}

func (r userToCommentsFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToCommentsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToCommentsFindMany) with()         {}
func (r userToCommentsFindMany) userModel()    {}
func (r userToCommentsFindMany) userRelation() {}

func (r userToCommentsFindMany) With(params ...CommentRelationWith) userToCommentsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToCommentsFindMany) OrderBy(params ...CommentOrderByParam) userToCommentsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToCommentsFindMany) Skip(count int) userToCommentsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToCommentsFindMany) Take(count int) userToCommentsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToCommentsFindMany) Cursor(cursor UserCursorParam) userToCommentsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToCommentsFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToCommentsFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToCommentsFindMany) Update(params ...UserSetParam) userToCommentsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToCommentsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToCommentsUpdateMany struct {
	query builder.Query
}

func (r userToCommentsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToCommentsUpdateMany) userModel() {}

func (r userToCommentsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToCommentsUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToCommentsFindMany) Delete() userToCommentsDeleteMany {
	var v userToCommentsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToCommentsDeleteMany struct {
	query builder.Query
}

func (r userToCommentsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToCommentsDeleteMany) userModel() {}

func (r userToCommentsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToCommentsDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToLikesFindUnique struct {
	query builder.Query
}

func (r userToLikesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToLikesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToLikesFindUnique) with()         {}
func (r userToLikesFindUnique) userModel()    {}
func (r userToLikesFindUnique) userRelation() {}

func (r userToLikesFindUnique) With(params ...LikeRelationWith) userToLikesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToLikesFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToLikesFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToLikesFindUnique) Update(params ...UserSetParam) userToLikesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToLikesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToLikesUpdateUnique struct {
	query builder.Query
}

func (r userToLikesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToLikesUpdateUnique) userModel() {}

func (r userToLikesUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToLikesUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToLikesFindUnique) Delete() userToLikesDeleteUnique {
	var v userToLikesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToLikesDeleteUnique struct {
	query builder.Query
}

func (r userToLikesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToLikesDeleteUnique) userModel() {}

func (r userToLikesDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToLikesDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToLikesFindFirst struct {
	query builder.Query
}

func (r userToLikesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToLikesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToLikesFindFirst) with()         {}
func (r userToLikesFindFirst) userModel()    {}
func (r userToLikesFindFirst) userRelation() {}

func (r userToLikesFindFirst) With(params ...LikeRelationWith) userToLikesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToLikesFindFirst) OrderBy(params ...LikeOrderByParam) userToLikesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToLikesFindFirst) Skip(count int) userToLikesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToLikesFindFirst) Take(count int) userToLikesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToLikesFindFirst) Cursor(cursor UserCursorParam) userToLikesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToLikesFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToLikesFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToLikesFindMany struct {
	query builder.Query
}

func (r userToLikesFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToLikesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToLikesFindMany) with()         {}
func (r userToLikesFindMany) userModel()    {}
func (r userToLikesFindMany) userRelation() {}

func (r userToLikesFindMany) With(params ...LikeRelationWith) userToLikesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToLikesFindMany) OrderBy(params ...LikeOrderByParam) userToLikesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToLikesFindMany) Skip(count int) userToLikesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToLikesFindMany) Take(count int) userToLikesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToLikesFindMany) Cursor(cursor UserCursorParam) userToLikesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToLikesFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToLikesFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToLikesFindMany) Update(params ...UserSetParam) userToLikesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToLikesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToLikesUpdateMany struct {
	query builder.Query
}

func (r userToLikesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToLikesUpdateMany) userModel() {}

func (r userToLikesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToLikesUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToLikesFindMany) Delete() userToLikesDeleteMany {
	var v userToLikesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToLikesDeleteMany struct {
	query builder.Query
}

func (r userToLikesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToLikesDeleteMany) userModel() {}

func (r userToLikesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToLikesDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToUserProfileFindUnique struct {
	query builder.Query
}

func (r userToUserProfileFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToUserProfileFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserProfileFindUnique) with()         {}
func (r userToUserProfileFindUnique) userModel()    {}
func (r userToUserProfileFindUnique) userRelation() {}

func (r userToUserProfileFindUnique) With(params ...UserProfileRelationWith) userToUserProfileFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserProfileFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserProfileFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserProfileFindUnique) Update(params ...UserSetParam) userToUserProfileUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToUserProfileUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToUserProfileUpdateUnique struct {
	query builder.Query
}

func (r userToUserProfileUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserProfileUpdateUnique) userModel() {}

func (r userToUserProfileUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserProfileUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToUserProfileFindUnique) Delete() userToUserProfileDeleteUnique {
	var v userToUserProfileDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToUserProfileDeleteUnique struct {
	query builder.Query
}

func (r userToUserProfileDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToUserProfileDeleteUnique) userModel() {}

func (r userToUserProfileDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserProfileDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToUserProfileFindFirst struct {
	query builder.Query
}

func (r userToUserProfileFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToUserProfileFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserProfileFindFirst) with()         {}
func (r userToUserProfileFindFirst) userModel()    {}
func (r userToUserProfileFindFirst) userRelation() {}

func (r userToUserProfileFindFirst) With(params ...UserProfileRelationWith) userToUserProfileFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserProfileFindFirst) OrderBy(params ...UserProfileOrderByParam) userToUserProfileFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToUserProfileFindFirst) Skip(count int) userToUserProfileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToUserProfileFindFirst) Take(count int) userToUserProfileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToUserProfileFindFirst) Cursor(cursor UserCursorParam) userToUserProfileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToUserProfileFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserProfileFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToUserProfileFindMany struct {
	query builder.Query
}

func (r userToUserProfileFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToUserProfileFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserProfileFindMany) with()         {}
func (r userToUserProfileFindMany) userModel()    {}
func (r userToUserProfileFindMany) userRelation() {}

func (r userToUserProfileFindMany) With(params ...UserProfileRelationWith) userToUserProfileFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserProfileFindMany) OrderBy(params ...UserProfileOrderByParam) userToUserProfileFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToUserProfileFindMany) Skip(count int) userToUserProfileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToUserProfileFindMany) Take(count int) userToUserProfileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToUserProfileFindMany) Cursor(cursor UserCursorParam) userToUserProfileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToUserProfileFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToUserProfileFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToUserProfileFindMany) Update(params ...UserSetParam) userToUserProfileUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToUserProfileUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToUserProfileUpdateMany struct {
	query builder.Query
}

func (r userToUserProfileUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserProfileUpdateMany) userModel() {}

func (r userToUserProfileUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserProfileUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToUserProfileFindMany) Delete() userToUserProfileDeleteMany {
	var v userToUserProfileDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToUserProfileDeleteMany struct {
	query builder.Query
}

func (r userToUserProfileDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToUserProfileDeleteMany) userModel() {}

func (r userToUserProfileDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserProfileDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToPublicationPostFindUnique struct {
	query builder.Query
}

func (r userToPublicationPostFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToPublicationPostFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPublicationPostFindUnique) with()         {}
func (r userToPublicationPostFindUnique) userModel()    {}
func (r userToPublicationPostFindUnique) userRelation() {}

func (r userToPublicationPostFindUnique) With(params ...PublicationPostRelationWith) userToPublicationPostFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToPublicationPostFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToPublicationPostFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToPublicationPostFindUnique) Update(params ...UserSetParam) userToPublicationPostUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToPublicationPostUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToPublicationPostUpdateUnique struct {
	query builder.Query
}

func (r userToPublicationPostUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPublicationPostUpdateUnique) userModel() {}

func (r userToPublicationPostUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPublicationPostUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToPublicationPostFindUnique) Delete() userToPublicationPostDeleteUnique {
	var v userToPublicationPostDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToPublicationPostDeleteUnique struct {
	query builder.Query
}

func (r userToPublicationPostDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToPublicationPostDeleteUnique) userModel() {}

func (r userToPublicationPostDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPublicationPostDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToPublicationPostFindFirst struct {
	query builder.Query
}

func (r userToPublicationPostFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToPublicationPostFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPublicationPostFindFirst) with()         {}
func (r userToPublicationPostFindFirst) userModel()    {}
func (r userToPublicationPostFindFirst) userRelation() {}

func (r userToPublicationPostFindFirst) With(params ...PublicationPostRelationWith) userToPublicationPostFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToPublicationPostFindFirst) OrderBy(params ...PublicationPostOrderByParam) userToPublicationPostFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToPublicationPostFindFirst) Skip(count int) userToPublicationPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToPublicationPostFindFirst) Take(count int) userToPublicationPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToPublicationPostFindFirst) Cursor(cursor UserCursorParam) userToPublicationPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToPublicationPostFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToPublicationPostFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToPublicationPostFindMany struct {
	query builder.Query
}

func (r userToPublicationPostFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToPublicationPostFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPublicationPostFindMany) with()         {}
func (r userToPublicationPostFindMany) userModel()    {}
func (r userToPublicationPostFindMany) userRelation() {}

func (r userToPublicationPostFindMany) With(params ...PublicationPostRelationWith) userToPublicationPostFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToPublicationPostFindMany) OrderBy(params ...PublicationPostOrderByParam) userToPublicationPostFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToPublicationPostFindMany) Skip(count int) userToPublicationPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToPublicationPostFindMany) Take(count int) userToPublicationPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToPublicationPostFindMany) Cursor(cursor UserCursorParam) userToPublicationPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToPublicationPostFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToPublicationPostFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToPublicationPostFindMany) Update(params ...UserSetParam) userToPublicationPostUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToPublicationPostUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToPublicationPostUpdateMany struct {
	query builder.Query
}

func (r userToPublicationPostUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToPublicationPostUpdateMany) userModel() {}

func (r userToPublicationPostUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPublicationPostUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToPublicationPostFindMany) Delete() userToPublicationPostDeleteMany {
	var v userToPublicationPostDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToPublicationPostDeleteMany struct {
	query builder.Query
}

func (r userToPublicationPostDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToPublicationPostDeleteMany) userModel() {}

func (r userToPublicationPostDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToPublicationPostDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToUserFollowerFindUnique struct {
	query builder.Query
}

func (r userToUserFollowerFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToUserFollowerFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserFollowerFindUnique) with()         {}
func (r userToUserFollowerFindUnique) userModel()    {}
func (r userToUserFollowerFindUnique) userRelation() {}

func (r userToUserFollowerFindUnique) With(params ...UserFollowerRelationWith) userToUserFollowerFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserFollowerFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserFollowerFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserFollowerFindUnique) Update(params ...UserSetParam) userToUserFollowerUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToUserFollowerUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToUserFollowerUpdateUnique struct {
	query builder.Query
}

func (r userToUserFollowerUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserFollowerUpdateUnique) userModel() {}

func (r userToUserFollowerUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserFollowerUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToUserFollowerFindUnique) Delete() userToUserFollowerDeleteUnique {
	var v userToUserFollowerDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToUserFollowerDeleteUnique struct {
	query builder.Query
}

func (r userToUserFollowerDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToUserFollowerDeleteUnique) userModel() {}

func (r userToUserFollowerDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserFollowerDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToUserFollowerFindFirst struct {
	query builder.Query
}

func (r userToUserFollowerFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToUserFollowerFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserFollowerFindFirst) with()         {}
func (r userToUserFollowerFindFirst) userModel()    {}
func (r userToUserFollowerFindFirst) userRelation() {}

func (r userToUserFollowerFindFirst) With(params ...UserFollowerRelationWith) userToUserFollowerFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserFollowerFindFirst) OrderBy(params ...UserFollowerOrderByParam) userToUserFollowerFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToUserFollowerFindFirst) Skip(count int) userToUserFollowerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToUserFollowerFindFirst) Take(count int) userToUserFollowerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToUserFollowerFindFirst) Cursor(cursor UserCursorParam) userToUserFollowerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToUserFollowerFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserFollowerFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToUserFollowerFindMany struct {
	query builder.Query
}

func (r userToUserFollowerFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToUserFollowerFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserFollowerFindMany) with()         {}
func (r userToUserFollowerFindMany) userModel()    {}
func (r userToUserFollowerFindMany) userRelation() {}

func (r userToUserFollowerFindMany) With(params ...UserFollowerRelationWith) userToUserFollowerFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserFollowerFindMany) OrderBy(params ...UserFollowerOrderByParam) userToUserFollowerFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToUserFollowerFindMany) Skip(count int) userToUserFollowerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToUserFollowerFindMany) Take(count int) userToUserFollowerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToUserFollowerFindMany) Cursor(cursor UserCursorParam) userToUserFollowerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToUserFollowerFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToUserFollowerFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToUserFollowerFindMany) Update(params ...UserSetParam) userToUserFollowerUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToUserFollowerUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToUserFollowerUpdateMany struct {
	query builder.Query
}

func (r userToUserFollowerUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserFollowerUpdateMany) userModel() {}

func (r userToUserFollowerUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserFollowerUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToUserFollowerFindMany) Delete() userToUserFollowerDeleteMany {
	var v userToUserFollowerDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToUserFollowerDeleteMany struct {
	query builder.Query
}

func (r userToUserFollowerDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToUserFollowerDeleteMany) userModel() {}

func (r userToUserFollowerDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserFollowerDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToUserFolloweeFindUnique struct {
	query builder.Query
}

func (r userToUserFolloweeFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToUserFolloweeFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserFolloweeFindUnique) with()         {}
func (r userToUserFolloweeFindUnique) userModel()    {}
func (r userToUserFolloweeFindUnique) userRelation() {}

func (r userToUserFolloweeFindUnique) With(params ...UserFollowerRelationWith) userToUserFolloweeFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserFolloweeFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserFolloweeFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserFolloweeFindUnique) Update(params ...UserSetParam) userToUserFolloweeUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToUserFolloweeUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToUserFolloweeUpdateUnique struct {
	query builder.Query
}

func (r userToUserFolloweeUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserFolloweeUpdateUnique) userModel() {}

func (r userToUserFolloweeUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserFolloweeUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToUserFolloweeFindUnique) Delete() userToUserFolloweeDeleteUnique {
	var v userToUserFolloweeDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToUserFolloweeDeleteUnique struct {
	query builder.Query
}

func (r userToUserFolloweeDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToUserFolloweeDeleteUnique) userModel() {}

func (r userToUserFolloweeDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserFolloweeDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToUserFolloweeFindFirst struct {
	query builder.Query
}

func (r userToUserFolloweeFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToUserFolloweeFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserFolloweeFindFirst) with()         {}
func (r userToUserFolloweeFindFirst) userModel()    {}
func (r userToUserFolloweeFindFirst) userRelation() {}

func (r userToUserFolloweeFindFirst) With(params ...UserFollowerRelationWith) userToUserFolloweeFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserFolloweeFindFirst) OrderBy(params ...UserFollowerOrderByParam) userToUserFolloweeFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToUserFolloweeFindFirst) Skip(count int) userToUserFolloweeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToUserFolloweeFindFirst) Take(count int) userToUserFolloweeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToUserFolloweeFindFirst) Cursor(cursor UserCursorParam) userToUserFolloweeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToUserFolloweeFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserFolloweeFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToUserFolloweeFindMany struct {
	query builder.Query
}

func (r userToUserFolloweeFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToUserFolloweeFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserFolloweeFindMany) with()         {}
func (r userToUserFolloweeFindMany) userModel()    {}
func (r userToUserFolloweeFindMany) userRelation() {}

func (r userToUserFolloweeFindMany) With(params ...UserFollowerRelationWith) userToUserFolloweeFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserFolloweeFindMany) OrderBy(params ...UserFollowerOrderByParam) userToUserFolloweeFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToUserFolloweeFindMany) Skip(count int) userToUserFolloweeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToUserFolloweeFindMany) Take(count int) userToUserFolloweeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToUserFolloweeFindMany) Cursor(cursor UserCursorParam) userToUserFolloweeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToUserFolloweeFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToUserFolloweeFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToUserFolloweeFindMany) Update(params ...UserSetParam) userToUserFolloweeUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToUserFolloweeUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToUserFolloweeUpdateMany struct {
	query builder.Query
}

func (r userToUserFolloweeUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserFolloweeUpdateMany) userModel() {}

func (r userToUserFolloweeUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserFolloweeUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToUserFolloweeFindMany) Delete() userToUserFolloweeDeleteMany {
	var v userToUserFolloweeDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToUserFolloweeDeleteMany struct {
	query builder.Query
}

func (r userToUserFolloweeDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToUserFolloweeDeleteMany) userModel() {}

func (r userToUserFolloweeDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserFolloweeDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindUnique struct {
	query builder.Query
}

func (r userFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindUnique) with()         {}
func (r userFindUnique) userModel()    {}
func (r userFindUnique) userRelation() {}

func (r userActions) FindUnique(
	params UserEqualsUniqueWhereParam,
) userFindUnique {
	var v userFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userFindUnique) With(params ...UserRelationWith) userFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) Update(params ...UserSetParam) userUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateUnique struct {
	query builder.Query
}

func (r userUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateUnique) userModel() {}

func (r userUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindUnique) Delete() userDeleteUnique {
	var v userDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userDeleteUnique struct {
	query builder.Query
}

func (r userDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteUnique) userModel() {}

func (r userDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindFirst struct {
	query builder.Query
}

func (r userFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindFirst) with()         {}
func (r userFindFirst) userModel()    {}
func (r userFindFirst) userRelation() {}

func (r userActions) FindFirst(
	params ...UserWhereParam,
) userFindFirst {
	var v userFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindFirst) With(params ...UserRelationWith) userFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindFirst) OrderBy(params ...UserOrderByParam) userFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindFirst) Skip(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindFirst) Take(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindFirst) Cursor(cursor UserCursorParam) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFindMany struct {
	query builder.Query
}

func (r userFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindMany) with()         {}
func (r userFindMany) userModel()    {}
func (r userFindMany) userRelation() {}

func (r userActions) FindMany(
	params ...UserWhereParam,
) userFindMany {
	var v userFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindMany) With(params ...UserRelationWith) userFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindMany) OrderBy(params ...UserOrderByParam) userFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindMany) Skip(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindMany) Take(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindMany) Cursor(cursor UserCursorParam) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) Update(params ...UserSetParam) userUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateMany struct {
	query builder.Query
}

func (r userUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateMany) userModel() {}

func (r userUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindMany) Delete() userDeleteMany {
	var v userDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userDeleteMany struct {
	query builder.Query
}

func (r userDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteMany) userModel() {}

func (r userDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userProfileToUserFindUnique struct {
	query builder.Query
}

func (r userProfileToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userProfileToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileToUserFindUnique) with()                {}
func (r userProfileToUserFindUnique) userProfileModel()    {}
func (r userProfileToUserFindUnique) userProfileRelation() {}

func (r userProfileToUserFindUnique) With(params ...UserRelationWith) userProfileToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userProfileToUserFindUnique) Exec(ctx context.Context) (
	*UserProfileModel,
	error,
) {
	var v *UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userProfileToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerUserProfile,
	error,
) {
	var v *InnerUserProfile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userProfileToUserFindUnique) Update(params ...UserProfileSetParam) userProfileToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "UserProfile"

	var v userProfileToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userProfileToUserUpdateUnique struct {
	query builder.Query
}

func (r userProfileToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileToUserUpdateUnique) userProfileModel() {}

func (r userProfileToUserUpdateUnique) Exec(ctx context.Context) (*UserProfileModel, error) {
	var v UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userProfileToUserUpdateUnique) Tx() UserProfileUniqueTxResult {
	v := newUserProfileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userProfileToUserFindUnique) Delete() userProfileToUserDeleteUnique {
	var v userProfileToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "UserProfile"

	return v
}

type userProfileToUserDeleteUnique struct {
	query builder.Query
}

func (r userProfileToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userProfileToUserDeleteUnique) userProfileModel() {}

func (r userProfileToUserDeleteUnique) Exec(ctx context.Context) (*UserProfileModel, error) {
	var v UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userProfileToUserDeleteUnique) Tx() UserProfileUniqueTxResult {
	v := newUserProfileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userProfileToUserFindFirst struct {
	query builder.Query
}

func (r userProfileToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userProfileToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileToUserFindFirst) with()                {}
func (r userProfileToUserFindFirst) userProfileModel()    {}
func (r userProfileToUserFindFirst) userProfileRelation() {}

func (r userProfileToUserFindFirst) With(params ...UserRelationWith) userProfileToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userProfileToUserFindFirst) OrderBy(params ...UserOrderByParam) userProfileToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userProfileToUserFindFirst) Skip(count int) userProfileToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userProfileToUserFindFirst) Take(count int) userProfileToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userProfileToUserFindFirst) Cursor(cursor UserProfileCursorParam) userProfileToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userProfileToUserFindFirst) Exec(ctx context.Context) (
	*UserProfileModel,
	error,
) {
	var v *UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userProfileToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerUserProfile,
	error,
) {
	var v *InnerUserProfile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userProfileToUserFindMany struct {
	query builder.Query
}

func (r userProfileToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r userProfileToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileToUserFindMany) with()                {}
func (r userProfileToUserFindMany) userProfileModel()    {}
func (r userProfileToUserFindMany) userProfileRelation() {}

func (r userProfileToUserFindMany) With(params ...UserRelationWith) userProfileToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userProfileToUserFindMany) OrderBy(params ...UserOrderByParam) userProfileToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userProfileToUserFindMany) Skip(count int) userProfileToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userProfileToUserFindMany) Take(count int) userProfileToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userProfileToUserFindMany) Cursor(cursor UserProfileCursorParam) userProfileToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userProfileToUserFindMany) Exec(ctx context.Context) (
	[]UserProfileModel,
	error,
) {
	var v []UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userProfileToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerUserProfile,
	error,
) {
	var v []InnerUserProfile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userProfileToUserFindMany) Update(params ...UserProfileSetParam) userProfileToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "UserProfile"

	r.query.Outputs = countOutput

	var v userProfileToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userProfileToUserUpdateMany struct {
	query builder.Query
}

func (r userProfileToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileToUserUpdateMany) userProfileModel() {}

func (r userProfileToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userProfileToUserUpdateMany) Tx() UserProfileManyTxResult {
	v := newUserProfileManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userProfileToUserFindMany) Delete() userProfileToUserDeleteMany {
	var v userProfileToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "UserProfile"

	v.query.Outputs = countOutput

	return v
}

type userProfileToUserDeleteMany struct {
	query builder.Query
}

func (r userProfileToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userProfileToUserDeleteMany) userProfileModel() {}

func (r userProfileToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userProfileToUserDeleteMany) Tx() UserProfileManyTxResult {
	v := newUserProfileManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userProfileFindUnique struct {
	query builder.Query
}

func (r userProfileFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userProfileFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileFindUnique) with()                {}
func (r userProfileFindUnique) userProfileModel()    {}
func (r userProfileFindUnique) userProfileRelation() {}

func (r userProfileActions) FindUnique(
	params UserProfileEqualsUniqueWhereParam,
) userProfileFindUnique {
	var v userProfileFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "UserProfile"
	v.query.Outputs = userProfileOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userProfileFindUnique) With(params ...UserProfileRelationWith) userProfileFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userProfileFindUnique) Exec(ctx context.Context) (
	*UserProfileModel,
	error,
) {
	var v *UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userProfileFindUnique) ExecInner(ctx context.Context) (
	*InnerUserProfile,
	error,
) {
	var v *InnerUserProfile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userProfileFindUnique) Update(params ...UserProfileSetParam) userProfileUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "UserProfile"

	var v userProfileUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userProfileUpdateUnique struct {
	query builder.Query
}

func (r userProfileUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileUpdateUnique) userProfileModel() {}

func (r userProfileUpdateUnique) Exec(ctx context.Context) (*UserProfileModel, error) {
	var v UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userProfileUpdateUnique) Tx() UserProfileUniqueTxResult {
	v := newUserProfileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userProfileFindUnique) Delete() userProfileDeleteUnique {
	var v userProfileDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "UserProfile"

	return v
}

type userProfileDeleteUnique struct {
	query builder.Query
}

func (r userProfileDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userProfileDeleteUnique) userProfileModel() {}

func (r userProfileDeleteUnique) Exec(ctx context.Context) (*UserProfileModel, error) {
	var v UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userProfileDeleteUnique) Tx() UserProfileUniqueTxResult {
	v := newUserProfileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userProfileFindFirst struct {
	query builder.Query
}

func (r userProfileFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userProfileFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileFindFirst) with()                {}
func (r userProfileFindFirst) userProfileModel()    {}
func (r userProfileFindFirst) userProfileRelation() {}

func (r userProfileActions) FindFirst(
	params ...UserProfileWhereParam,
) userProfileFindFirst {
	var v userProfileFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "UserProfile"
	v.query.Outputs = userProfileOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userProfileFindFirst) With(params ...UserProfileRelationWith) userProfileFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userProfileFindFirst) OrderBy(params ...UserProfileOrderByParam) userProfileFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userProfileFindFirst) Skip(count int) userProfileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userProfileFindFirst) Take(count int) userProfileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userProfileFindFirst) Cursor(cursor UserProfileCursorParam) userProfileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userProfileFindFirst) Exec(ctx context.Context) (
	*UserProfileModel,
	error,
) {
	var v *UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userProfileFindFirst) ExecInner(ctx context.Context) (
	*InnerUserProfile,
	error,
) {
	var v *InnerUserProfile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userProfileFindMany struct {
	query builder.Query
}

func (r userProfileFindMany) getQuery() builder.Query {
	return r.query
}

func (r userProfileFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileFindMany) with()                {}
func (r userProfileFindMany) userProfileModel()    {}
func (r userProfileFindMany) userProfileRelation() {}

func (r userProfileActions) FindMany(
	params ...UserProfileWhereParam,
) userProfileFindMany {
	var v userProfileFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "UserProfile"
	v.query.Outputs = userProfileOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userProfileFindMany) With(params ...UserProfileRelationWith) userProfileFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userProfileFindMany) OrderBy(params ...UserProfileOrderByParam) userProfileFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userProfileFindMany) Skip(count int) userProfileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userProfileFindMany) Take(count int) userProfileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userProfileFindMany) Cursor(cursor UserProfileCursorParam) userProfileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userProfileFindMany) Exec(ctx context.Context) (
	[]UserProfileModel,
	error,
) {
	var v []UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userProfileFindMany) ExecInner(ctx context.Context) (
	[]InnerUserProfile,
	error,
) {
	var v []InnerUserProfile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userProfileFindMany) Update(params ...UserProfileSetParam) userProfileUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "UserProfile"

	r.query.Outputs = countOutput

	var v userProfileUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userProfileUpdateMany struct {
	query builder.Query
}

func (r userProfileUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileUpdateMany) userProfileModel() {}

func (r userProfileUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userProfileUpdateMany) Tx() UserProfileManyTxResult {
	v := newUserProfileManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userProfileFindMany) Delete() userProfileDeleteMany {
	var v userProfileDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "UserProfile"

	v.query.Outputs = countOutput

	return v
}

type userProfileDeleteMany struct {
	query builder.Query
}

func (r userProfileDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userProfileDeleteMany) userProfileModel() {}

func (r userProfileDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userProfileDeleteMany) Tx() UserProfileManyTxResult {
	v := newUserProfileManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToUserFindUnique struct {
	query builder.Query
}

func (r postToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToUserFindUnique) with()         {}
func (r postToUserFindUnique) postModel()    {}
func (r postToUserFindUnique) postRelation() {}

func (r postToUserFindUnique) With(params ...UserRelationWith) postToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToUserFindUnique) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToUserFindUnique) Update(params ...PostSetParam) postToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Post"

	var v postToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToUserUpdateUnique struct {
	query builder.Query
}

func (r postToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToUserUpdateUnique) postModel() {}

func (r postToUserUpdateUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToUserUpdateUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToUserFindUnique) Delete() postToUserDeleteUnique {
	var v postToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Post"

	return v
}

type postToUserDeleteUnique struct {
	query builder.Query
}

func (r postToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postToUserDeleteUnique) postModel() {}

func (r postToUserDeleteUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToUserDeleteUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToUserFindFirst struct {
	query builder.Query
}

func (r postToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postToUserFindFirst) with()         {}
func (r postToUserFindFirst) postModel()    {}
func (r postToUserFindFirst) postRelation() {}

func (r postToUserFindFirst) With(params ...UserRelationWith) postToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToUserFindFirst) OrderBy(params ...UserOrderByParam) postToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToUserFindFirst) Skip(count int) postToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToUserFindFirst) Take(count int) postToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToUserFindFirst) Cursor(cursor PostCursorParam) postToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToUserFindFirst) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postToUserFindMany struct {
	query builder.Query
}

func (r postToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r postToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToUserFindMany) with()         {}
func (r postToUserFindMany) postModel()    {}
func (r postToUserFindMany) postRelation() {}

func (r postToUserFindMany) With(params ...UserRelationWith) postToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToUserFindMany) OrderBy(params ...UserOrderByParam) postToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToUserFindMany) Skip(count int) postToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToUserFindMany) Take(count int) postToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToUserFindMany) Cursor(cursor PostCursorParam) postToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToUserFindMany) Exec(ctx context.Context) (
	[]PostModel,
	error,
) {
	var v []PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerPost,
	error,
) {
	var v []InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToUserFindMany) Update(params ...PostSetParam) postToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Post"

	r.query.Outputs = countOutput

	var v postToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToUserUpdateMany struct {
	query builder.Query
}

func (r postToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToUserUpdateMany) postModel() {}

func (r postToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToUserUpdateMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToUserFindMany) Delete() postToUserDeleteMany {
	var v postToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Post"

	v.query.Outputs = countOutput

	return v
}

type postToUserDeleteMany struct {
	query builder.Query
}

func (r postToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postToUserDeleteMany) postModel() {}

func (r postToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToUserDeleteMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToTagsFindUnique struct {
	query builder.Query
}

func (r postToTagsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postToTagsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToTagsFindUnique) with()         {}
func (r postToTagsFindUnique) postModel()    {}
func (r postToTagsFindUnique) postRelation() {}

func (r postToTagsFindUnique) With(params ...PostTagRelationWith) postToTagsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToTagsFindUnique) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToTagsFindUnique) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToTagsFindUnique) Update(params ...PostSetParam) postToTagsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Post"

	var v postToTagsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToTagsUpdateUnique struct {
	query builder.Query
}

func (r postToTagsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToTagsUpdateUnique) postModel() {}

func (r postToTagsUpdateUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToTagsUpdateUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToTagsFindUnique) Delete() postToTagsDeleteUnique {
	var v postToTagsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Post"

	return v
}

type postToTagsDeleteUnique struct {
	query builder.Query
}

func (r postToTagsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postToTagsDeleteUnique) postModel() {}

func (r postToTagsDeleteUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToTagsDeleteUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToTagsFindFirst struct {
	query builder.Query
}

func (r postToTagsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postToTagsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postToTagsFindFirst) with()         {}
func (r postToTagsFindFirst) postModel()    {}
func (r postToTagsFindFirst) postRelation() {}

func (r postToTagsFindFirst) With(params ...PostTagRelationWith) postToTagsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToTagsFindFirst) OrderBy(params ...PostTagOrderByParam) postToTagsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToTagsFindFirst) Skip(count int) postToTagsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToTagsFindFirst) Take(count int) postToTagsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToTagsFindFirst) Cursor(cursor PostCursorParam) postToTagsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToTagsFindFirst) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToTagsFindFirst) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postToTagsFindMany struct {
	query builder.Query
}

func (r postToTagsFindMany) getQuery() builder.Query {
	return r.query
}

func (r postToTagsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToTagsFindMany) with()         {}
func (r postToTagsFindMany) postModel()    {}
func (r postToTagsFindMany) postRelation() {}

func (r postToTagsFindMany) With(params ...PostTagRelationWith) postToTagsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToTagsFindMany) OrderBy(params ...PostTagOrderByParam) postToTagsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToTagsFindMany) Skip(count int) postToTagsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToTagsFindMany) Take(count int) postToTagsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToTagsFindMany) Cursor(cursor PostCursorParam) postToTagsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToTagsFindMany) Exec(ctx context.Context) (
	[]PostModel,
	error,
) {
	var v []PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToTagsFindMany) ExecInner(ctx context.Context) (
	[]InnerPost,
	error,
) {
	var v []InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToTagsFindMany) Update(params ...PostSetParam) postToTagsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Post"

	r.query.Outputs = countOutput

	var v postToTagsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToTagsUpdateMany struct {
	query builder.Query
}

func (r postToTagsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToTagsUpdateMany) postModel() {}

func (r postToTagsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToTagsUpdateMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToTagsFindMany) Delete() postToTagsDeleteMany {
	var v postToTagsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Post"

	v.query.Outputs = countOutput

	return v
}

type postToTagsDeleteMany struct {
	query builder.Query
}

func (r postToTagsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postToTagsDeleteMany) postModel() {}

func (r postToTagsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToTagsDeleteMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToCategoryFindUnique struct {
	query builder.Query
}

func (r postToCategoryFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postToCategoryFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToCategoryFindUnique) with()         {}
func (r postToCategoryFindUnique) postModel()    {}
func (r postToCategoryFindUnique) postRelation() {}

func (r postToCategoryFindUnique) With(params ...PostCategoryRelationWith) postToCategoryFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToCategoryFindUnique) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToCategoryFindUnique) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToCategoryFindUnique) Update(params ...PostSetParam) postToCategoryUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Post"

	var v postToCategoryUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToCategoryUpdateUnique struct {
	query builder.Query
}

func (r postToCategoryUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToCategoryUpdateUnique) postModel() {}

func (r postToCategoryUpdateUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToCategoryUpdateUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToCategoryFindUnique) Delete() postToCategoryDeleteUnique {
	var v postToCategoryDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Post"

	return v
}

type postToCategoryDeleteUnique struct {
	query builder.Query
}

func (r postToCategoryDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postToCategoryDeleteUnique) postModel() {}

func (r postToCategoryDeleteUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToCategoryDeleteUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToCategoryFindFirst struct {
	query builder.Query
}

func (r postToCategoryFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postToCategoryFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postToCategoryFindFirst) with()         {}
func (r postToCategoryFindFirst) postModel()    {}
func (r postToCategoryFindFirst) postRelation() {}

func (r postToCategoryFindFirst) With(params ...PostCategoryRelationWith) postToCategoryFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToCategoryFindFirst) OrderBy(params ...PostCategoryOrderByParam) postToCategoryFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToCategoryFindFirst) Skip(count int) postToCategoryFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToCategoryFindFirst) Take(count int) postToCategoryFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToCategoryFindFirst) Cursor(cursor PostCursorParam) postToCategoryFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToCategoryFindFirst) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToCategoryFindFirst) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postToCategoryFindMany struct {
	query builder.Query
}

func (r postToCategoryFindMany) getQuery() builder.Query {
	return r.query
}

func (r postToCategoryFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToCategoryFindMany) with()         {}
func (r postToCategoryFindMany) postModel()    {}
func (r postToCategoryFindMany) postRelation() {}

func (r postToCategoryFindMany) With(params ...PostCategoryRelationWith) postToCategoryFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToCategoryFindMany) OrderBy(params ...PostCategoryOrderByParam) postToCategoryFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToCategoryFindMany) Skip(count int) postToCategoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToCategoryFindMany) Take(count int) postToCategoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToCategoryFindMany) Cursor(cursor PostCursorParam) postToCategoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToCategoryFindMany) Exec(ctx context.Context) (
	[]PostModel,
	error,
) {
	var v []PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToCategoryFindMany) ExecInner(ctx context.Context) (
	[]InnerPost,
	error,
) {
	var v []InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToCategoryFindMany) Update(params ...PostSetParam) postToCategoryUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Post"

	r.query.Outputs = countOutput

	var v postToCategoryUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToCategoryUpdateMany struct {
	query builder.Query
}

func (r postToCategoryUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToCategoryUpdateMany) postModel() {}

func (r postToCategoryUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToCategoryUpdateMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToCategoryFindMany) Delete() postToCategoryDeleteMany {
	var v postToCategoryDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Post"

	v.query.Outputs = countOutput

	return v
}

type postToCategoryDeleteMany struct {
	query builder.Query
}

func (r postToCategoryDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postToCategoryDeleteMany) postModel() {}

func (r postToCategoryDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToCategoryDeleteMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToCommentsFindUnique struct {
	query builder.Query
}

func (r postToCommentsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postToCommentsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToCommentsFindUnique) with()         {}
func (r postToCommentsFindUnique) postModel()    {}
func (r postToCommentsFindUnique) postRelation() {}

func (r postToCommentsFindUnique) With(params ...CommentRelationWith) postToCommentsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToCommentsFindUnique) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToCommentsFindUnique) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToCommentsFindUnique) Update(params ...PostSetParam) postToCommentsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Post"

	var v postToCommentsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToCommentsUpdateUnique struct {
	query builder.Query
}

func (r postToCommentsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToCommentsUpdateUnique) postModel() {}

func (r postToCommentsUpdateUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToCommentsUpdateUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToCommentsFindUnique) Delete() postToCommentsDeleteUnique {
	var v postToCommentsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Post"

	return v
}

type postToCommentsDeleteUnique struct {
	query builder.Query
}

func (r postToCommentsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postToCommentsDeleteUnique) postModel() {}

func (r postToCommentsDeleteUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToCommentsDeleteUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToCommentsFindFirst struct {
	query builder.Query
}

func (r postToCommentsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postToCommentsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postToCommentsFindFirst) with()         {}
func (r postToCommentsFindFirst) postModel()    {}
func (r postToCommentsFindFirst) postRelation() {}

func (r postToCommentsFindFirst) With(params ...CommentRelationWith) postToCommentsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToCommentsFindFirst) OrderBy(params ...CommentOrderByParam) postToCommentsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToCommentsFindFirst) Skip(count int) postToCommentsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToCommentsFindFirst) Take(count int) postToCommentsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToCommentsFindFirst) Cursor(cursor PostCursorParam) postToCommentsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToCommentsFindFirst) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToCommentsFindFirst) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postToCommentsFindMany struct {
	query builder.Query
}

func (r postToCommentsFindMany) getQuery() builder.Query {
	return r.query
}

func (r postToCommentsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToCommentsFindMany) with()         {}
func (r postToCommentsFindMany) postModel()    {}
func (r postToCommentsFindMany) postRelation() {}

func (r postToCommentsFindMany) With(params ...CommentRelationWith) postToCommentsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToCommentsFindMany) OrderBy(params ...CommentOrderByParam) postToCommentsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToCommentsFindMany) Skip(count int) postToCommentsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToCommentsFindMany) Take(count int) postToCommentsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToCommentsFindMany) Cursor(cursor PostCursorParam) postToCommentsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToCommentsFindMany) Exec(ctx context.Context) (
	[]PostModel,
	error,
) {
	var v []PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToCommentsFindMany) ExecInner(ctx context.Context) (
	[]InnerPost,
	error,
) {
	var v []InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToCommentsFindMany) Update(params ...PostSetParam) postToCommentsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Post"

	r.query.Outputs = countOutput

	var v postToCommentsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToCommentsUpdateMany struct {
	query builder.Query
}

func (r postToCommentsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToCommentsUpdateMany) postModel() {}

func (r postToCommentsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToCommentsUpdateMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToCommentsFindMany) Delete() postToCommentsDeleteMany {
	var v postToCommentsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Post"

	v.query.Outputs = countOutput

	return v
}

type postToCommentsDeleteMany struct {
	query builder.Query
}

func (r postToCommentsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postToCommentsDeleteMany) postModel() {}

func (r postToCommentsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToCommentsDeleteMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToLikesFindUnique struct {
	query builder.Query
}

func (r postToLikesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postToLikesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToLikesFindUnique) with()         {}
func (r postToLikesFindUnique) postModel()    {}
func (r postToLikesFindUnique) postRelation() {}

func (r postToLikesFindUnique) With(params ...LikeRelationWith) postToLikesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToLikesFindUnique) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToLikesFindUnique) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToLikesFindUnique) Update(params ...PostSetParam) postToLikesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Post"

	var v postToLikesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToLikesUpdateUnique struct {
	query builder.Query
}

func (r postToLikesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToLikesUpdateUnique) postModel() {}

func (r postToLikesUpdateUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToLikesUpdateUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToLikesFindUnique) Delete() postToLikesDeleteUnique {
	var v postToLikesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Post"

	return v
}

type postToLikesDeleteUnique struct {
	query builder.Query
}

func (r postToLikesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postToLikesDeleteUnique) postModel() {}

func (r postToLikesDeleteUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToLikesDeleteUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToLikesFindFirst struct {
	query builder.Query
}

func (r postToLikesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postToLikesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postToLikesFindFirst) with()         {}
func (r postToLikesFindFirst) postModel()    {}
func (r postToLikesFindFirst) postRelation() {}

func (r postToLikesFindFirst) With(params ...LikeRelationWith) postToLikesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToLikesFindFirst) OrderBy(params ...LikeOrderByParam) postToLikesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToLikesFindFirst) Skip(count int) postToLikesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToLikesFindFirst) Take(count int) postToLikesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToLikesFindFirst) Cursor(cursor PostCursorParam) postToLikesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToLikesFindFirst) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToLikesFindFirst) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postToLikesFindMany struct {
	query builder.Query
}

func (r postToLikesFindMany) getQuery() builder.Query {
	return r.query
}

func (r postToLikesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToLikesFindMany) with()         {}
func (r postToLikesFindMany) postModel()    {}
func (r postToLikesFindMany) postRelation() {}

func (r postToLikesFindMany) With(params ...LikeRelationWith) postToLikesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToLikesFindMany) OrderBy(params ...LikeOrderByParam) postToLikesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToLikesFindMany) Skip(count int) postToLikesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToLikesFindMany) Take(count int) postToLikesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToLikesFindMany) Cursor(cursor PostCursorParam) postToLikesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToLikesFindMany) Exec(ctx context.Context) (
	[]PostModel,
	error,
) {
	var v []PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToLikesFindMany) ExecInner(ctx context.Context) (
	[]InnerPost,
	error,
) {
	var v []InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToLikesFindMany) Update(params ...PostSetParam) postToLikesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Post"

	r.query.Outputs = countOutput

	var v postToLikesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToLikesUpdateMany struct {
	query builder.Query
}

func (r postToLikesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToLikesUpdateMany) postModel() {}

func (r postToLikesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToLikesUpdateMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToLikesFindMany) Delete() postToLikesDeleteMany {
	var v postToLikesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Post"

	v.query.Outputs = countOutput

	return v
}

type postToLikesDeleteMany struct {
	query builder.Query
}

func (r postToLikesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postToLikesDeleteMany) postModel() {}

func (r postToLikesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToLikesDeleteMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToPublicationPostFindUnique struct {
	query builder.Query
}

func (r postToPublicationPostFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postToPublicationPostFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToPublicationPostFindUnique) with()         {}
func (r postToPublicationPostFindUnique) postModel()    {}
func (r postToPublicationPostFindUnique) postRelation() {}

func (r postToPublicationPostFindUnique) With(params ...PublicationPostRelationWith) postToPublicationPostFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToPublicationPostFindUnique) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToPublicationPostFindUnique) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToPublicationPostFindUnique) Update(params ...PostSetParam) postToPublicationPostUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Post"

	var v postToPublicationPostUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToPublicationPostUpdateUnique struct {
	query builder.Query
}

func (r postToPublicationPostUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postToPublicationPostUpdateUnique) postModel() {}

func (r postToPublicationPostUpdateUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToPublicationPostUpdateUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToPublicationPostFindUnique) Delete() postToPublicationPostDeleteUnique {
	var v postToPublicationPostDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Post"

	return v
}

type postToPublicationPostDeleteUnique struct {
	query builder.Query
}

func (r postToPublicationPostDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postToPublicationPostDeleteUnique) postModel() {}

func (r postToPublicationPostDeleteUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToPublicationPostDeleteUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postToPublicationPostFindFirst struct {
	query builder.Query
}

func (r postToPublicationPostFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postToPublicationPostFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postToPublicationPostFindFirst) with()         {}
func (r postToPublicationPostFindFirst) postModel()    {}
func (r postToPublicationPostFindFirst) postRelation() {}

func (r postToPublicationPostFindFirst) With(params ...PublicationPostRelationWith) postToPublicationPostFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToPublicationPostFindFirst) OrderBy(params ...PublicationPostOrderByParam) postToPublicationPostFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToPublicationPostFindFirst) Skip(count int) postToPublicationPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToPublicationPostFindFirst) Take(count int) postToPublicationPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToPublicationPostFindFirst) Cursor(cursor PostCursorParam) postToPublicationPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToPublicationPostFindFirst) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postToPublicationPostFindFirst) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postToPublicationPostFindMany struct {
	query builder.Query
}

func (r postToPublicationPostFindMany) getQuery() builder.Query {
	return r.query
}

func (r postToPublicationPostFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToPublicationPostFindMany) with()         {}
func (r postToPublicationPostFindMany) postModel()    {}
func (r postToPublicationPostFindMany) postRelation() {}

func (r postToPublicationPostFindMany) With(params ...PublicationPostRelationWith) postToPublicationPostFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postToPublicationPostFindMany) OrderBy(params ...PublicationPostOrderByParam) postToPublicationPostFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postToPublicationPostFindMany) Skip(count int) postToPublicationPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postToPublicationPostFindMany) Take(count int) postToPublicationPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postToPublicationPostFindMany) Cursor(cursor PostCursorParam) postToPublicationPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postToPublicationPostFindMany) Exec(ctx context.Context) (
	[]PostModel,
	error,
) {
	var v []PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToPublicationPostFindMany) ExecInner(ctx context.Context) (
	[]InnerPost,
	error,
) {
	var v []InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postToPublicationPostFindMany) Update(params ...PostSetParam) postToPublicationPostUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Post"

	r.query.Outputs = countOutput

	var v postToPublicationPostUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postToPublicationPostUpdateMany struct {
	query builder.Query
}

func (r postToPublicationPostUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postToPublicationPostUpdateMany) postModel() {}

func (r postToPublicationPostUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToPublicationPostUpdateMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postToPublicationPostFindMany) Delete() postToPublicationPostDeleteMany {
	var v postToPublicationPostDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Post"

	v.query.Outputs = countOutput

	return v
}

type postToPublicationPostDeleteMany struct {
	query builder.Query
}

func (r postToPublicationPostDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postToPublicationPostDeleteMany) postModel() {}

func (r postToPublicationPostDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postToPublicationPostDeleteMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postFindUnique struct {
	query builder.Query
}

func (r postFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postFindUnique) with()         {}
func (r postFindUnique) postModel()    {}
func (r postFindUnique) postRelation() {}

func (r postActions) FindUnique(
	params PostEqualsUniqueWhereParam,
) postFindUnique {
	var v postFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Post"
	v.query.Outputs = postOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r postFindUnique) With(params ...PostRelationWith) postFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postFindUnique) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postFindUnique) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postFindUnique) Update(params ...PostSetParam) postUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Post"

	var v postUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postUpdateUnique struct {
	query builder.Query
}

func (r postUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postUpdateUnique) postModel() {}

func (r postUpdateUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postUpdateUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postFindUnique) Delete() postDeleteUnique {
	var v postDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Post"

	return v
}

type postDeleteUnique struct {
	query builder.Query
}

func (r postDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postDeleteUnique) postModel() {}

func (r postDeleteUnique) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postDeleteUnique) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postFindFirst struct {
	query builder.Query
}

func (r postFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postFindFirst) with()         {}
func (r postFindFirst) postModel()    {}
func (r postFindFirst) postRelation() {}

func (r postActions) FindFirst(
	params ...PostWhereParam,
) postFindFirst {
	var v postFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Post"
	v.query.Outputs = postOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r postFindFirst) With(params ...PostRelationWith) postFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postFindFirst) OrderBy(params ...PostOrderByParam) postFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postFindFirst) Skip(count int) postFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postFindFirst) Take(count int) postFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postFindFirst) Cursor(cursor PostCursorParam) postFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postFindFirst) Exec(ctx context.Context) (
	*PostModel,
	error,
) {
	var v *PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postFindFirst) ExecInner(ctx context.Context) (
	*InnerPost,
	error,
) {
	var v *InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postFindMany struct {
	query builder.Query
}

func (r postFindMany) getQuery() builder.Query {
	return r.query
}

func (r postFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postFindMany) with()         {}
func (r postFindMany) postModel()    {}
func (r postFindMany) postRelation() {}

func (r postActions) FindMany(
	params ...PostWhereParam,
) postFindMany {
	var v postFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Post"
	v.query.Outputs = postOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r postFindMany) With(params ...PostRelationWith) postFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postFindMany) OrderBy(params ...PostOrderByParam) postFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postFindMany) Skip(count int) postFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postFindMany) Take(count int) postFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postFindMany) Cursor(cursor PostCursorParam) postFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postFindMany) Exec(ctx context.Context) (
	[]PostModel,
	error,
) {
	var v []PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postFindMany) ExecInner(ctx context.Context) (
	[]InnerPost,
	error,
) {
	var v []InnerPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postFindMany) Update(params ...PostSetParam) postUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Post"

	r.query.Outputs = countOutput

	var v postUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postUpdateMany struct {
	query builder.Query
}

func (r postUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postUpdateMany) postModel() {}

func (r postUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postUpdateMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postFindMany) Delete() postDeleteMany {
	var v postDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Post"

	v.query.Outputs = countOutput

	return v
}

type postDeleteMany struct {
	query builder.Query
}

func (r postDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postDeleteMany) postModel() {}

func (r postDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postDeleteMany) Tx() PostManyTxResult {
	v := newPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postTagToPostFindUnique struct {
	query builder.Query
}

func (r postTagToPostFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postTagToPostFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagToPostFindUnique) with()            {}
func (r postTagToPostFindUnique) postTagModel()    {}
func (r postTagToPostFindUnique) postTagRelation() {}

func (r postTagToPostFindUnique) With(params ...PostRelationWith) postTagToPostFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postTagToPostFindUnique) Exec(ctx context.Context) (
	*PostTagModel,
	error,
) {
	var v *PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postTagToPostFindUnique) ExecInner(ctx context.Context) (
	*InnerPostTag,
	error,
) {
	var v *InnerPostTag
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postTagToPostFindUnique) Update(params ...PostTagSetParam) postTagToPostUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "PostTag"

	var v postTagToPostUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postTagToPostUpdateUnique struct {
	query builder.Query
}

func (r postTagToPostUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagToPostUpdateUnique) postTagModel() {}

func (r postTagToPostUpdateUnique) Exec(ctx context.Context) (*PostTagModel, error) {
	var v PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postTagToPostUpdateUnique) Tx() PostTagUniqueTxResult {
	v := newPostTagUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postTagToPostFindUnique) Delete() postTagToPostDeleteUnique {
	var v postTagToPostDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "PostTag"

	return v
}

type postTagToPostDeleteUnique struct {
	query builder.Query
}

func (r postTagToPostDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postTagToPostDeleteUnique) postTagModel() {}

func (r postTagToPostDeleteUnique) Exec(ctx context.Context) (*PostTagModel, error) {
	var v PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postTagToPostDeleteUnique) Tx() PostTagUniqueTxResult {
	v := newPostTagUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postTagToPostFindFirst struct {
	query builder.Query
}

func (r postTagToPostFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postTagToPostFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagToPostFindFirst) with()            {}
func (r postTagToPostFindFirst) postTagModel()    {}
func (r postTagToPostFindFirst) postTagRelation() {}

func (r postTagToPostFindFirst) With(params ...PostRelationWith) postTagToPostFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postTagToPostFindFirst) OrderBy(params ...PostOrderByParam) postTagToPostFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postTagToPostFindFirst) Skip(count int) postTagToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postTagToPostFindFirst) Take(count int) postTagToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postTagToPostFindFirst) Cursor(cursor PostTagCursorParam) postTagToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postTagToPostFindFirst) Exec(ctx context.Context) (
	*PostTagModel,
	error,
) {
	var v *PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postTagToPostFindFirst) ExecInner(ctx context.Context) (
	*InnerPostTag,
	error,
) {
	var v *InnerPostTag
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postTagToPostFindMany struct {
	query builder.Query
}

func (r postTagToPostFindMany) getQuery() builder.Query {
	return r.query
}

func (r postTagToPostFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagToPostFindMany) with()            {}
func (r postTagToPostFindMany) postTagModel()    {}
func (r postTagToPostFindMany) postTagRelation() {}

func (r postTagToPostFindMany) With(params ...PostRelationWith) postTagToPostFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postTagToPostFindMany) OrderBy(params ...PostOrderByParam) postTagToPostFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postTagToPostFindMany) Skip(count int) postTagToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postTagToPostFindMany) Take(count int) postTagToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postTagToPostFindMany) Cursor(cursor PostTagCursorParam) postTagToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postTagToPostFindMany) Exec(ctx context.Context) (
	[]PostTagModel,
	error,
) {
	var v []PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postTagToPostFindMany) ExecInner(ctx context.Context) (
	[]InnerPostTag,
	error,
) {
	var v []InnerPostTag
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postTagToPostFindMany) Update(params ...PostTagSetParam) postTagToPostUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "PostTag"

	r.query.Outputs = countOutput

	var v postTagToPostUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postTagToPostUpdateMany struct {
	query builder.Query
}

func (r postTagToPostUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagToPostUpdateMany) postTagModel() {}

func (r postTagToPostUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postTagToPostUpdateMany) Tx() PostTagManyTxResult {
	v := newPostTagManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postTagToPostFindMany) Delete() postTagToPostDeleteMany {
	var v postTagToPostDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "PostTag"

	v.query.Outputs = countOutput

	return v
}

type postTagToPostDeleteMany struct {
	query builder.Query
}

func (r postTagToPostDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postTagToPostDeleteMany) postTagModel() {}

func (r postTagToPostDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postTagToPostDeleteMany) Tx() PostTagManyTxResult {
	v := newPostTagManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postTagFindUnique struct {
	query builder.Query
}

func (r postTagFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postTagFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagFindUnique) with()            {}
func (r postTagFindUnique) postTagModel()    {}
func (r postTagFindUnique) postTagRelation() {}

func (r postTagActions) FindUnique(
	params PostTagEqualsUniqueWhereParam,
) postTagFindUnique {
	var v postTagFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "PostTag"
	v.query.Outputs = postTagOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r postTagFindUnique) With(params ...PostTagRelationWith) postTagFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postTagFindUnique) Exec(ctx context.Context) (
	*PostTagModel,
	error,
) {
	var v *PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postTagFindUnique) ExecInner(ctx context.Context) (
	*InnerPostTag,
	error,
) {
	var v *InnerPostTag
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postTagFindUnique) Update(params ...PostTagSetParam) postTagUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "PostTag"

	var v postTagUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postTagUpdateUnique struct {
	query builder.Query
}

func (r postTagUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagUpdateUnique) postTagModel() {}

func (r postTagUpdateUnique) Exec(ctx context.Context) (*PostTagModel, error) {
	var v PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postTagUpdateUnique) Tx() PostTagUniqueTxResult {
	v := newPostTagUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postTagFindUnique) Delete() postTagDeleteUnique {
	var v postTagDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "PostTag"

	return v
}

type postTagDeleteUnique struct {
	query builder.Query
}

func (r postTagDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postTagDeleteUnique) postTagModel() {}

func (r postTagDeleteUnique) Exec(ctx context.Context) (*PostTagModel, error) {
	var v PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postTagDeleteUnique) Tx() PostTagUniqueTxResult {
	v := newPostTagUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postTagFindFirst struct {
	query builder.Query
}

func (r postTagFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postTagFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagFindFirst) with()            {}
func (r postTagFindFirst) postTagModel()    {}
func (r postTagFindFirst) postTagRelation() {}

func (r postTagActions) FindFirst(
	params ...PostTagWhereParam,
) postTagFindFirst {
	var v postTagFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "PostTag"
	v.query.Outputs = postTagOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r postTagFindFirst) With(params ...PostTagRelationWith) postTagFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postTagFindFirst) OrderBy(params ...PostTagOrderByParam) postTagFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postTagFindFirst) Skip(count int) postTagFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postTagFindFirst) Take(count int) postTagFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postTagFindFirst) Cursor(cursor PostTagCursorParam) postTagFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postTagFindFirst) Exec(ctx context.Context) (
	*PostTagModel,
	error,
) {
	var v *PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postTagFindFirst) ExecInner(ctx context.Context) (
	*InnerPostTag,
	error,
) {
	var v *InnerPostTag
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postTagFindMany struct {
	query builder.Query
}

func (r postTagFindMany) getQuery() builder.Query {
	return r.query
}

func (r postTagFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagFindMany) with()            {}
func (r postTagFindMany) postTagModel()    {}
func (r postTagFindMany) postTagRelation() {}

func (r postTagActions) FindMany(
	params ...PostTagWhereParam,
) postTagFindMany {
	var v postTagFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "PostTag"
	v.query.Outputs = postTagOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r postTagFindMany) With(params ...PostTagRelationWith) postTagFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postTagFindMany) OrderBy(params ...PostTagOrderByParam) postTagFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postTagFindMany) Skip(count int) postTagFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postTagFindMany) Take(count int) postTagFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postTagFindMany) Cursor(cursor PostTagCursorParam) postTagFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postTagFindMany) Exec(ctx context.Context) (
	[]PostTagModel,
	error,
) {
	var v []PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postTagFindMany) ExecInner(ctx context.Context) (
	[]InnerPostTag,
	error,
) {
	var v []InnerPostTag
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postTagFindMany) Update(params ...PostTagSetParam) postTagUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "PostTag"

	r.query.Outputs = countOutput

	var v postTagUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postTagUpdateMany struct {
	query builder.Query
}

func (r postTagUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagUpdateMany) postTagModel() {}

func (r postTagUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postTagUpdateMany) Tx() PostTagManyTxResult {
	v := newPostTagManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postTagFindMany) Delete() postTagDeleteMany {
	var v postTagDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "PostTag"

	v.query.Outputs = countOutput

	return v
}

type postTagDeleteMany struct {
	query builder.Query
}

func (r postTagDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postTagDeleteMany) postTagModel() {}

func (r postTagDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postTagDeleteMany) Tx() PostTagManyTxResult {
	v := newPostTagManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postCategoryToPostFindUnique struct {
	query builder.Query
}

func (r postCategoryToPostFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postCategoryToPostFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryToPostFindUnique) with()                 {}
func (r postCategoryToPostFindUnique) postCategoryModel()    {}
func (r postCategoryToPostFindUnique) postCategoryRelation() {}

func (r postCategoryToPostFindUnique) With(params ...PostRelationWith) postCategoryToPostFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postCategoryToPostFindUnique) Exec(ctx context.Context) (
	*PostCategoryModel,
	error,
) {
	var v *PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postCategoryToPostFindUnique) ExecInner(ctx context.Context) (
	*InnerPostCategory,
	error,
) {
	var v *InnerPostCategory
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postCategoryToPostFindUnique) Update(params ...PostCategorySetParam) postCategoryToPostUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "PostCategory"

	var v postCategoryToPostUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postCategoryToPostUpdateUnique struct {
	query builder.Query
}

func (r postCategoryToPostUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryToPostUpdateUnique) postCategoryModel() {}

func (r postCategoryToPostUpdateUnique) Exec(ctx context.Context) (*PostCategoryModel, error) {
	var v PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCategoryToPostUpdateUnique) Tx() PostCategoryUniqueTxResult {
	v := newPostCategoryUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postCategoryToPostFindUnique) Delete() postCategoryToPostDeleteUnique {
	var v postCategoryToPostDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "PostCategory"

	return v
}

type postCategoryToPostDeleteUnique struct {
	query builder.Query
}

func (r postCategoryToPostDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postCategoryToPostDeleteUnique) postCategoryModel() {}

func (r postCategoryToPostDeleteUnique) Exec(ctx context.Context) (*PostCategoryModel, error) {
	var v PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCategoryToPostDeleteUnique) Tx() PostCategoryUniqueTxResult {
	v := newPostCategoryUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postCategoryToPostFindFirst struct {
	query builder.Query
}

func (r postCategoryToPostFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postCategoryToPostFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryToPostFindFirst) with()                 {}
func (r postCategoryToPostFindFirst) postCategoryModel()    {}
func (r postCategoryToPostFindFirst) postCategoryRelation() {}

func (r postCategoryToPostFindFirst) With(params ...PostRelationWith) postCategoryToPostFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postCategoryToPostFindFirst) OrderBy(params ...PostOrderByParam) postCategoryToPostFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postCategoryToPostFindFirst) Skip(count int) postCategoryToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postCategoryToPostFindFirst) Take(count int) postCategoryToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postCategoryToPostFindFirst) Cursor(cursor PostCategoryCursorParam) postCategoryToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postCategoryToPostFindFirst) Exec(ctx context.Context) (
	*PostCategoryModel,
	error,
) {
	var v *PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postCategoryToPostFindFirst) ExecInner(ctx context.Context) (
	*InnerPostCategory,
	error,
) {
	var v *InnerPostCategory
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postCategoryToPostFindMany struct {
	query builder.Query
}

func (r postCategoryToPostFindMany) getQuery() builder.Query {
	return r.query
}

func (r postCategoryToPostFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryToPostFindMany) with()                 {}
func (r postCategoryToPostFindMany) postCategoryModel()    {}
func (r postCategoryToPostFindMany) postCategoryRelation() {}

func (r postCategoryToPostFindMany) With(params ...PostRelationWith) postCategoryToPostFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postCategoryToPostFindMany) OrderBy(params ...PostOrderByParam) postCategoryToPostFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postCategoryToPostFindMany) Skip(count int) postCategoryToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postCategoryToPostFindMany) Take(count int) postCategoryToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postCategoryToPostFindMany) Cursor(cursor PostCategoryCursorParam) postCategoryToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postCategoryToPostFindMany) Exec(ctx context.Context) (
	[]PostCategoryModel,
	error,
) {
	var v []PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postCategoryToPostFindMany) ExecInner(ctx context.Context) (
	[]InnerPostCategory,
	error,
) {
	var v []InnerPostCategory
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postCategoryToPostFindMany) Update(params ...PostCategorySetParam) postCategoryToPostUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "PostCategory"

	r.query.Outputs = countOutput

	var v postCategoryToPostUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postCategoryToPostUpdateMany struct {
	query builder.Query
}

func (r postCategoryToPostUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryToPostUpdateMany) postCategoryModel() {}

func (r postCategoryToPostUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCategoryToPostUpdateMany) Tx() PostCategoryManyTxResult {
	v := newPostCategoryManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postCategoryToPostFindMany) Delete() postCategoryToPostDeleteMany {
	var v postCategoryToPostDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "PostCategory"

	v.query.Outputs = countOutput

	return v
}

type postCategoryToPostDeleteMany struct {
	query builder.Query
}

func (r postCategoryToPostDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postCategoryToPostDeleteMany) postCategoryModel() {}

func (r postCategoryToPostDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCategoryToPostDeleteMany) Tx() PostCategoryManyTxResult {
	v := newPostCategoryManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postCategoryFindUnique struct {
	query builder.Query
}

func (r postCategoryFindUnique) getQuery() builder.Query {
	return r.query
}

func (r postCategoryFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryFindUnique) with()                 {}
func (r postCategoryFindUnique) postCategoryModel()    {}
func (r postCategoryFindUnique) postCategoryRelation() {}

func (r postCategoryActions) FindUnique(
	params PostCategoryEqualsUniqueWhereParam,
) postCategoryFindUnique {
	var v postCategoryFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "PostCategory"
	v.query.Outputs = postCategoryOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r postCategoryFindUnique) With(params ...PostCategoryRelationWith) postCategoryFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postCategoryFindUnique) Exec(ctx context.Context) (
	*PostCategoryModel,
	error,
) {
	var v *PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postCategoryFindUnique) ExecInner(ctx context.Context) (
	*InnerPostCategory,
	error,
) {
	var v *InnerPostCategory
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postCategoryFindUnique) Update(params ...PostCategorySetParam) postCategoryUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "PostCategory"

	var v postCategoryUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postCategoryUpdateUnique struct {
	query builder.Query
}

func (r postCategoryUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryUpdateUnique) postCategoryModel() {}

func (r postCategoryUpdateUnique) Exec(ctx context.Context) (*PostCategoryModel, error) {
	var v PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCategoryUpdateUnique) Tx() PostCategoryUniqueTxResult {
	v := newPostCategoryUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postCategoryFindUnique) Delete() postCategoryDeleteUnique {
	var v postCategoryDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "PostCategory"

	return v
}

type postCategoryDeleteUnique struct {
	query builder.Query
}

func (r postCategoryDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p postCategoryDeleteUnique) postCategoryModel() {}

func (r postCategoryDeleteUnique) Exec(ctx context.Context) (*PostCategoryModel, error) {
	var v PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCategoryDeleteUnique) Tx() PostCategoryUniqueTxResult {
	v := newPostCategoryUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postCategoryFindFirst struct {
	query builder.Query
}

func (r postCategoryFindFirst) getQuery() builder.Query {
	return r.query
}

func (r postCategoryFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryFindFirst) with()                 {}
func (r postCategoryFindFirst) postCategoryModel()    {}
func (r postCategoryFindFirst) postCategoryRelation() {}

func (r postCategoryActions) FindFirst(
	params ...PostCategoryWhereParam,
) postCategoryFindFirst {
	var v postCategoryFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "PostCategory"
	v.query.Outputs = postCategoryOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r postCategoryFindFirst) With(params ...PostCategoryRelationWith) postCategoryFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postCategoryFindFirst) OrderBy(params ...PostCategoryOrderByParam) postCategoryFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postCategoryFindFirst) Skip(count int) postCategoryFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postCategoryFindFirst) Take(count int) postCategoryFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postCategoryFindFirst) Cursor(cursor PostCategoryCursorParam) postCategoryFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postCategoryFindFirst) Exec(ctx context.Context) (
	*PostCategoryModel,
	error,
) {
	var v *PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r postCategoryFindFirst) ExecInner(ctx context.Context) (
	*InnerPostCategory,
	error,
) {
	var v *InnerPostCategory
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type postCategoryFindMany struct {
	query builder.Query
}

func (r postCategoryFindMany) getQuery() builder.Query {
	return r.query
}

func (r postCategoryFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryFindMany) with()                 {}
func (r postCategoryFindMany) postCategoryModel()    {}
func (r postCategoryFindMany) postCategoryRelation() {}

func (r postCategoryActions) FindMany(
	params ...PostCategoryWhereParam,
) postCategoryFindMany {
	var v postCategoryFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "PostCategory"
	v.query.Outputs = postCategoryOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r postCategoryFindMany) With(params ...PostCategoryRelationWith) postCategoryFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r postCategoryFindMany) OrderBy(params ...PostCategoryOrderByParam) postCategoryFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r postCategoryFindMany) Skip(count int) postCategoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r postCategoryFindMany) Take(count int) postCategoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r postCategoryFindMany) Cursor(cursor PostCategoryCursorParam) postCategoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r postCategoryFindMany) Exec(ctx context.Context) (
	[]PostCategoryModel,
	error,
) {
	var v []PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postCategoryFindMany) ExecInner(ctx context.Context) (
	[]InnerPostCategory,
	error,
) {
	var v []InnerPostCategory
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r postCategoryFindMany) Update(params ...PostCategorySetParam) postCategoryUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "PostCategory"

	r.query.Outputs = countOutput

	var v postCategoryUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type postCategoryUpdateMany struct {
	query builder.Query
}

func (r postCategoryUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryUpdateMany) postCategoryModel() {}

func (r postCategoryUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCategoryUpdateMany) Tx() PostCategoryManyTxResult {
	v := newPostCategoryManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r postCategoryFindMany) Delete() postCategoryDeleteMany {
	var v postCategoryDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "PostCategory"

	v.query.Outputs = countOutput

	return v
}

type postCategoryDeleteMany struct {
	query builder.Query
}

func (r postCategoryDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p postCategoryDeleteMany) postCategoryModel() {}

func (r postCategoryDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCategoryDeleteMany) Tx() PostCategoryManyTxResult {
	v := newPostCategoryManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type commentToUserFindUnique struct {
	query builder.Query
}

func (r commentToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r commentToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r commentToUserFindUnique) with()            {}
func (r commentToUserFindUnique) commentModel()    {}
func (r commentToUserFindUnique) commentRelation() {}

func (r commentToUserFindUnique) With(params ...UserRelationWith) commentToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r commentToUserFindUnique) Exec(ctx context.Context) (
	*CommentModel,
	error,
) {
	var v *CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r commentToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerComment,
	error,
) {
	var v *InnerComment
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r commentToUserFindUnique) Update(params ...CommentSetParam) commentToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Comment"

	var v commentToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type commentToUserUpdateUnique struct {
	query builder.Query
}

func (r commentToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r commentToUserUpdateUnique) commentModel() {}

func (r commentToUserUpdateUnique) Exec(ctx context.Context) (*CommentModel, error) {
	var v CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentToUserUpdateUnique) Tx() CommentUniqueTxResult {
	v := newCommentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r commentToUserFindUnique) Delete() commentToUserDeleteUnique {
	var v commentToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Comment"

	return v
}

type commentToUserDeleteUnique struct {
	query builder.Query
}

func (r commentToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p commentToUserDeleteUnique) commentModel() {}

func (r commentToUserDeleteUnique) Exec(ctx context.Context) (*CommentModel, error) {
	var v CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentToUserDeleteUnique) Tx() CommentUniqueTxResult {
	v := newCommentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type commentToUserFindFirst struct {
	query builder.Query
}

func (r commentToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r commentToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r commentToUserFindFirst) with()            {}
func (r commentToUserFindFirst) commentModel()    {}
func (r commentToUserFindFirst) commentRelation() {}

func (r commentToUserFindFirst) With(params ...UserRelationWith) commentToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r commentToUserFindFirst) OrderBy(params ...UserOrderByParam) commentToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r commentToUserFindFirst) Skip(count int) commentToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r commentToUserFindFirst) Take(count int) commentToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r commentToUserFindFirst) Cursor(cursor CommentCursorParam) commentToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r commentToUserFindFirst) Exec(ctx context.Context) (
	*CommentModel,
	error,
) {
	var v *CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r commentToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerComment,
	error,
) {
	var v *InnerComment
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type commentToUserFindMany struct {
	query builder.Query
}

func (r commentToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r commentToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r commentToUserFindMany) with()            {}
func (r commentToUserFindMany) commentModel()    {}
func (r commentToUserFindMany) commentRelation() {}

func (r commentToUserFindMany) With(params ...UserRelationWith) commentToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r commentToUserFindMany) OrderBy(params ...UserOrderByParam) commentToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r commentToUserFindMany) Skip(count int) commentToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r commentToUserFindMany) Take(count int) commentToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r commentToUserFindMany) Cursor(cursor CommentCursorParam) commentToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r commentToUserFindMany) Exec(ctx context.Context) (
	[]CommentModel,
	error,
) {
	var v []CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r commentToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerComment,
	error,
) {
	var v []InnerComment
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r commentToUserFindMany) Update(params ...CommentSetParam) commentToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Comment"

	r.query.Outputs = countOutput

	var v commentToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type commentToUserUpdateMany struct {
	query builder.Query
}

func (r commentToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r commentToUserUpdateMany) commentModel() {}

func (r commentToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentToUserUpdateMany) Tx() CommentManyTxResult {
	v := newCommentManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r commentToUserFindMany) Delete() commentToUserDeleteMany {
	var v commentToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Comment"

	v.query.Outputs = countOutput

	return v
}

type commentToUserDeleteMany struct {
	query builder.Query
}

func (r commentToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p commentToUserDeleteMany) commentModel() {}

func (r commentToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentToUserDeleteMany) Tx() CommentManyTxResult {
	v := newCommentManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type commentToPostFindUnique struct {
	query builder.Query
}

func (r commentToPostFindUnique) getQuery() builder.Query {
	return r.query
}

func (r commentToPostFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r commentToPostFindUnique) with()            {}
func (r commentToPostFindUnique) commentModel()    {}
func (r commentToPostFindUnique) commentRelation() {}

func (r commentToPostFindUnique) With(params ...PostRelationWith) commentToPostFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r commentToPostFindUnique) Exec(ctx context.Context) (
	*CommentModel,
	error,
) {
	var v *CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r commentToPostFindUnique) ExecInner(ctx context.Context) (
	*InnerComment,
	error,
) {
	var v *InnerComment
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r commentToPostFindUnique) Update(params ...CommentSetParam) commentToPostUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Comment"

	var v commentToPostUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type commentToPostUpdateUnique struct {
	query builder.Query
}

func (r commentToPostUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r commentToPostUpdateUnique) commentModel() {}

func (r commentToPostUpdateUnique) Exec(ctx context.Context) (*CommentModel, error) {
	var v CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentToPostUpdateUnique) Tx() CommentUniqueTxResult {
	v := newCommentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r commentToPostFindUnique) Delete() commentToPostDeleteUnique {
	var v commentToPostDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Comment"

	return v
}

type commentToPostDeleteUnique struct {
	query builder.Query
}

func (r commentToPostDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p commentToPostDeleteUnique) commentModel() {}

func (r commentToPostDeleteUnique) Exec(ctx context.Context) (*CommentModel, error) {
	var v CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentToPostDeleteUnique) Tx() CommentUniqueTxResult {
	v := newCommentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type commentToPostFindFirst struct {
	query builder.Query
}

func (r commentToPostFindFirst) getQuery() builder.Query {
	return r.query
}

func (r commentToPostFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r commentToPostFindFirst) with()            {}
func (r commentToPostFindFirst) commentModel()    {}
func (r commentToPostFindFirst) commentRelation() {}

func (r commentToPostFindFirst) With(params ...PostRelationWith) commentToPostFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r commentToPostFindFirst) OrderBy(params ...PostOrderByParam) commentToPostFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r commentToPostFindFirst) Skip(count int) commentToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r commentToPostFindFirst) Take(count int) commentToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r commentToPostFindFirst) Cursor(cursor CommentCursorParam) commentToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r commentToPostFindFirst) Exec(ctx context.Context) (
	*CommentModel,
	error,
) {
	var v *CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r commentToPostFindFirst) ExecInner(ctx context.Context) (
	*InnerComment,
	error,
) {
	var v *InnerComment
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type commentToPostFindMany struct {
	query builder.Query
}

func (r commentToPostFindMany) getQuery() builder.Query {
	return r.query
}

func (r commentToPostFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r commentToPostFindMany) with()            {}
func (r commentToPostFindMany) commentModel()    {}
func (r commentToPostFindMany) commentRelation() {}

func (r commentToPostFindMany) With(params ...PostRelationWith) commentToPostFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r commentToPostFindMany) OrderBy(params ...PostOrderByParam) commentToPostFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r commentToPostFindMany) Skip(count int) commentToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r commentToPostFindMany) Take(count int) commentToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r commentToPostFindMany) Cursor(cursor CommentCursorParam) commentToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r commentToPostFindMany) Exec(ctx context.Context) (
	[]CommentModel,
	error,
) {
	var v []CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r commentToPostFindMany) ExecInner(ctx context.Context) (
	[]InnerComment,
	error,
) {
	var v []InnerComment
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r commentToPostFindMany) Update(params ...CommentSetParam) commentToPostUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Comment"

	r.query.Outputs = countOutput

	var v commentToPostUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type commentToPostUpdateMany struct {
	query builder.Query
}

func (r commentToPostUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r commentToPostUpdateMany) commentModel() {}

func (r commentToPostUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentToPostUpdateMany) Tx() CommentManyTxResult {
	v := newCommentManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r commentToPostFindMany) Delete() commentToPostDeleteMany {
	var v commentToPostDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Comment"

	v.query.Outputs = countOutput

	return v
}

type commentToPostDeleteMany struct {
	query builder.Query
}

func (r commentToPostDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p commentToPostDeleteMany) commentModel() {}

func (r commentToPostDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentToPostDeleteMany) Tx() CommentManyTxResult {
	v := newCommentManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type commentFindUnique struct {
	query builder.Query
}

func (r commentFindUnique) getQuery() builder.Query {
	return r.query
}

func (r commentFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r commentFindUnique) with()            {}
func (r commentFindUnique) commentModel()    {}
func (r commentFindUnique) commentRelation() {}

func (r commentActions) FindUnique(
	params CommentEqualsUniqueWhereParam,
) commentFindUnique {
	var v commentFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Comment"
	v.query.Outputs = commentOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r commentFindUnique) With(params ...CommentRelationWith) commentFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r commentFindUnique) Exec(ctx context.Context) (
	*CommentModel,
	error,
) {
	var v *CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r commentFindUnique) ExecInner(ctx context.Context) (
	*InnerComment,
	error,
) {
	var v *InnerComment
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r commentFindUnique) Update(params ...CommentSetParam) commentUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Comment"

	var v commentUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type commentUpdateUnique struct {
	query builder.Query
}

func (r commentUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r commentUpdateUnique) commentModel() {}

func (r commentUpdateUnique) Exec(ctx context.Context) (*CommentModel, error) {
	var v CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentUpdateUnique) Tx() CommentUniqueTxResult {
	v := newCommentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r commentFindUnique) Delete() commentDeleteUnique {
	var v commentDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Comment"

	return v
}

type commentDeleteUnique struct {
	query builder.Query
}

func (r commentDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p commentDeleteUnique) commentModel() {}

func (r commentDeleteUnique) Exec(ctx context.Context) (*CommentModel, error) {
	var v CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentDeleteUnique) Tx() CommentUniqueTxResult {
	v := newCommentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type commentFindFirst struct {
	query builder.Query
}

func (r commentFindFirst) getQuery() builder.Query {
	return r.query
}

func (r commentFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r commentFindFirst) with()            {}
func (r commentFindFirst) commentModel()    {}
func (r commentFindFirst) commentRelation() {}

func (r commentActions) FindFirst(
	params ...CommentWhereParam,
) commentFindFirst {
	var v commentFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Comment"
	v.query.Outputs = commentOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r commentFindFirst) With(params ...CommentRelationWith) commentFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r commentFindFirst) OrderBy(params ...CommentOrderByParam) commentFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r commentFindFirst) Skip(count int) commentFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r commentFindFirst) Take(count int) commentFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r commentFindFirst) Cursor(cursor CommentCursorParam) commentFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r commentFindFirst) Exec(ctx context.Context) (
	*CommentModel,
	error,
) {
	var v *CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r commentFindFirst) ExecInner(ctx context.Context) (
	*InnerComment,
	error,
) {
	var v *InnerComment
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type commentFindMany struct {
	query builder.Query
}

func (r commentFindMany) getQuery() builder.Query {
	return r.query
}

func (r commentFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r commentFindMany) with()            {}
func (r commentFindMany) commentModel()    {}
func (r commentFindMany) commentRelation() {}

func (r commentActions) FindMany(
	params ...CommentWhereParam,
) commentFindMany {
	var v commentFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Comment"
	v.query.Outputs = commentOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r commentFindMany) With(params ...CommentRelationWith) commentFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r commentFindMany) OrderBy(params ...CommentOrderByParam) commentFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r commentFindMany) Skip(count int) commentFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r commentFindMany) Take(count int) commentFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r commentFindMany) Cursor(cursor CommentCursorParam) commentFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r commentFindMany) Exec(ctx context.Context) (
	[]CommentModel,
	error,
) {
	var v []CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r commentFindMany) ExecInner(ctx context.Context) (
	[]InnerComment,
	error,
) {
	var v []InnerComment
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r commentFindMany) Update(params ...CommentSetParam) commentUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Comment"

	r.query.Outputs = countOutput

	var v commentUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type commentUpdateMany struct {
	query builder.Query
}

func (r commentUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r commentUpdateMany) commentModel() {}

func (r commentUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentUpdateMany) Tx() CommentManyTxResult {
	v := newCommentManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r commentFindMany) Delete() commentDeleteMany {
	var v commentDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Comment"

	v.query.Outputs = countOutput

	return v
}

type commentDeleteMany struct {
	query builder.Query
}

func (r commentDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p commentDeleteMany) commentModel() {}

func (r commentDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentDeleteMany) Tx() CommentManyTxResult {
	v := newCommentManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type likeToUserFindUnique struct {
	query builder.Query
}

func (r likeToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r likeToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r likeToUserFindUnique) with()         {}
func (r likeToUserFindUnique) likeModel()    {}
func (r likeToUserFindUnique) likeRelation() {}

func (r likeToUserFindUnique) With(params ...UserRelationWith) likeToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r likeToUserFindUnique) Exec(ctx context.Context) (
	*LikeModel,
	error,
) {
	var v *LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r likeToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerLike,
	error,
) {
	var v *InnerLike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r likeToUserFindUnique) Update(params ...LikeSetParam) likeToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Like"

	var v likeToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type likeToUserUpdateUnique struct {
	query builder.Query
}

func (r likeToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r likeToUserUpdateUnique) likeModel() {}

func (r likeToUserUpdateUnique) Exec(ctx context.Context) (*LikeModel, error) {
	var v LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeToUserUpdateUnique) Tx() LikeUniqueTxResult {
	v := newLikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r likeToUserFindUnique) Delete() likeToUserDeleteUnique {
	var v likeToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Like"

	return v
}

type likeToUserDeleteUnique struct {
	query builder.Query
}

func (r likeToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p likeToUserDeleteUnique) likeModel() {}

func (r likeToUserDeleteUnique) Exec(ctx context.Context) (*LikeModel, error) {
	var v LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeToUserDeleteUnique) Tx() LikeUniqueTxResult {
	v := newLikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type likeToUserFindFirst struct {
	query builder.Query
}

func (r likeToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r likeToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r likeToUserFindFirst) with()         {}
func (r likeToUserFindFirst) likeModel()    {}
func (r likeToUserFindFirst) likeRelation() {}

func (r likeToUserFindFirst) With(params ...UserRelationWith) likeToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r likeToUserFindFirst) OrderBy(params ...UserOrderByParam) likeToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r likeToUserFindFirst) Skip(count int) likeToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r likeToUserFindFirst) Take(count int) likeToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r likeToUserFindFirst) Cursor(cursor LikeCursorParam) likeToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r likeToUserFindFirst) Exec(ctx context.Context) (
	*LikeModel,
	error,
) {
	var v *LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r likeToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerLike,
	error,
) {
	var v *InnerLike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type likeToUserFindMany struct {
	query builder.Query
}

func (r likeToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r likeToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r likeToUserFindMany) with()         {}
func (r likeToUserFindMany) likeModel()    {}
func (r likeToUserFindMany) likeRelation() {}

func (r likeToUserFindMany) With(params ...UserRelationWith) likeToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r likeToUserFindMany) OrderBy(params ...UserOrderByParam) likeToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r likeToUserFindMany) Skip(count int) likeToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r likeToUserFindMany) Take(count int) likeToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r likeToUserFindMany) Cursor(cursor LikeCursorParam) likeToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r likeToUserFindMany) Exec(ctx context.Context) (
	[]LikeModel,
	error,
) {
	var v []LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r likeToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerLike,
	error,
) {
	var v []InnerLike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r likeToUserFindMany) Update(params ...LikeSetParam) likeToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Like"

	r.query.Outputs = countOutput

	var v likeToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type likeToUserUpdateMany struct {
	query builder.Query
}

func (r likeToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r likeToUserUpdateMany) likeModel() {}

func (r likeToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeToUserUpdateMany) Tx() LikeManyTxResult {
	v := newLikeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r likeToUserFindMany) Delete() likeToUserDeleteMany {
	var v likeToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Like"

	v.query.Outputs = countOutput

	return v
}

type likeToUserDeleteMany struct {
	query builder.Query
}

func (r likeToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p likeToUserDeleteMany) likeModel() {}

func (r likeToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeToUserDeleteMany) Tx() LikeManyTxResult {
	v := newLikeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type likeToPostFindUnique struct {
	query builder.Query
}

func (r likeToPostFindUnique) getQuery() builder.Query {
	return r.query
}

func (r likeToPostFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r likeToPostFindUnique) with()         {}
func (r likeToPostFindUnique) likeModel()    {}
func (r likeToPostFindUnique) likeRelation() {}

func (r likeToPostFindUnique) With(params ...PostRelationWith) likeToPostFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r likeToPostFindUnique) Exec(ctx context.Context) (
	*LikeModel,
	error,
) {
	var v *LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r likeToPostFindUnique) ExecInner(ctx context.Context) (
	*InnerLike,
	error,
) {
	var v *InnerLike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r likeToPostFindUnique) Update(params ...LikeSetParam) likeToPostUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Like"

	var v likeToPostUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type likeToPostUpdateUnique struct {
	query builder.Query
}

func (r likeToPostUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r likeToPostUpdateUnique) likeModel() {}

func (r likeToPostUpdateUnique) Exec(ctx context.Context) (*LikeModel, error) {
	var v LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeToPostUpdateUnique) Tx() LikeUniqueTxResult {
	v := newLikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r likeToPostFindUnique) Delete() likeToPostDeleteUnique {
	var v likeToPostDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Like"

	return v
}

type likeToPostDeleteUnique struct {
	query builder.Query
}

func (r likeToPostDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p likeToPostDeleteUnique) likeModel() {}

func (r likeToPostDeleteUnique) Exec(ctx context.Context) (*LikeModel, error) {
	var v LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeToPostDeleteUnique) Tx() LikeUniqueTxResult {
	v := newLikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type likeToPostFindFirst struct {
	query builder.Query
}

func (r likeToPostFindFirst) getQuery() builder.Query {
	return r.query
}

func (r likeToPostFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r likeToPostFindFirst) with()         {}
func (r likeToPostFindFirst) likeModel()    {}
func (r likeToPostFindFirst) likeRelation() {}

func (r likeToPostFindFirst) With(params ...PostRelationWith) likeToPostFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r likeToPostFindFirst) OrderBy(params ...PostOrderByParam) likeToPostFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r likeToPostFindFirst) Skip(count int) likeToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r likeToPostFindFirst) Take(count int) likeToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r likeToPostFindFirst) Cursor(cursor LikeCursorParam) likeToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r likeToPostFindFirst) Exec(ctx context.Context) (
	*LikeModel,
	error,
) {
	var v *LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r likeToPostFindFirst) ExecInner(ctx context.Context) (
	*InnerLike,
	error,
) {
	var v *InnerLike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type likeToPostFindMany struct {
	query builder.Query
}

func (r likeToPostFindMany) getQuery() builder.Query {
	return r.query
}

func (r likeToPostFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r likeToPostFindMany) with()         {}
func (r likeToPostFindMany) likeModel()    {}
func (r likeToPostFindMany) likeRelation() {}

func (r likeToPostFindMany) With(params ...PostRelationWith) likeToPostFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r likeToPostFindMany) OrderBy(params ...PostOrderByParam) likeToPostFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r likeToPostFindMany) Skip(count int) likeToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r likeToPostFindMany) Take(count int) likeToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r likeToPostFindMany) Cursor(cursor LikeCursorParam) likeToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r likeToPostFindMany) Exec(ctx context.Context) (
	[]LikeModel,
	error,
) {
	var v []LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r likeToPostFindMany) ExecInner(ctx context.Context) (
	[]InnerLike,
	error,
) {
	var v []InnerLike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r likeToPostFindMany) Update(params ...LikeSetParam) likeToPostUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Like"

	r.query.Outputs = countOutput

	var v likeToPostUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type likeToPostUpdateMany struct {
	query builder.Query
}

func (r likeToPostUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r likeToPostUpdateMany) likeModel() {}

func (r likeToPostUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeToPostUpdateMany) Tx() LikeManyTxResult {
	v := newLikeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r likeToPostFindMany) Delete() likeToPostDeleteMany {
	var v likeToPostDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Like"

	v.query.Outputs = countOutput

	return v
}

type likeToPostDeleteMany struct {
	query builder.Query
}

func (r likeToPostDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p likeToPostDeleteMany) likeModel() {}

func (r likeToPostDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeToPostDeleteMany) Tx() LikeManyTxResult {
	v := newLikeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type likeFindUnique struct {
	query builder.Query
}

func (r likeFindUnique) getQuery() builder.Query {
	return r.query
}

func (r likeFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r likeFindUnique) with()         {}
func (r likeFindUnique) likeModel()    {}
func (r likeFindUnique) likeRelation() {}

func (r likeActions) FindUnique(
	params LikeEqualsUniqueWhereParam,
) likeFindUnique {
	var v likeFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Like"
	v.query.Outputs = likeOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r likeFindUnique) With(params ...LikeRelationWith) likeFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r likeFindUnique) Exec(ctx context.Context) (
	*LikeModel,
	error,
) {
	var v *LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r likeFindUnique) ExecInner(ctx context.Context) (
	*InnerLike,
	error,
) {
	var v *InnerLike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r likeFindUnique) Update(params ...LikeSetParam) likeUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Like"

	var v likeUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type likeUpdateUnique struct {
	query builder.Query
}

func (r likeUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r likeUpdateUnique) likeModel() {}

func (r likeUpdateUnique) Exec(ctx context.Context) (*LikeModel, error) {
	var v LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeUpdateUnique) Tx() LikeUniqueTxResult {
	v := newLikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r likeFindUnique) Delete() likeDeleteUnique {
	var v likeDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Like"

	return v
}

type likeDeleteUnique struct {
	query builder.Query
}

func (r likeDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p likeDeleteUnique) likeModel() {}

func (r likeDeleteUnique) Exec(ctx context.Context) (*LikeModel, error) {
	var v LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeDeleteUnique) Tx() LikeUniqueTxResult {
	v := newLikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type likeFindFirst struct {
	query builder.Query
}

func (r likeFindFirst) getQuery() builder.Query {
	return r.query
}

func (r likeFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r likeFindFirst) with()         {}
func (r likeFindFirst) likeModel()    {}
func (r likeFindFirst) likeRelation() {}

func (r likeActions) FindFirst(
	params ...LikeWhereParam,
) likeFindFirst {
	var v likeFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Like"
	v.query.Outputs = likeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r likeFindFirst) With(params ...LikeRelationWith) likeFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r likeFindFirst) OrderBy(params ...LikeOrderByParam) likeFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r likeFindFirst) Skip(count int) likeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r likeFindFirst) Take(count int) likeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r likeFindFirst) Cursor(cursor LikeCursorParam) likeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r likeFindFirst) Exec(ctx context.Context) (
	*LikeModel,
	error,
) {
	var v *LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r likeFindFirst) ExecInner(ctx context.Context) (
	*InnerLike,
	error,
) {
	var v *InnerLike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type likeFindMany struct {
	query builder.Query
}

func (r likeFindMany) getQuery() builder.Query {
	return r.query
}

func (r likeFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r likeFindMany) with()         {}
func (r likeFindMany) likeModel()    {}
func (r likeFindMany) likeRelation() {}

func (r likeActions) FindMany(
	params ...LikeWhereParam,
) likeFindMany {
	var v likeFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Like"
	v.query.Outputs = likeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r likeFindMany) With(params ...LikeRelationWith) likeFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r likeFindMany) OrderBy(params ...LikeOrderByParam) likeFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r likeFindMany) Skip(count int) likeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r likeFindMany) Take(count int) likeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r likeFindMany) Cursor(cursor LikeCursorParam) likeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r likeFindMany) Exec(ctx context.Context) (
	[]LikeModel,
	error,
) {
	var v []LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r likeFindMany) ExecInner(ctx context.Context) (
	[]InnerLike,
	error,
) {
	var v []InnerLike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r likeFindMany) Update(params ...LikeSetParam) likeUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Like"

	r.query.Outputs = countOutput

	var v likeUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type likeUpdateMany struct {
	query builder.Query
}

func (r likeUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r likeUpdateMany) likeModel() {}

func (r likeUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeUpdateMany) Tx() LikeManyTxResult {
	v := newLikeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r likeFindMany) Delete() likeDeleteMany {
	var v likeDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Like"

	v.query.Outputs = countOutput

	return v
}

type likeDeleteMany struct {
	query builder.Query
}

func (r likeDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p likeDeleteMany) likeModel() {}

func (r likeDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeDeleteMany) Tx() LikeManyTxResult {
	v := newLikeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFollowerToFollowerFindUnique struct {
	query builder.Query
}

func (r userFollowerToFollowerFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFollowerToFollowerFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerToFollowerFindUnique) with()                 {}
func (r userFollowerToFollowerFindUnique) userFollowerModel()    {}
func (r userFollowerToFollowerFindUnique) userFollowerRelation() {}

func (r userFollowerToFollowerFindUnique) With(params ...UserRelationWith) userFollowerToFollowerFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFollowerToFollowerFindUnique) Exec(ctx context.Context) (
	*UserFollowerModel,
	error,
) {
	var v *UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFollowerToFollowerFindUnique) ExecInner(ctx context.Context) (
	*InnerUserFollower,
	error,
) {
	var v *InnerUserFollower
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFollowerToFollowerFindUnique) Update(params ...UserFollowerSetParam) userFollowerToFollowerUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "UserFollower"

	var v userFollowerToFollowerUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userFollowerToFollowerUpdateUnique struct {
	query builder.Query
}

func (r userFollowerToFollowerUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerToFollowerUpdateUnique) userFollowerModel() {}

func (r userFollowerToFollowerUpdateUnique) Exec(ctx context.Context) (*UserFollowerModel, error) {
	var v UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerToFollowerUpdateUnique) Tx() UserFollowerUniqueTxResult {
	v := newUserFollowerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFollowerToFollowerFindUnique) Delete() userFollowerToFollowerDeleteUnique {
	var v userFollowerToFollowerDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "UserFollower"

	return v
}

type userFollowerToFollowerDeleteUnique struct {
	query builder.Query
}

func (r userFollowerToFollowerDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userFollowerToFollowerDeleteUnique) userFollowerModel() {}

func (r userFollowerToFollowerDeleteUnique) Exec(ctx context.Context) (*UserFollowerModel, error) {
	var v UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerToFollowerDeleteUnique) Tx() UserFollowerUniqueTxResult {
	v := newUserFollowerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFollowerToFollowerFindFirst struct {
	query builder.Query
}

func (r userFollowerToFollowerFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFollowerToFollowerFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerToFollowerFindFirst) with()                 {}
func (r userFollowerToFollowerFindFirst) userFollowerModel()    {}
func (r userFollowerToFollowerFindFirst) userFollowerRelation() {}

func (r userFollowerToFollowerFindFirst) With(params ...UserRelationWith) userFollowerToFollowerFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFollowerToFollowerFindFirst) OrderBy(params ...UserOrderByParam) userFollowerToFollowerFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFollowerToFollowerFindFirst) Skip(count int) userFollowerToFollowerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFollowerToFollowerFindFirst) Take(count int) userFollowerToFollowerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFollowerToFollowerFindFirst) Cursor(cursor UserFollowerCursorParam) userFollowerToFollowerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFollowerToFollowerFindFirst) Exec(ctx context.Context) (
	*UserFollowerModel,
	error,
) {
	var v *UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFollowerToFollowerFindFirst) ExecInner(ctx context.Context) (
	*InnerUserFollower,
	error,
) {
	var v *InnerUserFollower
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFollowerToFollowerFindMany struct {
	query builder.Query
}

func (r userFollowerToFollowerFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFollowerToFollowerFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerToFollowerFindMany) with()                 {}
func (r userFollowerToFollowerFindMany) userFollowerModel()    {}
func (r userFollowerToFollowerFindMany) userFollowerRelation() {}

func (r userFollowerToFollowerFindMany) With(params ...UserRelationWith) userFollowerToFollowerFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFollowerToFollowerFindMany) OrderBy(params ...UserOrderByParam) userFollowerToFollowerFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFollowerToFollowerFindMany) Skip(count int) userFollowerToFollowerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFollowerToFollowerFindMany) Take(count int) userFollowerToFollowerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFollowerToFollowerFindMany) Cursor(cursor UserFollowerCursorParam) userFollowerToFollowerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFollowerToFollowerFindMany) Exec(ctx context.Context) (
	[]UserFollowerModel,
	error,
) {
	var v []UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFollowerToFollowerFindMany) ExecInner(ctx context.Context) (
	[]InnerUserFollower,
	error,
) {
	var v []InnerUserFollower
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFollowerToFollowerFindMany) Update(params ...UserFollowerSetParam) userFollowerToFollowerUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "UserFollower"

	r.query.Outputs = countOutput

	var v userFollowerToFollowerUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userFollowerToFollowerUpdateMany struct {
	query builder.Query
}

func (r userFollowerToFollowerUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerToFollowerUpdateMany) userFollowerModel() {}

func (r userFollowerToFollowerUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerToFollowerUpdateMany) Tx() UserFollowerManyTxResult {
	v := newUserFollowerManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFollowerToFollowerFindMany) Delete() userFollowerToFollowerDeleteMany {
	var v userFollowerToFollowerDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "UserFollower"

	v.query.Outputs = countOutput

	return v
}

type userFollowerToFollowerDeleteMany struct {
	query builder.Query
}

func (r userFollowerToFollowerDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userFollowerToFollowerDeleteMany) userFollowerModel() {}

func (r userFollowerToFollowerDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerToFollowerDeleteMany) Tx() UserFollowerManyTxResult {
	v := newUserFollowerManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFollowerToFolloweeFindUnique struct {
	query builder.Query
}

func (r userFollowerToFolloweeFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFollowerToFolloweeFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerToFolloweeFindUnique) with()                 {}
func (r userFollowerToFolloweeFindUnique) userFollowerModel()    {}
func (r userFollowerToFolloweeFindUnique) userFollowerRelation() {}

func (r userFollowerToFolloweeFindUnique) With(params ...UserRelationWith) userFollowerToFolloweeFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFollowerToFolloweeFindUnique) Exec(ctx context.Context) (
	*UserFollowerModel,
	error,
) {
	var v *UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFollowerToFolloweeFindUnique) ExecInner(ctx context.Context) (
	*InnerUserFollower,
	error,
) {
	var v *InnerUserFollower
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFollowerToFolloweeFindUnique) Update(params ...UserFollowerSetParam) userFollowerToFolloweeUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "UserFollower"

	var v userFollowerToFolloweeUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userFollowerToFolloweeUpdateUnique struct {
	query builder.Query
}

func (r userFollowerToFolloweeUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerToFolloweeUpdateUnique) userFollowerModel() {}

func (r userFollowerToFolloweeUpdateUnique) Exec(ctx context.Context) (*UserFollowerModel, error) {
	var v UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerToFolloweeUpdateUnique) Tx() UserFollowerUniqueTxResult {
	v := newUserFollowerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFollowerToFolloweeFindUnique) Delete() userFollowerToFolloweeDeleteUnique {
	var v userFollowerToFolloweeDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "UserFollower"

	return v
}

type userFollowerToFolloweeDeleteUnique struct {
	query builder.Query
}

func (r userFollowerToFolloweeDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userFollowerToFolloweeDeleteUnique) userFollowerModel() {}

func (r userFollowerToFolloweeDeleteUnique) Exec(ctx context.Context) (*UserFollowerModel, error) {
	var v UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerToFolloweeDeleteUnique) Tx() UserFollowerUniqueTxResult {
	v := newUserFollowerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFollowerToFolloweeFindFirst struct {
	query builder.Query
}

func (r userFollowerToFolloweeFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFollowerToFolloweeFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerToFolloweeFindFirst) with()                 {}
func (r userFollowerToFolloweeFindFirst) userFollowerModel()    {}
func (r userFollowerToFolloweeFindFirst) userFollowerRelation() {}

func (r userFollowerToFolloweeFindFirst) With(params ...UserRelationWith) userFollowerToFolloweeFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFollowerToFolloweeFindFirst) OrderBy(params ...UserOrderByParam) userFollowerToFolloweeFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFollowerToFolloweeFindFirst) Skip(count int) userFollowerToFolloweeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFollowerToFolloweeFindFirst) Take(count int) userFollowerToFolloweeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFollowerToFolloweeFindFirst) Cursor(cursor UserFollowerCursorParam) userFollowerToFolloweeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFollowerToFolloweeFindFirst) Exec(ctx context.Context) (
	*UserFollowerModel,
	error,
) {
	var v *UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFollowerToFolloweeFindFirst) ExecInner(ctx context.Context) (
	*InnerUserFollower,
	error,
) {
	var v *InnerUserFollower
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFollowerToFolloweeFindMany struct {
	query builder.Query
}

func (r userFollowerToFolloweeFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFollowerToFolloweeFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerToFolloweeFindMany) with()                 {}
func (r userFollowerToFolloweeFindMany) userFollowerModel()    {}
func (r userFollowerToFolloweeFindMany) userFollowerRelation() {}

func (r userFollowerToFolloweeFindMany) With(params ...UserRelationWith) userFollowerToFolloweeFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFollowerToFolloweeFindMany) OrderBy(params ...UserOrderByParam) userFollowerToFolloweeFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFollowerToFolloweeFindMany) Skip(count int) userFollowerToFolloweeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFollowerToFolloweeFindMany) Take(count int) userFollowerToFolloweeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFollowerToFolloweeFindMany) Cursor(cursor UserFollowerCursorParam) userFollowerToFolloweeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFollowerToFolloweeFindMany) Exec(ctx context.Context) (
	[]UserFollowerModel,
	error,
) {
	var v []UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFollowerToFolloweeFindMany) ExecInner(ctx context.Context) (
	[]InnerUserFollower,
	error,
) {
	var v []InnerUserFollower
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFollowerToFolloweeFindMany) Update(params ...UserFollowerSetParam) userFollowerToFolloweeUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "UserFollower"

	r.query.Outputs = countOutput

	var v userFollowerToFolloweeUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userFollowerToFolloweeUpdateMany struct {
	query builder.Query
}

func (r userFollowerToFolloweeUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerToFolloweeUpdateMany) userFollowerModel() {}

func (r userFollowerToFolloweeUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerToFolloweeUpdateMany) Tx() UserFollowerManyTxResult {
	v := newUserFollowerManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFollowerToFolloweeFindMany) Delete() userFollowerToFolloweeDeleteMany {
	var v userFollowerToFolloweeDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "UserFollower"

	v.query.Outputs = countOutput

	return v
}

type userFollowerToFolloweeDeleteMany struct {
	query builder.Query
}

func (r userFollowerToFolloweeDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userFollowerToFolloweeDeleteMany) userFollowerModel() {}

func (r userFollowerToFolloweeDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerToFolloweeDeleteMany) Tx() UserFollowerManyTxResult {
	v := newUserFollowerManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFollowerFindUnique struct {
	query builder.Query
}

func (r userFollowerFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFollowerFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerFindUnique) with()                 {}
func (r userFollowerFindUnique) userFollowerModel()    {}
func (r userFollowerFindUnique) userFollowerRelation() {}

func (r userFollowerActions) FindUnique(
	params UserFollowerEqualsUniqueWhereParam,
) userFollowerFindUnique {
	var v userFollowerFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "UserFollower"
	v.query.Outputs = userFollowerOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userFollowerFindUnique) With(params ...UserFollowerRelationWith) userFollowerFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFollowerFindUnique) Exec(ctx context.Context) (
	*UserFollowerModel,
	error,
) {
	var v *UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFollowerFindUnique) ExecInner(ctx context.Context) (
	*InnerUserFollower,
	error,
) {
	var v *InnerUserFollower
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFollowerFindUnique) Update(params ...UserFollowerSetParam) userFollowerUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "UserFollower"

	var v userFollowerUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userFollowerUpdateUnique struct {
	query builder.Query
}

func (r userFollowerUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerUpdateUnique) userFollowerModel() {}

func (r userFollowerUpdateUnique) Exec(ctx context.Context) (*UserFollowerModel, error) {
	var v UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerUpdateUnique) Tx() UserFollowerUniqueTxResult {
	v := newUserFollowerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFollowerFindUnique) Delete() userFollowerDeleteUnique {
	var v userFollowerDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "UserFollower"

	return v
}

type userFollowerDeleteUnique struct {
	query builder.Query
}

func (r userFollowerDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userFollowerDeleteUnique) userFollowerModel() {}

func (r userFollowerDeleteUnique) Exec(ctx context.Context) (*UserFollowerModel, error) {
	var v UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerDeleteUnique) Tx() UserFollowerUniqueTxResult {
	v := newUserFollowerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFollowerFindFirst struct {
	query builder.Query
}

func (r userFollowerFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFollowerFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerFindFirst) with()                 {}
func (r userFollowerFindFirst) userFollowerModel()    {}
func (r userFollowerFindFirst) userFollowerRelation() {}

func (r userFollowerActions) FindFirst(
	params ...UserFollowerWhereParam,
) userFollowerFindFirst {
	var v userFollowerFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "UserFollower"
	v.query.Outputs = userFollowerOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFollowerFindFirst) With(params ...UserFollowerRelationWith) userFollowerFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFollowerFindFirst) OrderBy(params ...UserFollowerOrderByParam) userFollowerFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFollowerFindFirst) Skip(count int) userFollowerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFollowerFindFirst) Take(count int) userFollowerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFollowerFindFirst) Cursor(cursor UserFollowerCursorParam) userFollowerFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFollowerFindFirst) Exec(ctx context.Context) (
	*UserFollowerModel,
	error,
) {
	var v *UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFollowerFindFirst) ExecInner(ctx context.Context) (
	*InnerUserFollower,
	error,
) {
	var v *InnerUserFollower
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFollowerFindMany struct {
	query builder.Query
}

func (r userFollowerFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFollowerFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerFindMany) with()                 {}
func (r userFollowerFindMany) userFollowerModel()    {}
func (r userFollowerFindMany) userFollowerRelation() {}

func (r userFollowerActions) FindMany(
	params ...UserFollowerWhereParam,
) userFollowerFindMany {
	var v userFollowerFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "UserFollower"
	v.query.Outputs = userFollowerOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFollowerFindMany) With(params ...UserFollowerRelationWith) userFollowerFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFollowerFindMany) OrderBy(params ...UserFollowerOrderByParam) userFollowerFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFollowerFindMany) Skip(count int) userFollowerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFollowerFindMany) Take(count int) userFollowerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFollowerFindMany) Cursor(cursor UserFollowerCursorParam) userFollowerFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFollowerFindMany) Exec(ctx context.Context) (
	[]UserFollowerModel,
	error,
) {
	var v []UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFollowerFindMany) ExecInner(ctx context.Context) (
	[]InnerUserFollower,
	error,
) {
	var v []InnerUserFollower
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFollowerFindMany) Update(params ...UserFollowerSetParam) userFollowerUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "UserFollower"

	r.query.Outputs = countOutput

	var v userFollowerUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userFollowerUpdateMany struct {
	query builder.Query
}

func (r userFollowerUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerUpdateMany) userFollowerModel() {}

func (r userFollowerUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerUpdateMany) Tx() UserFollowerManyTxResult {
	v := newUserFollowerManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFollowerFindMany) Delete() userFollowerDeleteMany {
	var v userFollowerDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "UserFollower"

	v.query.Outputs = countOutput

	return v
}

type userFollowerDeleteMany struct {
	query builder.Query
}

func (r userFollowerDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userFollowerDeleteMany) userFollowerModel() {}

func (r userFollowerDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerDeleteMany) Tx() UserFollowerManyTxResult {
	v := newUserFollowerManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicationPostToUserFindUnique struct {
	query builder.Query
}

func (r publicationPostToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r publicationPostToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostToUserFindUnique) with()                    {}
func (r publicationPostToUserFindUnique) publicationPostModel()    {}
func (r publicationPostToUserFindUnique) publicationPostRelation() {}

func (r publicationPostToUserFindUnique) With(params ...UserRelationWith) publicationPostToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicationPostToUserFindUnique) Exec(ctx context.Context) (
	*PublicationPostModel,
	error,
) {
	var v *PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicationPostToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerPublicationPost,
	error,
) {
	var v *InnerPublicationPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicationPostToUserFindUnique) Update(params ...PublicationPostSetParam) publicationPostToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "PublicationPost"

	var v publicationPostToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type publicationPostToUserUpdateUnique struct {
	query builder.Query
}

func (r publicationPostToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostToUserUpdateUnique) publicationPostModel() {}

func (r publicationPostToUserUpdateUnique) Exec(ctx context.Context) (*PublicationPostModel, error) {
	var v PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostToUserUpdateUnique) Tx() PublicationPostUniqueTxResult {
	v := newPublicationPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r publicationPostToUserFindUnique) Delete() publicationPostToUserDeleteUnique {
	var v publicationPostToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "PublicationPost"

	return v
}

type publicationPostToUserDeleteUnique struct {
	query builder.Query
}

func (r publicationPostToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p publicationPostToUserDeleteUnique) publicationPostModel() {}

func (r publicationPostToUserDeleteUnique) Exec(ctx context.Context) (*PublicationPostModel, error) {
	var v PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostToUserDeleteUnique) Tx() PublicationPostUniqueTxResult {
	v := newPublicationPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicationPostToUserFindFirst struct {
	query builder.Query
}

func (r publicationPostToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r publicationPostToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostToUserFindFirst) with()                    {}
func (r publicationPostToUserFindFirst) publicationPostModel()    {}
func (r publicationPostToUserFindFirst) publicationPostRelation() {}

func (r publicationPostToUserFindFirst) With(params ...UserRelationWith) publicationPostToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicationPostToUserFindFirst) OrderBy(params ...UserOrderByParam) publicationPostToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r publicationPostToUserFindFirst) Skip(count int) publicationPostToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r publicationPostToUserFindFirst) Take(count int) publicationPostToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r publicationPostToUserFindFirst) Cursor(cursor PublicationPostCursorParam) publicationPostToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r publicationPostToUserFindFirst) Exec(ctx context.Context) (
	*PublicationPostModel,
	error,
) {
	var v *PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicationPostToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerPublicationPost,
	error,
) {
	var v *InnerPublicationPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type publicationPostToUserFindMany struct {
	query builder.Query
}

func (r publicationPostToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r publicationPostToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostToUserFindMany) with()                    {}
func (r publicationPostToUserFindMany) publicationPostModel()    {}
func (r publicationPostToUserFindMany) publicationPostRelation() {}

func (r publicationPostToUserFindMany) With(params ...UserRelationWith) publicationPostToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicationPostToUserFindMany) OrderBy(params ...UserOrderByParam) publicationPostToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r publicationPostToUserFindMany) Skip(count int) publicationPostToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r publicationPostToUserFindMany) Take(count int) publicationPostToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r publicationPostToUserFindMany) Cursor(cursor PublicationPostCursorParam) publicationPostToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r publicationPostToUserFindMany) Exec(ctx context.Context) (
	[]PublicationPostModel,
	error,
) {
	var v []PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r publicationPostToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerPublicationPost,
	error,
) {
	var v []InnerPublicationPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r publicationPostToUserFindMany) Update(params ...PublicationPostSetParam) publicationPostToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "PublicationPost"

	r.query.Outputs = countOutput

	var v publicationPostToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type publicationPostToUserUpdateMany struct {
	query builder.Query
}

func (r publicationPostToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostToUserUpdateMany) publicationPostModel() {}

func (r publicationPostToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostToUserUpdateMany) Tx() PublicationPostManyTxResult {
	v := newPublicationPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r publicationPostToUserFindMany) Delete() publicationPostToUserDeleteMany {
	var v publicationPostToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "PublicationPost"

	v.query.Outputs = countOutput

	return v
}

type publicationPostToUserDeleteMany struct {
	query builder.Query
}

func (r publicationPostToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p publicationPostToUserDeleteMany) publicationPostModel() {}

func (r publicationPostToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostToUserDeleteMany) Tx() PublicationPostManyTxResult {
	v := newPublicationPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicationPostToPostFindUnique struct {
	query builder.Query
}

func (r publicationPostToPostFindUnique) getQuery() builder.Query {
	return r.query
}

func (r publicationPostToPostFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostToPostFindUnique) with()                    {}
func (r publicationPostToPostFindUnique) publicationPostModel()    {}
func (r publicationPostToPostFindUnique) publicationPostRelation() {}

func (r publicationPostToPostFindUnique) With(params ...PostRelationWith) publicationPostToPostFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicationPostToPostFindUnique) Exec(ctx context.Context) (
	*PublicationPostModel,
	error,
) {
	var v *PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicationPostToPostFindUnique) ExecInner(ctx context.Context) (
	*InnerPublicationPost,
	error,
) {
	var v *InnerPublicationPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicationPostToPostFindUnique) Update(params ...PublicationPostSetParam) publicationPostToPostUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "PublicationPost"

	var v publicationPostToPostUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type publicationPostToPostUpdateUnique struct {
	query builder.Query
}

func (r publicationPostToPostUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostToPostUpdateUnique) publicationPostModel() {}

func (r publicationPostToPostUpdateUnique) Exec(ctx context.Context) (*PublicationPostModel, error) {
	var v PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostToPostUpdateUnique) Tx() PublicationPostUniqueTxResult {
	v := newPublicationPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r publicationPostToPostFindUnique) Delete() publicationPostToPostDeleteUnique {
	var v publicationPostToPostDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "PublicationPost"

	return v
}

type publicationPostToPostDeleteUnique struct {
	query builder.Query
}

func (r publicationPostToPostDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p publicationPostToPostDeleteUnique) publicationPostModel() {}

func (r publicationPostToPostDeleteUnique) Exec(ctx context.Context) (*PublicationPostModel, error) {
	var v PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostToPostDeleteUnique) Tx() PublicationPostUniqueTxResult {
	v := newPublicationPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicationPostToPostFindFirst struct {
	query builder.Query
}

func (r publicationPostToPostFindFirst) getQuery() builder.Query {
	return r.query
}

func (r publicationPostToPostFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostToPostFindFirst) with()                    {}
func (r publicationPostToPostFindFirst) publicationPostModel()    {}
func (r publicationPostToPostFindFirst) publicationPostRelation() {}

func (r publicationPostToPostFindFirst) With(params ...PostRelationWith) publicationPostToPostFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicationPostToPostFindFirst) OrderBy(params ...PostOrderByParam) publicationPostToPostFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r publicationPostToPostFindFirst) Skip(count int) publicationPostToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r publicationPostToPostFindFirst) Take(count int) publicationPostToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r publicationPostToPostFindFirst) Cursor(cursor PublicationPostCursorParam) publicationPostToPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r publicationPostToPostFindFirst) Exec(ctx context.Context) (
	*PublicationPostModel,
	error,
) {
	var v *PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicationPostToPostFindFirst) ExecInner(ctx context.Context) (
	*InnerPublicationPost,
	error,
) {
	var v *InnerPublicationPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type publicationPostToPostFindMany struct {
	query builder.Query
}

func (r publicationPostToPostFindMany) getQuery() builder.Query {
	return r.query
}

func (r publicationPostToPostFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostToPostFindMany) with()                    {}
func (r publicationPostToPostFindMany) publicationPostModel()    {}
func (r publicationPostToPostFindMany) publicationPostRelation() {}

func (r publicationPostToPostFindMany) With(params ...PostRelationWith) publicationPostToPostFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicationPostToPostFindMany) OrderBy(params ...PostOrderByParam) publicationPostToPostFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r publicationPostToPostFindMany) Skip(count int) publicationPostToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r publicationPostToPostFindMany) Take(count int) publicationPostToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r publicationPostToPostFindMany) Cursor(cursor PublicationPostCursorParam) publicationPostToPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r publicationPostToPostFindMany) Exec(ctx context.Context) (
	[]PublicationPostModel,
	error,
) {
	var v []PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r publicationPostToPostFindMany) ExecInner(ctx context.Context) (
	[]InnerPublicationPost,
	error,
) {
	var v []InnerPublicationPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r publicationPostToPostFindMany) Update(params ...PublicationPostSetParam) publicationPostToPostUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "PublicationPost"

	r.query.Outputs = countOutput

	var v publicationPostToPostUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type publicationPostToPostUpdateMany struct {
	query builder.Query
}

func (r publicationPostToPostUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostToPostUpdateMany) publicationPostModel() {}

func (r publicationPostToPostUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostToPostUpdateMany) Tx() PublicationPostManyTxResult {
	v := newPublicationPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r publicationPostToPostFindMany) Delete() publicationPostToPostDeleteMany {
	var v publicationPostToPostDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "PublicationPost"

	v.query.Outputs = countOutput

	return v
}

type publicationPostToPostDeleteMany struct {
	query builder.Query
}

func (r publicationPostToPostDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p publicationPostToPostDeleteMany) publicationPostModel() {}

func (r publicationPostToPostDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostToPostDeleteMany) Tx() PublicationPostManyTxResult {
	v := newPublicationPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicationPostFindUnique struct {
	query builder.Query
}

func (r publicationPostFindUnique) getQuery() builder.Query {
	return r.query
}

func (r publicationPostFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostFindUnique) with()                    {}
func (r publicationPostFindUnique) publicationPostModel()    {}
func (r publicationPostFindUnique) publicationPostRelation() {}

func (r publicationPostActions) FindUnique(
	params PublicationPostEqualsUniqueWhereParam,
) publicationPostFindUnique {
	var v publicationPostFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "PublicationPost"
	v.query.Outputs = publicationPostOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r publicationPostFindUnique) With(params ...PublicationPostRelationWith) publicationPostFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicationPostFindUnique) Exec(ctx context.Context) (
	*PublicationPostModel,
	error,
) {
	var v *PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicationPostFindUnique) ExecInner(ctx context.Context) (
	*InnerPublicationPost,
	error,
) {
	var v *InnerPublicationPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicationPostFindUnique) Update(params ...PublicationPostSetParam) publicationPostUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "PublicationPost"

	var v publicationPostUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type publicationPostUpdateUnique struct {
	query builder.Query
}

func (r publicationPostUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostUpdateUnique) publicationPostModel() {}

func (r publicationPostUpdateUnique) Exec(ctx context.Context) (*PublicationPostModel, error) {
	var v PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostUpdateUnique) Tx() PublicationPostUniqueTxResult {
	v := newPublicationPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r publicationPostFindUnique) Delete() publicationPostDeleteUnique {
	var v publicationPostDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "PublicationPost"

	return v
}

type publicationPostDeleteUnique struct {
	query builder.Query
}

func (r publicationPostDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p publicationPostDeleteUnique) publicationPostModel() {}

func (r publicationPostDeleteUnique) Exec(ctx context.Context) (*PublicationPostModel, error) {
	var v PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostDeleteUnique) Tx() PublicationPostUniqueTxResult {
	v := newPublicationPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicationPostFindFirst struct {
	query builder.Query
}

func (r publicationPostFindFirst) getQuery() builder.Query {
	return r.query
}

func (r publicationPostFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostFindFirst) with()                    {}
func (r publicationPostFindFirst) publicationPostModel()    {}
func (r publicationPostFindFirst) publicationPostRelation() {}

func (r publicationPostActions) FindFirst(
	params ...PublicationPostWhereParam,
) publicationPostFindFirst {
	var v publicationPostFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "PublicationPost"
	v.query.Outputs = publicationPostOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r publicationPostFindFirst) With(params ...PublicationPostRelationWith) publicationPostFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicationPostFindFirst) OrderBy(params ...PublicationPostOrderByParam) publicationPostFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r publicationPostFindFirst) Skip(count int) publicationPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r publicationPostFindFirst) Take(count int) publicationPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r publicationPostFindFirst) Cursor(cursor PublicationPostCursorParam) publicationPostFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r publicationPostFindFirst) Exec(ctx context.Context) (
	*PublicationPostModel,
	error,
) {
	var v *PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r publicationPostFindFirst) ExecInner(ctx context.Context) (
	*InnerPublicationPost,
	error,
) {
	var v *InnerPublicationPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type publicationPostFindMany struct {
	query builder.Query
}

func (r publicationPostFindMany) getQuery() builder.Query {
	return r.query
}

func (r publicationPostFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostFindMany) with()                    {}
func (r publicationPostFindMany) publicationPostModel()    {}
func (r publicationPostFindMany) publicationPostRelation() {}

func (r publicationPostActions) FindMany(
	params ...PublicationPostWhereParam,
) publicationPostFindMany {
	var v publicationPostFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "PublicationPost"
	v.query.Outputs = publicationPostOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r publicationPostFindMany) With(params ...PublicationPostRelationWith) publicationPostFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r publicationPostFindMany) OrderBy(params ...PublicationPostOrderByParam) publicationPostFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r publicationPostFindMany) Skip(count int) publicationPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r publicationPostFindMany) Take(count int) publicationPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r publicationPostFindMany) Cursor(cursor PublicationPostCursorParam) publicationPostFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r publicationPostFindMany) Exec(ctx context.Context) (
	[]PublicationPostModel,
	error,
) {
	var v []PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r publicationPostFindMany) ExecInner(ctx context.Context) (
	[]InnerPublicationPost,
	error,
) {
	var v []InnerPublicationPost
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r publicationPostFindMany) Update(params ...PublicationPostSetParam) publicationPostUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "PublicationPost"

	r.query.Outputs = countOutput

	var v publicationPostUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type publicationPostUpdateMany struct {
	query builder.Query
}

func (r publicationPostUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostUpdateMany) publicationPostModel() {}

func (r publicationPostUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostUpdateMany) Tx() PublicationPostManyTxResult {
	v := newPublicationPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r publicationPostFindMany) Delete() publicationPostDeleteMany {
	var v publicationPostDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "PublicationPost"

	v.query.Outputs = countOutput

	return v
}

type publicationPostDeleteMany struct {
	query builder.Query
}

func (r publicationPostDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p publicationPostDeleteMany) publicationPostModel() {}

func (r publicationPostDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostDeleteMany) Tx() PublicationPostManyTxResult {
	v := newPublicationPostManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func newUserUniqueTxResult() UserUniqueTxResult {
	return UserUniqueTxResult{
		result: &transaction.Result{},
	}
}

type UserUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserUniqueTxResult) IsTx() {}

func (r UserUniqueTxResult) Result() (v *UserModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserManyTxResult() UserManyTxResult {
	return UserManyTxResult{
		result: &transaction.Result{},
	}
}

type UserManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserManyTxResult) IsTx() {}

func (r UserManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserProfileUniqueTxResult() UserProfileUniqueTxResult {
	return UserProfileUniqueTxResult{
		result: &transaction.Result{},
	}
}

type UserProfileUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserProfileUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserProfileUniqueTxResult) IsTx() {}

func (r UserProfileUniqueTxResult) Result() (v *UserProfileModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserProfileManyTxResult() UserProfileManyTxResult {
	return UserProfileManyTxResult{
		result: &transaction.Result{},
	}
}

type UserProfileManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserProfileManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserProfileManyTxResult) IsTx() {}

func (r UserProfileManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPostUniqueTxResult() PostUniqueTxResult {
	return PostUniqueTxResult{
		result: &transaction.Result{},
	}
}

type PostUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PostUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PostUniqueTxResult) IsTx() {}

func (r PostUniqueTxResult) Result() (v *PostModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPostManyTxResult() PostManyTxResult {
	return PostManyTxResult{
		result: &transaction.Result{},
	}
}

type PostManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PostManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PostManyTxResult) IsTx() {}

func (r PostManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPostTagUniqueTxResult() PostTagUniqueTxResult {
	return PostTagUniqueTxResult{
		result: &transaction.Result{},
	}
}

type PostTagUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PostTagUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PostTagUniqueTxResult) IsTx() {}

func (r PostTagUniqueTxResult) Result() (v *PostTagModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPostTagManyTxResult() PostTagManyTxResult {
	return PostTagManyTxResult{
		result: &transaction.Result{},
	}
}

type PostTagManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PostTagManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PostTagManyTxResult) IsTx() {}

func (r PostTagManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPostCategoryUniqueTxResult() PostCategoryUniqueTxResult {
	return PostCategoryUniqueTxResult{
		result: &transaction.Result{},
	}
}

type PostCategoryUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PostCategoryUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PostCategoryUniqueTxResult) IsTx() {}

func (r PostCategoryUniqueTxResult) Result() (v *PostCategoryModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPostCategoryManyTxResult() PostCategoryManyTxResult {
	return PostCategoryManyTxResult{
		result: &transaction.Result{},
	}
}

type PostCategoryManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PostCategoryManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PostCategoryManyTxResult) IsTx() {}

func (r PostCategoryManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newCommentUniqueTxResult() CommentUniqueTxResult {
	return CommentUniqueTxResult{
		result: &transaction.Result{},
	}
}

type CommentUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p CommentUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p CommentUniqueTxResult) IsTx() {}

func (r CommentUniqueTxResult) Result() (v *CommentModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newCommentManyTxResult() CommentManyTxResult {
	return CommentManyTxResult{
		result: &transaction.Result{},
	}
}

type CommentManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p CommentManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p CommentManyTxResult) IsTx() {}

func (r CommentManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newLikeUniqueTxResult() LikeUniqueTxResult {
	return LikeUniqueTxResult{
		result: &transaction.Result{},
	}
}

type LikeUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p LikeUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p LikeUniqueTxResult) IsTx() {}

func (r LikeUniqueTxResult) Result() (v *LikeModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newLikeManyTxResult() LikeManyTxResult {
	return LikeManyTxResult{
		result: &transaction.Result{},
	}
}

type LikeManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p LikeManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p LikeManyTxResult) IsTx() {}

func (r LikeManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserFollowerUniqueTxResult() UserFollowerUniqueTxResult {
	return UserFollowerUniqueTxResult{
		result: &transaction.Result{},
	}
}

type UserFollowerUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserFollowerUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserFollowerUniqueTxResult) IsTx() {}

func (r UserFollowerUniqueTxResult) Result() (v *UserFollowerModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserFollowerManyTxResult() UserFollowerManyTxResult {
	return UserFollowerManyTxResult{
		result: &transaction.Result{},
	}
}

type UserFollowerManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserFollowerManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserFollowerManyTxResult) IsTx() {}

func (r UserFollowerManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPublicationPostUniqueTxResult() PublicationPostUniqueTxResult {
	return PublicationPostUniqueTxResult{
		result: &transaction.Result{},
	}
}

type PublicationPostUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PublicationPostUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PublicationPostUniqueTxResult) IsTx() {}

func (r PublicationPostUniqueTxResult) Result() (v *PublicationPostModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPublicationPostManyTxResult() PublicationPostManyTxResult {
	return PublicationPostManyTxResult{
		result: &transaction.Result{},
	}
}

type PublicationPostManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PublicationPostManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PublicationPostManyTxResult) IsTx() {}

func (r PublicationPostManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type userUpsertOne struct {
	query builder.Query
}

func (r userUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) with()         {}
func (r userUpsertOne) userModel()    {}
func (r userUpsertOne) userRelation() {}

func (r userActions) UpsertOne(
	params UserEqualsUniqueWhereParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userUpsertOne) Create(

	_email UserWithPrismaEmailSetParam,
	_password UserWithPrismaPasswordSetParam,

	optional ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _email.field())
	fields = append(fields, _password.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Update(
	params ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpsertOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userProfileUpsertOne struct {
	query builder.Query
}

func (r userProfileUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userProfileUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userProfileUpsertOne) with()                {}
func (r userProfileUpsertOne) userProfileModel()    {}
func (r userProfileUpsertOne) userProfileRelation() {}

func (r userProfileActions) UpsertOne(
	params UserProfileEqualsUniqueWhereParam,
) userProfileUpsertOne {
	var v userProfileUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "UserProfile"
	v.query.Outputs = userProfileOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userProfileUpsertOne) Create(

	_firstName UserProfileWithPrismaFirstNameSetParam,
	_lastName UserProfileWithPrismaLastNameSetParam,
	_bio UserProfileWithPrismaBioSetParam,
	_profilePicture UserProfileWithPrismaProfilePictureSetParam,
	_user UserProfileWithPrismaUserSetParam,

	optional ...UserProfileSetParam,
) userProfileUpsertOne {
	var v userProfileUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _firstName.field())
	fields = append(fields, _lastName.field())
	fields = append(fields, _bio.field())
	fields = append(fields, _profilePicture.field())
	fields = append(fields, _user.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userProfileUpsertOne) Update(
	params ...UserProfileSetParam,
) userProfileUpsertOne {
	var v userProfileUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userProfileUpsertOne) Exec(ctx context.Context) (*UserProfileModel, error) {
	var v UserProfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userProfileUpsertOne) Tx() UserProfileUniqueTxResult {
	v := newUserProfileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postUpsertOne struct {
	query builder.Query
}

func (r postUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r postUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r postUpsertOne) with()         {}
func (r postUpsertOne) postModel()    {}
func (r postUpsertOne) postRelation() {}

func (r postActions) UpsertOne(
	params PostEqualsUniqueWhereParam,
) postUpsertOne {
	var v postUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Post"
	v.query.Outputs = postOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r postUpsertOne) Create(

	_title PostWithPrismaTitleSetParam,
	_source PostWithPrismaSourceSetParam,
	_srcType PostWithPrismaSrcTypeSetParam,
	_published PostWithPrismaPublishedSetParam,
	_user PostWithPrismaUserSetParam,
	_tags PostWithPrismaTagsSetParam,
	_category PostWithPrismaCategorySetParam,

	optional ...PostSetParam,
) postUpsertOne {
	var v postUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _title.field())
	fields = append(fields, _source.field())
	fields = append(fields, _srcType.field())
	fields = append(fields, _published.field())
	fields = append(fields, _user.field())
	fields = append(fields, _tags.field())
	fields = append(fields, _category.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r postUpsertOne) Update(
	params ...PostSetParam,
) postUpsertOne {
	var v postUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r postUpsertOne) Exec(ctx context.Context) (*PostModel, error) {
	var v PostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postUpsertOne) Tx() PostUniqueTxResult {
	v := newPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postTagUpsertOne struct {
	query builder.Query
}

func (r postTagUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r postTagUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r postTagUpsertOne) with()            {}
func (r postTagUpsertOne) postTagModel()    {}
func (r postTagUpsertOne) postTagRelation() {}

func (r postTagActions) UpsertOne(
	params PostTagEqualsUniqueWhereParam,
) postTagUpsertOne {
	var v postTagUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "PostTag"
	v.query.Outputs = postTagOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r postTagUpsertOne) Create(

	optional ...PostTagSetParam,
) postTagUpsertOne {
	var v postTagUpsertOne
	v.query = r.query

	var fields []builder.Field

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r postTagUpsertOne) Update(
	params ...PostTagSetParam,
) postTagUpsertOne {
	var v postTagUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r postTagUpsertOne) Exec(ctx context.Context) (*PostTagModel, error) {
	var v PostTagModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postTagUpsertOne) Tx() PostTagUniqueTxResult {
	v := newPostTagUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type postCategoryUpsertOne struct {
	query builder.Query
}

func (r postCategoryUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r postCategoryUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r postCategoryUpsertOne) with()                 {}
func (r postCategoryUpsertOne) postCategoryModel()    {}
func (r postCategoryUpsertOne) postCategoryRelation() {}

func (r postCategoryActions) UpsertOne(
	params PostCategoryEqualsUniqueWhereParam,
) postCategoryUpsertOne {
	var v postCategoryUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "PostCategory"
	v.query.Outputs = postCategoryOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r postCategoryUpsertOne) Create(

	_name PostCategoryWithPrismaNameSetParam,

	optional ...PostCategorySetParam,
) postCategoryUpsertOne {
	var v postCategoryUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r postCategoryUpsertOne) Update(
	params ...PostCategorySetParam,
) postCategoryUpsertOne {
	var v postCategoryUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r postCategoryUpsertOne) Exec(ctx context.Context) (*PostCategoryModel, error) {
	var v PostCategoryModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r postCategoryUpsertOne) Tx() PostCategoryUniqueTxResult {
	v := newPostCategoryUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type commentUpsertOne struct {
	query builder.Query
}

func (r commentUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r commentUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r commentUpsertOne) with()            {}
func (r commentUpsertOne) commentModel()    {}
func (r commentUpsertOne) commentRelation() {}

func (r commentActions) UpsertOne(
	params CommentEqualsUniqueWhereParam,
) commentUpsertOne {
	var v commentUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Comment"
	v.query.Outputs = commentOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r commentUpsertOne) Create(

	_content CommentWithPrismaContentSetParam,
	_user CommentWithPrismaUserSetParam,
	_post CommentWithPrismaPostSetParam,

	optional ...CommentSetParam,
) commentUpsertOne {
	var v commentUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _content.field())
	fields = append(fields, _user.field())
	fields = append(fields, _post.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r commentUpsertOne) Update(
	params ...CommentSetParam,
) commentUpsertOne {
	var v commentUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r commentUpsertOne) Exec(ctx context.Context) (*CommentModel, error) {
	var v CommentModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r commentUpsertOne) Tx() CommentUniqueTxResult {
	v := newCommentUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type likeUpsertOne struct {
	query builder.Query
}

func (r likeUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r likeUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r likeUpsertOne) with()         {}
func (r likeUpsertOne) likeModel()    {}
func (r likeUpsertOne) likeRelation() {}

func (r likeActions) UpsertOne(
	params LikeEqualsUniqueWhereParam,
) likeUpsertOne {
	var v likeUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Like"
	v.query.Outputs = likeOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r likeUpsertOne) Create(

	_user LikeWithPrismaUserSetParam,
	_post LikeWithPrismaPostSetParam,

	optional ...LikeSetParam,
) likeUpsertOne {
	var v likeUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _user.field())
	fields = append(fields, _post.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r likeUpsertOne) Update(
	params ...LikeSetParam,
) likeUpsertOne {
	var v likeUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r likeUpsertOne) Exec(ctx context.Context) (*LikeModel, error) {
	var v LikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r likeUpsertOne) Tx() LikeUniqueTxResult {
	v := newLikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFollowerUpsertOne struct {
	query builder.Query
}

func (r userFollowerUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userFollowerUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userFollowerUpsertOne) with()                 {}
func (r userFollowerUpsertOne) userFollowerModel()    {}
func (r userFollowerUpsertOne) userFollowerRelation() {}

func (r userFollowerActions) UpsertOne(
	params UserFollowerEqualsUniqueWhereParam,
) userFollowerUpsertOne {
	var v userFollowerUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "UserFollower"
	v.query.Outputs = userFollowerOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userFollowerUpsertOne) Create(

	_follower UserFollowerWithPrismaFollowerSetParam,
	_followee UserFollowerWithPrismaFolloweeSetParam,

	optional ...UserFollowerSetParam,
) userFollowerUpsertOne {
	var v userFollowerUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _follower.field())
	fields = append(fields, _followee.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userFollowerUpsertOne) Update(
	params ...UserFollowerSetParam,
) userFollowerUpsertOne {
	var v userFollowerUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userFollowerUpsertOne) Exec(ctx context.Context) (*UserFollowerModel, error) {
	var v UserFollowerModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userFollowerUpsertOne) Tx() UserFollowerUniqueTxResult {
	v := newUserFollowerUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type publicationPostUpsertOne struct {
	query builder.Query
}

func (r publicationPostUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r publicationPostUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r publicationPostUpsertOne) with()                    {}
func (r publicationPostUpsertOne) publicationPostModel()    {}
func (r publicationPostUpsertOne) publicationPostRelation() {}

func (r publicationPostActions) UpsertOne(
	params PublicationPostEqualsUniqueWhereParam,
) publicationPostUpsertOne {
	var v publicationPostUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "PublicationPost"
	v.query.Outputs = publicationPostOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r publicationPostUpsertOne) Create(

	_user PublicationPostWithPrismaUserSetParam,
	_post PublicationPostWithPrismaPostSetParam,

	optional ...PublicationPostSetParam,
) publicationPostUpsertOne {
	var v publicationPostUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _user.field())
	fields = append(fields, _post.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r publicationPostUpsertOne) Update(
	params ...PublicationPostSetParam,
) publicationPostUpsertOne {
	var v publicationPostUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r publicationPostUpsertOne) Exec(ctx context.Context) (*PublicationPostModel, error) {
	var v PublicationPostModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r publicationPostUpsertOne) Tx() PublicationPostUniqueTxResult {
	v := newPublicationPostUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}
