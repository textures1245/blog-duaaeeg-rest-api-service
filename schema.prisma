datasource db {
    provider = "postgresql"
    url      = env("SESSION_URL")
}

generator client {
    provider = "go run github.com/steebchen/prisma-client-go"
}

model User {
    id              Int               @default(autoincrement())
    uuid            String            @id @unique @default(uuid())
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    email           String            @unique
    password        String
    posts           Post[]
    comments        Comment[]
    likes           Like[]
    userProfile     UserProfile?
    PublicationPost PublicationPost[]
}

model UserProfile {
    id             Int      @default(autoincrement())
    uuid           String   @id @unique @default(uuid())
    firstName      String
    lastName       String
    bio            String
    profilePicture String
    user           User     @relation(fields: [userUuid], references: [uuid])
    userUuid       String   @unique
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Post {
    id              Int              @default(autoincrement())
    uuid            String           @id @unique @default(uuid())
    title           String
    source          String
    srcType         SrcType
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    published       Boolean
    userUuid        String
    user            User             @relation(fields: [userUuid], references: [uuid])
    tags            PostTag?
    categories      PostCategory?
    comments        Comment[]
    likes           Like[]
    PublicationPost PublicationPost?
}


model PostCategory {
    postUuid  String   @unique
    id        Int      @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postUuid], references: [uuid])

    @@id([postUuid, id])
}

enum SrcType {
    MARKDOWN_URL
    CONTENT
    MARKDOWN_FILE
}

model Tag {
    id              Int      @id @default(autoincrement())
    createdAt       DateTime @default(now())
    name            String   @unique
    PostTag         PostTag  @relation(fields: [postTagPostUuid], references: [postUuid])
    postTagPostUuid String
}

model PostTag {
    id        Int      @default(autoincrement())
    postUuid  String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postUuid], references: [uuid])
    tags      Tag[]

    @@id([postUuid, id])
}


model Comment {
    id        Int      @default(autoincrement())
    uuid      String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    userUuid  String
    postUuid  String
    user      User     @relation(fields: [userUuid], references: [uuid])
    post      Post     @relation(fields: [postUuid], references: [uuid])
}

model Like {
    id        Int      @default(autoincrement())
    uuid      String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    userUuid  String
    postUuid  String
    user      User     @relation(fields: [userUuid], references: [uuid])
    post      Post     @relation(fields: [postUuid], references: [uuid])
}

model PublicationPost {
    id        Int      @default(autoincrement())
    uuid      String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User     @relation(fields: [userUuid], references: [uuid])
    Post      Post     @relation(fields: [postUuid], references: [uuid])
    postUuid  String   @unique
    userUuid  String
}
